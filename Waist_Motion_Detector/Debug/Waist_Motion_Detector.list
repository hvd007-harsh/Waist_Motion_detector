
Waist_Motion_Detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08007e40  08007e40  00017e40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008090  08008090  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008090  08008090  00018090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008098  08008098  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008098  08008098  00018098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800809c  0800809c  0001809c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080080a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000070  08008110  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08008110  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0f1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d62  00000000  00000000  0002d191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  0002eef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  0002faa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b10  00000000  00000000  000305b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd76  00000000  00000000  000340c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bae1  00000000  00000000  00041e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd91f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d28  00000000  00000000  000cd970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007e24 	.word	0x08007e24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08007e24 	.word	0x08007e24

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b974 	b.w	8000f08 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468e      	mov	lr, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14d      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4694      	mov	ip, r2
 8000c4a:	d969      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b152      	cbz	r2, 8000c68 <__udivmoddi4+0x30>
 8000c52:	fa01 f302 	lsl.w	r3, r1, r2
 8000c56:	f1c2 0120 	rsb	r1, r2, #32
 8000c5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c62:	ea41 0e03 	orr.w	lr, r1, r3
 8000c66:	4094      	lsls	r4, r2
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	0c21      	lsrs	r1, r4, #16
 8000c6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c72:	fa1f f78c 	uxth.w	r7, ip
 8000c76:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7e:	fb06 f107 	mul.w	r1, r6, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 811f 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 811c 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 f707 	mul.w	r7, r0, r7
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	f080 810a 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	f240 8107 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	1be4      	subs	r4, r4, r7
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80ef 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80f9 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	469e      	mov	lr, r3
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <__udivmoddi4+0x21a>
 8000d2e:	eba1 010c 	sub.w	r1, r1, ip
 8000d32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d42:	fb07 1113 	mls	r1, r7, r3, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f200 80cb 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d74:	fb0e fe00 	mul.w	lr, lr, r0
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80bb 	bhi.w	8000f02 <__udivmoddi4+0x2ca>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d98:	f1c6 0720 	rsb	r7, r6, #32
 8000d9c:	40b3      	lsls	r3, r6
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa20 f407 	lsr.w	r4, r0, r7
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	431c      	orrs	r4, r3
 8000db0:	40f9      	lsrs	r1, r7
 8000db2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dbe:	0c20      	lsrs	r0, r4, #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	4288      	cmp	r0, r1
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e04:	458e      	cmp	lr, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	458e      	cmp	lr, r1
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e22:	eba1 010e 	sub.w	r1, r1, lr
 8000e26:	42a1      	cmp	r1, r4
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x212>
 8000e32:	ebb3 0208 	subs.w	r2, r3, r8
 8000e36:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e42:	40f1      	lsrs	r1, r6
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	f1c2 0320 	rsb	r3, r2, #32
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e60:	4091      	lsls	r1, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e70:	fb07 3610 	mls	r6, r7, r0, r3
 8000e74:	0c0b      	lsrs	r3, r1, #16
 8000e76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3e02      	subs	r6, #2
 8000ec0:	4461      	add	r1, ip
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e705      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e3      	b.n	8000c9c <__udivmoddi4+0x64>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f8      	b.n	8000cca <__udivmoddi4+0x92>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4620      	mov	r0, r4
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	e732      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000efe:	4630      	mov	r0, r6
 8000f00:	e709      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e742      	b.n	8000d8e <__udivmoddi4+0x156>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <UART1_SendString>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART1_SendString(char *s){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)s, strlen(s) , 1000);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff f963 	bl	80001e0 <strlen>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <UART1_SendString+0x28>)
 8000f26:	f004 ff18 	bl	8005d5a <HAL_UART_Transmit>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000180 	.word	0x20000180

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f3c:	b08e      	sub	sp, #56	; 0x38
 8000f3e:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init(); //Initializing the I2C and UART all code which are needed for HAL lang
 8000f40:	f001 fa16 	bl	8002370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f44:	f000 f904 	bl	8001150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f48:	f000 f9f0 	bl	800132c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f4c:	f000 f96c 	bl	8001228 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000f50:	f000 f998 	bl	8001284 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f54:	f000 f9c0 	bl	80012d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init(&hi2c1); //Initializing the I2C1 connection with I2C1
 8000f58:	486e      	ldr	r0, [pc, #440]	; (8001114 <main+0x1dc>)
 8000f5a:	f000 ffcf 	bl	8001efc <MPU6050_Init>

  MPU6050_SetInterruptMode(MPU6050_INTMODE_ACTIVEHIGH);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f000 fd68 	bl	8001a34 <MPU6050_SetInterruptMode>
  MPU6050_SetInterruptDrive(MPU6050_INTDRV_PUSHPULL);
 8000f64:	2000      	movs	r0, #0
 8000f66:	f000 fd9b 	bl	8001aa0 <MPU6050_SetInterruptDrive>
  MPU6050_SetInterruptLatch(MPU6050_INTLATCH_WAITCLEAR);
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f000 fdd0 	bl	8001b10 <MPU6050_SetInterruptLatch>
  MPU6050_SetInterruptLatchClear(MPU6050_INTCLEAR_STATUSREAD);
 8000f70:	2000      	movs	r0, #0
 8000f72:	f000 fe05 	bl	8001b80 <MPU6050_SetInterruptLatchClear>

  MPU6050_SetIntEnableRegister(0); //Disable all interrupts
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 fe3a 	bl	8001bf0 <MPU6050_SetIntEnableRegister>

  //Enable Motion Interrupts

  MPU6050_SetIntEnableRegister(0); //Disable all Interrupts
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 fe37 	bl	8001bf0 <MPU6050_SetIntEnableRegister>

  //Enable Motion Interrupts

  MPU6050_SetDHPFMode(MPU6050_DHPF_5);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f000 fe4c 	bl	8001c20 <MPU6050_SetDHPFMode>

  MPU6050_SetIntMotionEnabled(1);
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f000 feb9 	bl	8001d00 <MPU6050_SetIntMotionEnabled>
  MPU6050_SetIntZeroMotionEnabled(1);
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f000 fe7e 	bl	8001c90 <MPU6050_SetIntZeroMotionEnabled>
  MPU6050_SetIntFreeFallEnabled(1);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f000 feeb 	bl	8001d70 <MPU6050_SetIntFreeFallEnabled>

  MPU6050_SetFreeFallDetectionDuration(2);
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	f000 ff96 	bl	8001ecc <MPU6050_SetFreeFallDetectionDuration>
  MPU6050_SetFreeFallDetectionThreshold(2);
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	f000 ff7b 	bl	8001e9c <MPU6050_SetFreeFallDetectionThreshold>


  MPU6050_SetMotionDetectionDuration(5);
 8000fa6:	2005      	movs	r0, #5
 8000fa8:	f000 ff30 	bl	8001e0c <MPU6050_SetMotionDetectionDuration>
  MPU6050_SetMotionDetectionThreshold(5);
 8000fac:	2005      	movs	r0, #5
 8000fae:	f000 ff15 	bl	8001ddc <MPU6050_SetMotionDetectionThreshold>


  MPU6050_SetZeroMotionDetectionDuration(2);
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f000 ff5a 	bl	8001e6c <MPU6050_SetZeroMotionDetectionDuration>
  MPU6050_SetZeroMotionDetectionThreshold(4);
 8000fb8:	2004      	movs	r0, #4
 8000fba:	f000 ff3f 	bl	8001e3c <MPU6050_SetZeroMotionDetectionThreshold>
	   *
	   * we will Use the API :
	   * MPU6050_GetAccelerometerScaled(&ax,&ay,&az);
	   *  MPU6050_GetGyroscopeScaled(&gx, &gy, &gz);
	   */
	  MPU6050_GetAccelerometerScaled(&ax, &ay, &az);
 8000fbe:	4a56      	ldr	r2, [pc, #344]	; (8001118 <main+0x1e0>)
 8000fc0:	4956      	ldr	r1, [pc, #344]	; (800111c <main+0x1e4>)
 8000fc2:	4857      	ldr	r0, [pc, #348]	; (8001120 <main+0x1e8>)
 8000fc4:	f000 fbf2 	bl	80017ac <MPU6050_GetAccelerometerScaled>
	  MPU6050_GetGyroscopeScaled(&gx, &gy, &gz);
 8000fc8:	4a56      	ldr	r2, [pc, #344]	; (8001124 <main+0x1ec>)
 8000fca:	4957      	ldr	r1, [pc, #348]	; (8001128 <main+0x1f0>)
 8000fcc:	4857      	ldr	r0, [pc, #348]	; (800112c <main+0x1f4>)
 8000fce:	f000 fc63 	bl	8001898 <MPU6050_GetGyroscopeScaled>
	 // Here we are getting the acceleration and gyro parameter


	  sprintf((char*)buffer, "ACC: X: %0.2f Y: %0.2f Z: %0.2f \n\r GYR: X:%0.2f Y: %0.2f Z:%0.2f \n\r",ax,ay,az,gx,gy,gz); // @suppress("Float formatting support")
 8000fd2:	4b53      	ldr	r3, [pc, #332]	; (8001120 <main+0x1e8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fabe 	bl	8000558 <__aeabi_f2d>
 8000fdc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000fe0:	4b4e      	ldr	r3, [pc, #312]	; (800111c <main+0x1e4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fab7 	bl	8000558 <__aeabi_f2d>
 8000fea:	4604      	mov	r4, r0
 8000fec:	460d      	mov	r5, r1
 8000fee:	4b4a      	ldr	r3, [pc, #296]	; (8001118 <main+0x1e0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fab0 	bl	8000558 <__aeabi_f2d>
 8000ff8:	4680      	mov	r8, r0
 8000ffa:	4689      	mov	r9, r1
 8000ffc:	4b4b      	ldr	r3, [pc, #300]	; (800112c <main+0x1f4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff faa9 	bl	8000558 <__aeabi_f2d>
 8001006:	4682      	mov	sl, r0
 8001008:	468b      	mov	fp, r1
 800100a:	4b47      	ldr	r3, [pc, #284]	; (8001128 <main+0x1f0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff faa2 	bl	8000558 <__aeabi_f2d>
 8001014:	e9c7 0100 	strd	r0, r1, [r7]
 8001018:	4b42      	ldr	r3, [pc, #264]	; (8001124 <main+0x1ec>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fa9b 	bl	8000558 <__aeabi_f2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800102a:	ed97 7b00 	vldr	d7, [r7]
 800102e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001032:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001036:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800103a:	e9cd 4500 	strd	r4, r5, [sp]
 800103e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001042:	493b      	ldr	r1, [pc, #236]	; (8001130 <main+0x1f8>)
 8001044:	483b      	ldr	r0, [pc, #236]	; (8001134 <main+0x1fc>)
 8001046:	f005 fa47 	bl	80064d8 <siprintf>
	  memset(buffer,0,128);
 800104a:	2280      	movs	r2, #128	; 0x80
 800104c:	2100      	movs	r1, #0
 800104e:	4839      	ldr	r0, [pc, #228]	; (8001134 <main+0x1fc>)
 8001050:	f005 fa22 	bl	8006498 <memset>
	  UART1_SendString((char*)buffer);
 8001054:	4837      	ldr	r0, [pc, #220]	; (8001134 <main+0x1fc>)
 8001056:	f7ff ff59 	bl	8000f0c <UART1_SendString>
	   * so for calculating the roll and pitch
	   * we will Use the API :
	   * MPU6050_GetRollPitch(&roll,&pitch);
	   */

	  MPU6050_GetRollPitch(&roll, &pitch);
 800105a:	4937      	ldr	r1, [pc, #220]	; (8001138 <main+0x200>)
 800105c:	4837      	ldr	r0, [pc, #220]	; (800113c <main+0x204>)
 800105e:	f000 fc5b 	bl	8001918 <MPU6050_GetRollPitch>

	  if(roll >0  || pitch > 0 ){
 8001062:	4b36      	ldr	r3, [pc, #216]	; (800113c <main+0x204>)
 8001064:	edd3 7a00 	vldr	s15, [r3]
 8001068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	dc07      	bgt.n	8001082 <main+0x14a>
 8001072:	4b31      	ldr	r3, [pc, #196]	; (8001138 <main+0x200>)
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800107c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001080:	dd06      	ble.n	8001090 <main+0x158>
		  sprintf((char*)buffer,"The body is moving Person is in walking position");
 8001082:	492f      	ldr	r1, [pc, #188]	; (8001140 <main+0x208>)
 8001084:	482b      	ldr	r0, [pc, #172]	; (8001134 <main+0x1fc>)
 8001086:	f005 fa27 	bl	80064d8 <siprintf>
		  printf("The body is moving person is in standing position");
 800108a:	482e      	ldr	r0, [pc, #184]	; (8001144 <main+0x20c>)
 800108c:	f005 fa0c 	bl	80064a8 <iprintf>

	  }
     if(ax > 0 && ay>0 ){ //Here we can check the position with movement
 8001090:	4b23      	ldr	r3, [pc, #140]	; (8001120 <main+0x1e8>)
 8001092:	edd3 7a00 	vldr	s15, [r3]
 8001096:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800109a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109e:	dd0e      	ble.n	80010be <main+0x186>
 80010a0:	4b1e      	ldr	r3, [pc, #120]	; (800111c <main+0x1e4>)
 80010a2:	edd3 7a00 	vldr	s15, [r3]
 80010a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ae:	dd06      	ble.n	80010be <main+0x186>
    	 sprintf((char*)buffer,"person is in standing position");
 80010b0:	4925      	ldr	r1, [pc, #148]	; (8001148 <main+0x210>)
 80010b2:	4820      	ldr	r0, [pc, #128]	; (8001134 <main+0x1fc>)
 80010b4:	f005 fa10 	bl	80064d8 <siprintf>
    	 printf("person is in standing position");
 80010b8:	4823      	ldr	r0, [pc, #140]	; (8001148 <main+0x210>)
 80010ba:	f005 f9f5 	bl	80064a8 <iprintf>
     }

     if(ax ==0 && az == 0 && ay ==0){ //Here we are checking that person is in still position
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <main+0x1e8>)
 80010c0:	edd3 7a00 	vldr	s15, [r3]
 80010c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010cc:	d116      	bne.n	80010fc <main+0x1c4>
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <main+0x1e0>)
 80010d0:	edd3 7a00 	vldr	s15, [r3]
 80010d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	d10e      	bne.n	80010fc <main+0x1c4>
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <main+0x1e4>)
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ec:	d106      	bne.n	80010fc <main+0x1c4>
    	 sprintf((char*)buffer,"Person is not moving might be in seat position");
 80010ee:	4917      	ldr	r1, [pc, #92]	; (800114c <main+0x214>)
 80010f0:	4810      	ldr	r0, [pc, #64]	; (8001134 <main+0x1fc>)
 80010f2:	f005 f9f1 	bl	80064d8 <siprintf>
    	 printf("Person is not moving might be in seat position");
 80010f6:	4815      	ldr	r0, [pc, #84]	; (800114c <main+0x214>)
 80010f8:	f005 f9d6 	bl	80064a8 <iprintf>
      * we will calculate the acceleration and with using mathematics we will calculate the angle by making tangent
      * if Ax >= 45Deg and Ay >= 45Deg then we can say the angle is moving
      * upward
      *
      */
     memset(buffer,0 ,128);
 80010fc:	2280      	movs	r2, #128	; 0x80
 80010fe:	2100      	movs	r1, #0
 8001100:	480c      	ldr	r0, [pc, #48]	; (8001134 <main+0x1fc>)
 8001102:	f005 f9c9 	bl	8006498 <memset>
      UART1_SendString((char*)buffer);
 8001106:	480b      	ldr	r0, [pc, #44]	; (8001134 <main+0x1fc>)
 8001108:	f7ff ff00 	bl	8000f0c <UART1_SendString>


      HAL_Delay(100);
 800110c:	2064      	movs	r0, #100	; 0x64
 800110e:	f001 f9a1 	bl	8002454 <HAL_Delay>
	  MPU6050_GetAccelerometerScaled(&ax, &ay, &az);
 8001112:	e754      	b.n	8000fbe <main+0x86>
 8001114:	2000012c 	.word	0x2000012c
 8001118:	20000094 	.word	0x20000094
 800111c:	20000090 	.word	0x20000090
 8001120:	2000008c 	.word	0x2000008c
 8001124:	200000a0 	.word	0x200000a0
 8001128:	2000009c 	.word	0x2000009c
 800112c:	20000098 	.word	0x20000098
 8001130:	08007e40 	.word	0x08007e40
 8001134:	200000ac 	.word	0x200000ac
 8001138:	200000a8 	.word	0x200000a8
 800113c:	200000a4 	.word	0x200000a4
 8001140:	08007e84 	.word	0x08007e84
 8001144:	08007eb8 	.word	0x08007eb8
 8001148:	08007eec 	.word	0x08007eec
 800114c:	08007f0c 	.word	0x08007f0c

08001150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b094      	sub	sp, #80	; 0x50
 8001154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001156:	f107 0320 	add.w	r3, r7, #32
 800115a:	2230      	movs	r2, #48	; 0x30
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f005 f99a 	bl	8006498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	4b29      	ldr	r3, [pc, #164]	; (8001220 <SystemClock_Config+0xd0>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	4a28      	ldr	r2, [pc, #160]	; (8001220 <SystemClock_Config+0xd0>)
 800117e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001182:	6413      	str	r3, [r2, #64]	; 0x40
 8001184:	4b26      	ldr	r3, [pc, #152]	; (8001220 <SystemClock_Config+0xd0>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <SystemClock_Config+0xd4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800119c:	4a21      	ldr	r2, [pc, #132]	; (8001224 <SystemClock_Config+0xd4>)
 800119e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <SystemClock_Config+0xd4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b0:	2302      	movs	r3, #2
 80011b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b8:	2310      	movs	r3, #16
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	2302      	movs	r3, #2
 80011be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011c4:	2310      	movs	r3, #16
 80011c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011ce:	2304      	movs	r3, #4
 80011d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011d2:	2307      	movs	r3, #7
 80011d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 f8d8 	bl	8005390 <HAL_RCC_OscConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011e6:	f000 f8ff 	bl	80013e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ea:	230f      	movs	r3, #15
 80011ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ee:	2302      	movs	r3, #2
 80011f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	2102      	movs	r1, #2
 8001206:	4618      	mov	r0, r3
 8001208:	f004 fb3a 	bl	8005880 <HAL_RCC_ClockConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001212:	f000 f8e9 	bl	80013e8 <Error_Handler>
  }
}
 8001216:	bf00      	nop
 8001218:	3750      	adds	r7, #80	; 0x50
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40007000 	.word	0x40007000

08001228 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_I2C1_Init+0x50>)
 800122e:	4a13      	ldr	r2, [pc, #76]	; (800127c <MX_I2C1_Init+0x54>)
 8001230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_I2C1_Init+0x50>)
 8001234:	4a12      	ldr	r2, [pc, #72]	; (8001280 <MX_I2C1_Init+0x58>)
 8001236:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_I2C1_Init+0x50>)
 8001246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800124a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <MX_I2C1_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_I2C1_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001264:	4804      	ldr	r0, [pc, #16]	; (8001278 <MX_I2C1_Init+0x50>)
 8001266:	f001 fbf9 	bl	8002a5c <HAL_I2C_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001270:	f000 f8ba 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000012c 	.word	0x2000012c
 800127c:	40005400 	.word	0x40005400
 8001280:	000186a0 	.word	0x000186a0

08001284 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 800128a:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <MX_USART1_UART_Init+0x50>)
 800128c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012bc:	f004 fd00 	bl	8005cc0 <HAL_UART_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012c6:	f000 f88f 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000180 	.word	0x20000180
 80012d4:	40011000 	.word	0x40011000

080012d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <MX_USART2_UART_Init+0x50>)
 80012e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 80012e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 80012fe:	220c      	movs	r2, #12
 8001300:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 8001310:	f004 fcd6 	bl	8005cc0 <HAL_UART_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800131a:	f000 f865 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200001c4 	.word	0x200001c4
 8001328:	40004400 	.word	0x40004400

0800132c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <MX_GPIO_Init+0xb4>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a25      	ldr	r2, [pc, #148]	; (80013e0 <MX_GPIO_Init+0xb4>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <MX_GPIO_Init+0xb4>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <MX_GPIO_Init+0xb4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <MX_GPIO_Init+0xb4>)
 8001368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <MX_GPIO_Init+0xb4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <MX_GPIO_Init+0xb4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <MX_GPIO_Init+0xb4>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <MX_GPIO_Init+0xb4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_GPIO_Init+0xb4>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <MX_GPIO_Init+0xb4>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_GPIO_Init+0xb4>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	2120      	movs	r1, #32
 80013b6:	480b      	ldr	r0, [pc, #44]	; (80013e4 <MX_GPIO_Init+0xb8>)
 80013b8:	f001 fb36 	bl	8002a28 <HAL_GPIO_WritePin>



  /*Configure GPIO pin : Enabling the LED just for checking purpose */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013bc:	2320      	movs	r3, #32
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	4804      	ldr	r0, [pc, #16]	; (80013e4 <MX_GPIO_Init+0xb8>)
 80013d4:	f001 f9a4 	bl	8002720 <HAL_GPIO_Init>


}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	; 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020000 	.word	0x40020000

080013e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ec:	b672      	cpsid	i
}
 80013ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Occured at some part of HAL_ERROR Handler");
 80013f0:	4801      	ldr	r0, [pc, #4]	; (80013f8 <Error_Handler+0x10>)
 80013f2:	f005 f859 	bl	80064a8 <iprintf>
 80013f6:	e7fb      	b.n	80013f0 <Error_Handler+0x8>
 80013f8:	08007f3c 	.word	0x08007f3c

080013fc <MPU6050_SetDlpf>:

//
// CONFIG
//
void MPU6050_SetDlpf(uint8_t Value)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af04      	add	r7, sp, #16
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <MPU6050_SetDlpf+0x6c>)
 8001408:	6818      	ldr	r0, [r3, #0]
 800140a:	230a      	movs	r3, #10
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	2301      	movs	r3, #1
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	f107 030f 	add.w	r3, r7, #15
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2301      	movs	r3, #1
 800141a:	221a      	movs	r2, #26
 800141c:	21d0      	movs	r1, #208	; 0xd0
 800141e:	f001 fd5b 	bl	8002ed8 <HAL_I2C_Mem_Read>
	tmp &= 0xF8;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	f023 0307 	bic.w	r3, r3, #7
 8001428:	b2db      	uxtb	r3, r3
 800142a:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x7);
 800142c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	b25a      	sxtb	r2, r3
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	b25b      	sxtb	r3, r3
 800143a:	4313      	orrs	r3, r2
 800143c:	b25b      	sxtb	r3, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MPU6050_SetDlpf+0x6c>)
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	230a      	movs	r3, #10
 8001448:	9302      	str	r3, [sp, #8]
 800144a:	2301      	movs	r3, #1
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	f107 030f 	add.w	r3, r7, #15
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2301      	movs	r3, #1
 8001456:	221a      	movs	r2, #26
 8001458:	21d0      	movs	r1, #208	; 0xd0
 800145a:	f001 fc43 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000208 	.word	0x20000208

0800146c <MPU6050_DeviceReset>:

//
// PWR_MGMT_1
//
void MPU6050_DeviceReset(uint8_t Reset)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af04      	add	r7, sp, #16
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MPU6050_DeviceReset+0x68>)
 8001478:	6818      	ldr	r0, [r3, #0]
 800147a:	230a      	movs	r3, #10
 800147c:	9302      	str	r3, [sp, #8]
 800147e:	2301      	movs	r3, #1
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	f107 030f 	add.w	r3, r7, #15
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2301      	movs	r3, #1
 800148a:	226b      	movs	r2, #107	; 0x6b
 800148c:	21d0      	movs	r1, #208	; 0xd0
 800148e:	f001 fd23 	bl	8002ed8 <HAL_I2C_Mem_Read>
	tmp &= ~(1<<MPU6050_PWR1_DEVICE_RESET_BIT);
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001498:	b2db      	uxtb	r3, r3
 800149a:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Reset & 0x1) << MPU6050_PWR1_DEVICE_RESET_BIT);
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	01db      	lsls	r3, r3, #7
 80014a0:	b25a      	sxtb	r2, r3
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MPU6050_DeviceReset+0x68>)
 80014b0:	6818      	ldr	r0, [r3, #0]
 80014b2:	230a      	movs	r3, #10
 80014b4:	9302      	str	r3, [sp, #8]
 80014b6:	2301      	movs	r3, #1
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	f107 030f 	add.w	r3, r7, #15
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2301      	movs	r3, #1
 80014c2:	226b      	movs	r2, #107	; 0x6b
 80014c4:	21d0      	movs	r1, #208	; 0xd0
 80014c6:	f001 fc0d 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000208 	.word	0x20000208

080014d8 <MPU6050_SetSleepEnabled>:

void MPU6050_SetSleepEnabled(uint8_t Enable)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af04      	add	r7, sp, #16
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <MPU6050_SetSleepEnabled+0x6c>)
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	230a      	movs	r3, #10
 80014e8:	9302      	str	r3, [sp, #8]
 80014ea:	2301      	movs	r3, #1
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	f107 030f 	add.w	r3, r7, #15
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2301      	movs	r3, #1
 80014f6:	226b      	movs	r2, #107	; 0x6b
 80014f8:	21d0      	movs	r1, #208	; 0xd0
 80014fa:	f001 fced 	bl	8002ed8 <HAL_I2C_Mem_Read>
	tmp &= ~(1<<MPU6050_PWR1_SLEEP_BIT);
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001504:	b2db      	uxtb	r3, r3
 8001506:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Enable & 0x1) << MPU6050_PWR1_SLEEP_BIT);
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	019b      	lsls	r3, r3, #6
 800150c:	b25b      	sxtb	r3, r3
 800150e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001512:	b25a      	sxtb	r2, r3
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	b25b      	sxtb	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b25b      	sxtb	r3, r3
 800151c:	b2db      	uxtb	r3, r3
 800151e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <MPU6050_SetSleepEnabled+0x6c>)
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	230a      	movs	r3, #10
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	2301      	movs	r3, #1
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	f107 030f 	add.w	r3, r7, #15
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2301      	movs	r3, #1
 8001534:	226b      	movs	r2, #107	; 0x6b
 8001536:	21d0      	movs	r1, #208	; 0xd0
 8001538:	f001 fbd4 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000208 	.word	0x20000208

08001548 <MPU6050_SetClockSource>:
	tmp |= ((Disable & 0x1) << MPU6050_PWR1_TEMP_DIS_BIT);
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
}

void MPU6050_SetClockSource(uint8_t Source)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af04      	add	r7, sp, #16
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <MPU6050_SetClockSource+0x6c>)
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	230a      	movs	r3, #10
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	2301      	movs	r3, #1
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	f107 030f 	add.w	r3, r7, #15
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2301      	movs	r3, #1
 8001566:	226b      	movs	r2, #107	; 0x6b
 8001568:	21d0      	movs	r1, #208	; 0xd0
 800156a:	f001 fcb5 	bl	8002ed8 <HAL_I2C_Mem_Read>
	tmp &= 0xF8;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	f023 0307 	bic.w	r3, r3, #7
 8001574:	b2db      	uxtb	r3, r3
 8001576:	73fb      	strb	r3, [r7, #15]
	tmp |= (Source & 0x7);
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	b25a      	sxtb	r2, r3
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	b25b      	sxtb	r3, r3
 8001586:	4313      	orrs	r3, r2
 8001588:	b25b      	sxtb	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MPU6050_SetClockSource+0x6c>)
 8001590:	6818      	ldr	r0, [r3, #0]
 8001592:	230a      	movs	r3, #10
 8001594:	9302      	str	r3, [sp, #8]
 8001596:	2301      	movs	r3, #1
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	f107 030f 	add.w	r3, r7, #15
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2301      	movs	r3, #1
 80015a2:	226b      	movs	r2, #107	; 0x6b
 80015a4:	21d0      	movs	r1, #208	; 0xd0
 80015a6:	f001 fb9d 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000208 	.word	0x20000208

080015b8 <MPU6050_SetFullScaleGyroRange>:

//
//	Measurement scale configuration
//
void MPU6050_SetFullScaleGyroRange(uint8_t Range)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af04      	add	r7, sp, #16
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 80015c2:	4b28      	ldr	r3, [pc, #160]	; (8001664 <MPU6050_SetFullScaleGyroRange+0xac>)
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	230a      	movs	r3, #10
 80015c8:	9302      	str	r3, [sp, #8]
 80015ca:	2301      	movs	r3, #1
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	f107 030f 	add.w	r3, r7, #15
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2301      	movs	r3, #1
 80015d6:	221b      	movs	r2, #27
 80015d8:	21d0      	movs	r1, #208	; 0xd0
 80015da:	f001 fc7d 	bl	8002ed8 <HAL_I2C_Mem_Read>
	tmp &= 0xE7;
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	f023 0318 	bic.w	r3, r3, #24
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Range & 0x7) << 3);
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015f2:	b25a      	sxtb	r2, r3
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <MPU6050_SetFullScaleGyroRange+0xac>)
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	230a      	movs	r3, #10
 8001606:	9302      	str	r3, [sp, #8]
 8001608:	2301      	movs	r3, #1
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	f107 030f 	add.w	r3, r7, #15
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2301      	movs	r3, #1
 8001614:	221b      	movs	r2, #27
 8001616:	21d0      	movs	r1, #208	; 0xd0
 8001618:	f001 fb64 	bl	8002ce4 <HAL_I2C_Mem_Write>

	switch(Range)
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	2b03      	cmp	r3, #3
 8001620:	d81a      	bhi.n	8001658 <MPU6050_SetFullScaleGyroRange+0xa0>
 8001622:	a201      	add	r2, pc, #4	; (adr r2, 8001628 <MPU6050_SetFullScaleGyroRange+0x70>)
 8001624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001628:	08001639 	.word	0x08001639
 800162c:	08001641 	.word	0x08001641
 8001630:	08001649 	.word	0x08001649
 8001634:	08001651 	.word	0x08001651
	{
		case MPU6050_GYRO_FS_250:
			Gyr_Scale = 0.007633;
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MPU6050_SetFullScaleGyroRange+0xb0>)
 800163a:	4a0c      	ldr	r2, [pc, #48]	; (800166c <MPU6050_SetFullScaleGyroRange+0xb4>)
 800163c:	601a      	str	r2, [r3, #0]
			break;
 800163e:	e00c      	b.n	800165a <MPU6050_SetFullScaleGyroRange+0xa2>
		case MPU6050_GYRO_FS_500:
			Gyr_Scale = 0.015267;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MPU6050_SetFullScaleGyroRange+0xb0>)
 8001642:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <MPU6050_SetFullScaleGyroRange+0xb8>)
 8001644:	601a      	str	r2, [r3, #0]
			break;
 8001646:	e008      	b.n	800165a <MPU6050_SetFullScaleGyroRange+0xa2>
		case MPU6050_GYRO_FS_1000:
			Gyr_Scale = 0.030487;
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <MPU6050_SetFullScaleGyroRange+0xb0>)
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <MPU6050_SetFullScaleGyroRange+0xbc>)
 800164c:	601a      	str	r2, [r3, #0]
			break;
 800164e:	e004      	b.n	800165a <MPU6050_SetFullScaleGyroRange+0xa2>
		case MPU6050_GYRO_FS_2000:
			Gyr_Scale = 0.060975;
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <MPU6050_SetFullScaleGyroRange+0xb0>)
 8001652:	4a09      	ldr	r2, [pc, #36]	; (8001678 <MPU6050_SetFullScaleGyroRange+0xc0>)
 8001654:	601a      	str	r2, [r3, #0]
			break;
 8001656:	e000      	b.n	800165a <MPU6050_SetFullScaleGyroRange+0xa2>
		default:
			break;
 8001658:	bf00      	nop
	}
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000208 	.word	0x20000208
 8001668:	20000210 	.word	0x20000210
 800166c:	3bfa1e3f 	.word	0x3bfa1e3f
 8001670:	3c7a2270 	.word	0x3c7a2270
 8001674:	3cf9bfdf 	.word	0x3cf9bfdf
 8001678:	3d79c0ec 	.word	0x3d79c0ec

0800167c <MPU6050_SetFullScaleAccelRange>:

void MPU6050_SetFullScaleAccelRange(uint8_t Range)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af04      	add	r7, sp, #16
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8001686:	4b28      	ldr	r3, [pc, #160]	; (8001728 <MPU6050_SetFullScaleAccelRange+0xac>)
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	230a      	movs	r3, #10
 800168c:	9302      	str	r3, [sp, #8]
 800168e:	2301      	movs	r3, #1
 8001690:	9301      	str	r3, [sp, #4]
 8001692:	f107 030f 	add.w	r3, r7, #15
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2301      	movs	r3, #1
 800169a:	221c      	movs	r2, #28
 800169c:	21d0      	movs	r1, #208	; 0xd0
 800169e:	f001 fc1b 	bl	8002ed8 <HAL_I2C_Mem_Read>
	tmp &= 0xE7;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	f023 0318 	bic.w	r3, r3, #24
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Range & 0x7) << 3);
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016b6:	b25a      	sxtb	r2, r3
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 80016c4:	4b18      	ldr	r3, [pc, #96]	; (8001728 <MPU6050_SetFullScaleAccelRange+0xac>)
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	230a      	movs	r3, #10
 80016ca:	9302      	str	r3, [sp, #8]
 80016cc:	2301      	movs	r3, #1
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	f107 030f 	add.w	r3, r7, #15
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	221c      	movs	r2, #28
 80016da:	21d0      	movs	r1, #208	; 0xd0
 80016dc:	f001 fb02 	bl	8002ce4 <HAL_I2C_Mem_Write>

	switch(Range)
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d81a      	bhi.n	800171c <MPU6050_SetFullScaleAccelRange+0xa0>
 80016e6:	a201      	add	r2, pc, #4	; (adr r2, 80016ec <MPU6050_SetFullScaleAccelRange+0x70>)
 80016e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ec:	080016fd 	.word	0x080016fd
 80016f0:	08001705 	.word	0x08001705
 80016f4:	0800170d 	.word	0x0800170d
 80016f8:	08001715 	.word	0x08001715
	{
		case MPU6050_ACCEL_FS_2:
			Acc_Scale = 0.000061;
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MPU6050_SetFullScaleAccelRange+0xb0>)
 80016fe:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <MPU6050_SetFullScaleAccelRange+0xb4>)
 8001700:	601a      	str	r2, [r3, #0]
			break;
 8001702:	e00c      	b.n	800171e <MPU6050_SetFullScaleAccelRange+0xa2>
		case MPU6050_ACCEL_FS_4:
			Acc_Scale = 0.000122;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <MPU6050_SetFullScaleAccelRange+0xb0>)
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <MPU6050_SetFullScaleAccelRange+0xb8>)
 8001708:	601a      	str	r2, [r3, #0]
			break;
 800170a:	e008      	b.n	800171e <MPU6050_SetFullScaleAccelRange+0xa2>
		case MPU6050_ACCEL_FS_8:
			Acc_Scale = 0.000244;
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <MPU6050_SetFullScaleAccelRange+0xb0>)
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <MPU6050_SetFullScaleAccelRange+0xbc>)
 8001710:	601a      	str	r2, [r3, #0]
			break;
 8001712:	e004      	b.n	800171e <MPU6050_SetFullScaleAccelRange+0xa2>
		case MPU6050_ACCEL_FS_16:
			Acc_Scale = 0.0004882;
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <MPU6050_SetFullScaleAccelRange+0xb0>)
 8001716:	4a09      	ldr	r2, [pc, #36]	; (800173c <MPU6050_SetFullScaleAccelRange+0xc0>)
 8001718:	601a      	str	r2, [r3, #0]
			break;
 800171a:	e000      	b.n	800171e <MPU6050_SetFullScaleAccelRange+0xa2>
		default:
			break;
 800171c:	bf00      	nop
	}
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000208 	.word	0x20000208
 800172c:	2000020c 	.word	0x2000020c
 8001730:	387fda40 	.word	0x387fda40
 8001734:	38ffda40 	.word	0x38ffda40
 8001738:	397fda40 	.word	0x397fda40
 800173c:	39fff518 	.word	0x39fff518

08001740 <MPU6050_GetAccelerometerRAW>:
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, tmp, 2, I2C_TIMEOUT);
	return (((int16_t)tmp[0]) << 8) | tmp[1];
}

void MPU6050_GetAccelerometerRAW(int16_t *x, int16_t *y, int16_t *z)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af04      	add	r7, sp, #16
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
	uint8_t tmp[6];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, tmp, 6, I2C_TIMEOUT);
 800174c:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <MPU6050_GetAccelerometerRAW+0x68>)
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	230a      	movs	r3, #10
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	2306      	movs	r3, #6
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	2301      	movs	r3, #1
 8001760:	223b      	movs	r2, #59	; 0x3b
 8001762:	21d0      	movs	r1, #208	; 0xd0
 8001764:	f001 fbb8 	bl	8002ed8 <HAL_I2C_Mem_Read>

	*x = (((int16_t)tmp[0]) << 8) | tmp[1];
 8001768:	7c3b      	ldrb	r3, [r7, #16]
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	b21a      	sxth	r2, r3
 800176e:	7c7b      	ldrb	r3, [r7, #17]
 8001770:	b21b      	sxth	r3, r3
 8001772:	4313      	orrs	r3, r2
 8001774:	b21a      	sxth	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)tmp[2]) << 8) | tmp[3];
 800177a:	7cbb      	ldrb	r3, [r7, #18]
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b21a      	sxth	r2, r3
 8001780:	7cfb      	ldrb	r3, [r7, #19]
 8001782:	b21b      	sxth	r3, r3
 8001784:	4313      	orrs	r3, r2
 8001786:	b21a      	sxth	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)tmp[4]) << 8) | tmp[5];
 800178c:	7d3b      	ldrb	r3, [r7, #20]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	b21a      	sxth	r2, r3
 8001792:	7d7b      	ldrb	r3, [r7, #21]
 8001794:	b21b      	sxth	r3, r3
 8001796:	4313      	orrs	r3, r2
 8001798:	b21a      	sxth	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	801a      	strh	r2, [r3, #0]
}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000208 	.word	0x20000208

080017ac <MPU6050_GetAccelerometerScaled>:

void MPU6050_GetAccelerometerScaled(float* x, float* y, float* z)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
	int16_t tmp_x, tmp_y, tmp_z;
	MPU6050_GetAccelerometerRAW(&tmp_x, &tmp_y, &tmp_z);
 80017b8:	f107 0212 	add.w	r2, r7, #18
 80017bc:	f107 0114 	add.w	r1, r7, #20
 80017c0:	f107 0316 	add.w	r3, r7, #22
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ffbb 	bl	8001740 <MPU6050_GetAccelerometerRAW>

	*x = (float)tmp_x * Acc_Scale;
 80017ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MPU6050_GetAccelerometerScaled+0x7c>)
 80017d8:	edd3 7a00 	vldr	s15, [r3]
 80017dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)tmp_y * Acc_Scale;
 80017e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017ea:	ee07 3a90 	vmov	s15, r3
 80017ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <MPU6050_GetAccelerometerScaled+0x7c>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)tmp_z * Acc_Scale;
 8001802:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001806:	ee07 3a90 	vmov	s15, r3
 800180a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MPU6050_GetAccelerometerScaled+0x7c>)
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	edc3 7a00 	vstr	s15, [r3]
}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000020c 	.word	0x2000020c

0800182c <MPU6050_GetGyroscopeRAW>:
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, tmp, 2, I2C_TIMEOUT);
	return (((int16_t)tmp[0]) << 8) | tmp[1];
}

void MPU6050_GetGyroscopeRAW(int16_t *x, int16_t *y, int16_t *z)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af04      	add	r7, sp, #16
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
	uint8_t tmp[6];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, tmp, 6, I2C_TIMEOUT);
 8001838:	4b16      	ldr	r3, [pc, #88]	; (8001894 <MPU6050_GetGyroscopeRAW+0x68>)
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	230a      	movs	r3, #10
 800183e:	9302      	str	r3, [sp, #8]
 8001840:	2306      	movs	r3, #6
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2301      	movs	r3, #1
 800184c:	2243      	movs	r2, #67	; 0x43
 800184e:	21d0      	movs	r1, #208	; 0xd0
 8001850:	f001 fb42 	bl	8002ed8 <HAL_I2C_Mem_Read>

	*x = (((int16_t)tmp[0]) << 8) | tmp[1];
 8001854:	7c3b      	ldrb	r3, [r7, #16]
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	b21a      	sxth	r2, r3
 800185a:	7c7b      	ldrb	r3, [r7, #17]
 800185c:	b21b      	sxth	r3, r3
 800185e:	4313      	orrs	r3, r2
 8001860:	b21a      	sxth	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)tmp[2]) << 8) | tmp[3];
 8001866:	7cbb      	ldrb	r3, [r7, #18]
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	b21a      	sxth	r2, r3
 800186c:	7cfb      	ldrb	r3, [r7, #19]
 800186e:	b21b      	sxth	r3, r3
 8001870:	4313      	orrs	r3, r2
 8001872:	b21a      	sxth	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)tmp[4]) << 8) | tmp[5];
 8001878:	7d3b      	ldrb	r3, [r7, #20]
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	b21a      	sxth	r2, r3
 800187e:	7d7b      	ldrb	r3, [r7, #21]
 8001880:	b21b      	sxth	r3, r3
 8001882:	4313      	orrs	r3, r2
 8001884:	b21a      	sxth	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	801a      	strh	r2, [r3, #0]
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000208 	.word	0x20000208

08001898 <MPU6050_GetGyroscopeScaled>:

void MPU6050_GetGyroscopeScaled(float* x, float* y, float* z)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
	int16_t tmp_x, tmp_y, tmp_z;

	MPU6050_GetGyroscopeRAW(&tmp_x, &tmp_y, &tmp_z);
 80018a4:	f107 0212 	add.w	r2, r7, #18
 80018a8:	f107 0114 	add.w	r1, r7, #20
 80018ac:	f107 0316 	add.w	r3, r7, #22
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ffbb 	bl	800182c <MPU6050_GetGyroscopeRAW>

	*x = (float)tmp_x * Gyr_Scale;
 80018b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018ba:	ee07 3a90 	vmov	s15, r3
 80018be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <MPU6050_GetGyroscopeScaled+0x7c>)
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)tmp_y * Gyr_Scale;
 80018d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018d6:	ee07 3a90 	vmov	s15, r3
 80018da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <MPU6050_GetGyroscopeScaled+0x7c>)
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)tmp_z * Gyr_Scale;
 80018ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <MPU6050_GetGyroscopeScaled+0x7c>)
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	edc3 7a00 	vstr	s15, [r3]
}
 800190a:	bf00      	nop
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000210 	.word	0x20000210

08001918 <MPU6050_GetRollPitch>:

void MPU6050_GetRollPitch(float* Roll, float* Pitch)
{
 8001918:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
	float acc_x, acc_y, acc_z;
	MPU6050_GetAccelerometerScaled(&acc_x, &acc_y, &acc_z);
 8001924:	f107 020c 	add.w	r2, r7, #12
 8001928:	f107 0110 	add.w	r1, r7, #16
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff3b 	bl	80017ac <MPU6050_GetAccelerometerScaled>

	*Roll = atan2(acc_y, acc_z) * 180.0 / M_PI;
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fe0d 	bl	8000558 <__aeabi_f2d>
 800193e:	4680      	mov	r8, r0
 8001940:	4689      	mov	r9, r1
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fe07 	bl	8000558 <__aeabi_f2d>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	ec43 2b11 	vmov	d1, r2, r3
 8001952:	ec49 8b10 	vmov	d0, r8, r9
 8001956:	f005 ff11 	bl	800777c <atan2>
 800195a:	ec51 0b10 	vmov	r0, r1, d0
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	4b33      	ldr	r3, [pc, #204]	; (8001a30 <MPU6050_GetRollPitch+0x118>)
 8001964:	f7fe fe50 	bl	8000608 <__aeabi_dmul>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	a32d      	add	r3, pc, #180	; (adr r3, 8001a28 <MPU6050_GetRollPitch+0x110>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	f7fe ff71 	bl	800085c <__aeabi_ddiv>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	f7ff f8f1 	bl	8000b68 <__aeabi_d2f>
 8001986:	4602      	mov	r2, r0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	601a      	str	r2, [r3, #0]
	*Pitch = -(atan2(acc_x, sqrt(acc_y*acc_y + acc_z*acc_z))*180.0)/M_PI;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fde2 	bl	8000558 <__aeabi_f2d>
 8001994:	4680      	mov	r8, r0
 8001996:	4689      	mov	r9, r1
 8001998:	ed97 7a04 	vldr	s14, [r7, #16]
 800199c:	edd7 7a04 	vldr	s15, [r7, #16]
 80019a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a4:	edd7 6a03 	vldr	s13, [r7, #12]
 80019a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80019ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b4:	ee17 0a90 	vmov	r0, s15
 80019b8:	f7fe fdce 	bl	8000558 <__aeabi_f2d>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	ec43 2b10 	vmov	d0, r2, r3
 80019c4:	f005 fedc 	bl	8007780 <sqrt>
 80019c8:	eeb0 7a40 	vmov.f32	s14, s0
 80019cc:	eef0 7a60 	vmov.f32	s15, s1
 80019d0:	eeb0 1a47 	vmov.f32	s2, s14
 80019d4:	eef0 1a67 	vmov.f32	s3, s15
 80019d8:	ec49 8b10 	vmov	d0, r8, r9
 80019dc:	f005 fece 	bl	800777c <atan2>
 80019e0:	ec51 0b10 	vmov	r0, r1, d0
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MPU6050_GetRollPitch+0x118>)
 80019ea:	f7fe fe0d 	bl	8000608 <__aeabi_dmul>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4614      	mov	r4, r2
 80019f4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80019f8:	a30b      	add	r3, pc, #44	; (adr r3, 8001a28 <MPU6050_GetRollPitch+0x110>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	4620      	mov	r0, r4
 8001a00:	4629      	mov	r1, r5
 8001a02:	f7fe ff2b 	bl	800085c <__aeabi_ddiv>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f7ff f8ab 	bl	8000b68 <__aeabi_d2f>
 8001a12:	4602      	mov	r2, r0
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	601a      	str	r2, [r3, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a22:	bf00      	nop
 8001a24:	f3af 8000 	nop.w
 8001a28:	54442d18 	.word	0x54442d18
 8001a2c:	400921fb 	.word	0x400921fb
 8001a30:	40668000 	.word	0x40668000

08001a34 <MPU6050_SetInterruptMode>:

//
//	Setting INT pin
//
void MPU6050_SetInterruptMode(uint8_t Mode)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af04      	add	r7, sp, #16
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8001a3e:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <MPU6050_SetInterruptMode+0x68>)
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	230a      	movs	r3, #10
 8001a44:	9302      	str	r3, [sp, #8]
 8001a46:	2301      	movs	r3, #1
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	f107 030f 	add.w	r3, r7, #15
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2301      	movs	r3, #1
 8001a52:	2237      	movs	r2, #55	; 0x37
 8001a54:	21d0      	movs	r1, #208	; 0xd0
 8001a56:	f001 fa3f 	bl	8002ed8 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_INT_LEVEL_BIT);
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Mode & 0x1) << MPU6050_INTCFG_INT_LEVEL_BIT);
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	01db      	lsls	r3, r3, #7
 8001a68:	b25a      	sxtb	r2, r3
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	b25b      	sxtb	r3, r3
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <MPU6050_SetInterruptMode+0x68>)
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	230a      	movs	r3, #10
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	f107 030f 	add.w	r3, r7, #15
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2301      	movs	r3, #1
 8001a8a:	2237      	movs	r2, #55	; 0x37
 8001a8c:	21d0      	movs	r1, #208	; 0xd0
 8001a8e:	f001 f929 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000208 	.word	0x20000208

08001aa0 <MPU6050_SetInterruptDrive>:

void MPU6050_SetInterruptDrive(uint8_t Drive)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af04      	add	r7, sp, #16
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <MPU6050_SetInterruptDrive+0x6c>)
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	230a      	movs	r3, #10
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	f107 030f 	add.w	r3, r7, #15
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	2301      	movs	r3, #1
 8001abe:	2237      	movs	r2, #55	; 0x37
 8001ac0:	21d0      	movs	r1, #208	; 0xd0
 8001ac2:	f001 fa09 	bl	8002ed8 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_INT_OPEN_BIT);
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Drive & 0x1) << MPU6050_INTCFG_INT_OPEN_BIT);
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	019b      	lsls	r3, r3, #6
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ada:	b25a      	sxtb	r2, r3
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	b25b      	sxtb	r3, r3
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <MPU6050_SetInterruptDrive+0x6c>)
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	230a      	movs	r3, #10
 8001aee:	9302      	str	r3, [sp, #8]
 8001af0:	2301      	movs	r3, #1
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	f107 030f 	add.w	r3, r7, #15
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2301      	movs	r3, #1
 8001afc:	2237      	movs	r2, #55	; 0x37
 8001afe:	21d0      	movs	r1, #208	; 0xd0
 8001b00:	f001 f8f0 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 8001b04:	bf00      	nop
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000208 	.word	0x20000208

08001b10 <MPU6050_SetInterruptLatch>:

void MPU6050_SetInterruptLatch(uint8_t Latch)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af04      	add	r7, sp, #16
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <MPU6050_SetInterruptLatch+0x6c>)
 8001b1c:	6818      	ldr	r0, [r3, #0]
 8001b1e:	230a      	movs	r3, #10
 8001b20:	9302      	str	r3, [sp, #8]
 8001b22:	2301      	movs	r3, #1
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	f107 030f 	add.w	r3, r7, #15
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	2237      	movs	r2, #55	; 0x37
 8001b30:	21d0      	movs	r1, #208	; 0xd0
 8001b32:	f001 f9d1 	bl	8002ed8 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_INT_RD_CLEAR_BIT);
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	f023 0310 	bic.w	r3, r3, #16
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Latch & 0x1) << MPU6050_INTCFG_INT_RD_CLEAR_BIT);
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	b25a      	sxtb	r2, r3
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	b25b      	sxtb	r3, r3
 8001b50:	4313      	orrs	r3, r2
 8001b52:	b25b      	sxtb	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <MPU6050_SetInterruptLatch+0x6c>)
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	230a      	movs	r3, #10
 8001b5e:	9302      	str	r3, [sp, #8]
 8001b60:	2301      	movs	r3, #1
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	f107 030f 	add.w	r3, r7, #15
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	2237      	movs	r2, #55	; 0x37
 8001b6e:	21d0      	movs	r1, #208	; 0xd0
 8001b70:	f001 f8b8 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000208 	.word	0x20000208

08001b80 <MPU6050_SetInterruptLatchClear>:

void MPU6050_SetInterruptLatchClear(uint8_t Clear)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af04      	add	r7, sp, #16
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <MPU6050_SetInterruptLatchClear+0x6c>)
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	230a      	movs	r3, #10
 8001b90:	9302      	str	r3, [sp, #8]
 8001b92:	2301      	movs	r3, #1
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	f107 030f 	add.w	r3, r7, #15
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	2237      	movs	r2, #55	; 0x37
 8001ba0:	21d0      	movs	r1, #208	; 0xd0
 8001ba2:	f001 f999 	bl	8002ed8 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_LATCH_INT_EN_BIT);
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	f023 0320 	bic.w	r3, r3, #32
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Clear & 0x1) << MPU6050_INTCFG_LATCH_INT_EN_BIT);
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	015b      	lsls	r3, r3, #5
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	f003 0320 	and.w	r3, r3, #32
 8001bba:	b25a      	sxtb	r2, r3
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	b25b      	sxtb	r3, r3
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	b25b      	sxtb	r3, r3
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <MPU6050_SetInterruptLatchClear+0x6c>)
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	230a      	movs	r3, #10
 8001bce:	9302      	str	r3, [sp, #8]
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	9301      	str	r3, [sp, #4]
 8001bd4:	f107 030f 	add.w	r3, r7, #15
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2301      	movs	r3, #1
 8001bdc:	2237      	movs	r2, #55	; 0x37
 8001bde:	21d0      	movs	r1, #208	; 0xd0
 8001be0:	f001 f880 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000208 	.word	0x20000208

08001bf0 <MPU6050_SetIntEnableRegister>:

void MPU6050_SetIntEnableRegister(uint8_t Value)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af04      	add	r7, sp, #16
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &Value, 1, I2C_TIMEOUT);
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <MPU6050_SetIntEnableRegister+0x2c>)
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	230a      	movs	r3, #10
 8001c00:	9302      	str	r3, [sp, #8]
 8001c02:	2301      	movs	r3, #1
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	1dfb      	adds	r3, r7, #7
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	2238      	movs	r2, #56	; 0x38
 8001c0e:	21d0      	movs	r1, #208	; 0xd0
 8001c10:	f001 f868 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000208 	.word	0x20000208

08001c20 <MPU6050_SetDHPFMode>:

//
//	Motion functions - not included in documentation/register map
//
void MPU6050_SetDHPFMode(uint8_t Dhpf)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af04      	add	r7, sp, #16
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8001c2a:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <MPU6050_SetDHPFMode+0x6c>)
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	230a      	movs	r3, #10
 8001c30:	9302      	str	r3, [sp, #8]
 8001c32:	2301      	movs	r3, #1
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	f107 030f 	add.w	r3, r7, #15
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	221c      	movs	r2, #28
 8001c40:	21d0      	movs	r1, #208	; 0xd0
 8001c42:	f001 f949 	bl	8002ed8 <HAL_I2C_Mem_Read>
	tmp &= ~(0x07);
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	f023 0307 	bic.w	r3, r3, #7
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	73fb      	strb	r3, [r7, #15]
	tmp |= Dhpf & 0x7;
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	b25a      	sxtb	r2, r3
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	b25b      	sxtb	r3, r3
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	b25b      	sxtb	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MPU6050_SetDHPFMode+0x6c>)
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	230a      	movs	r3, #10
 8001c6c:	9302      	str	r3, [sp, #8]
 8001c6e:	2301      	movs	r3, #1
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	f107 030f 	add.w	r3, r7, #15
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	221c      	movs	r2, #28
 8001c7c:	21d0      	movs	r1, #208	; 0xd0
 8001c7e:	f001 f831 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000208 	.word	0x20000208

08001c90 <MPU6050_SetIntZeroMotionEnabled>:
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_MOT_DETECT_STATUS, 1, &tmp, 1, I2C_TIMEOUT);
	return tmp;
}

void MPU6050_SetIntZeroMotionEnabled(uint8_t Enable)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af04      	add	r7, sp, #16
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &tmp, 1, I2C_TIMEOUT);
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <MPU6050_SetIntZeroMotionEnabled+0x6c>)
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	230a      	movs	r3, #10
 8001ca0:	9302      	str	r3, [sp, #8]
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	f107 030f 	add.w	r3, r7, #15
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2301      	movs	r3, #1
 8001cae:	2238      	movs	r2, #56	; 0x38
 8001cb0:	21d0      	movs	r1, #208	; 0xd0
 8001cb2:	f001 f911 	bl	8002ed8 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTERRUPT_ZMOT_BIT);
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	f023 0320 	bic.w	r3, r3, #32
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Enable & 0x1) << MPU6050_INTERRUPT_ZMOT_BIT);
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	015b      	lsls	r3, r3, #5
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	b25a      	sxtb	r2, r3
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	b25b      	sxtb	r3, r3
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	b25b      	sxtb	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &tmp, 1, I2C_TIMEOUT);
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <MPU6050_SetIntZeroMotionEnabled+0x6c>)
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	230a      	movs	r3, #10
 8001cde:	9302      	str	r3, [sp, #8]
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	f107 030f 	add.w	r3, r7, #15
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2301      	movs	r3, #1
 8001cec:	2238      	movs	r2, #56	; 0x38
 8001cee:	21d0      	movs	r1, #208	; 0xd0
 8001cf0:	f000 fff8 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 8001cf4:	bf00      	nop
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000208 	.word	0x20000208

08001d00 <MPU6050_SetIntMotionEnabled>:

void MPU6050_SetIntMotionEnabled(uint8_t Enable)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af04      	add	r7, sp, #16
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &tmp, 1, I2C_TIMEOUT);
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <MPU6050_SetIntMotionEnabled+0x6c>)
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	230a      	movs	r3, #10
 8001d10:	9302      	str	r3, [sp, #8]
 8001d12:	2301      	movs	r3, #1
 8001d14:	9301      	str	r3, [sp, #4]
 8001d16:	f107 030f 	add.w	r3, r7, #15
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	2238      	movs	r2, #56	; 0x38
 8001d20:	21d0      	movs	r1, #208	; 0xd0
 8001d22:	f001 f8d9 	bl	8002ed8 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTERRUPT_MOT_BIT);
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Enable & 0x1) << MPU6050_INTERRUPT_MOT_BIT);
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	019b      	lsls	r3, r3, #6
 8001d34:	b25b      	sxtb	r3, r3
 8001d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3a:	b25a      	sxtb	r2, r3
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	b25b      	sxtb	r3, r3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &tmp, 1, I2C_TIMEOUT);
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <MPU6050_SetIntMotionEnabled+0x6c>)
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	230a      	movs	r3, #10
 8001d4e:	9302      	str	r3, [sp, #8]
 8001d50:	2301      	movs	r3, #1
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	f107 030f 	add.w	r3, r7, #15
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	2238      	movs	r2, #56	; 0x38
 8001d5e:	21d0      	movs	r1, #208	; 0xd0
 8001d60:	f000 ffc0 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 8001d64:	bf00      	nop
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000208 	.word	0x20000208

08001d70 <MPU6050_SetIntFreeFallEnabled>:

void MPU6050_SetIntFreeFallEnabled(uint8_t Enable)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af04      	add	r7, sp, #16
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &tmp, 1, I2C_TIMEOUT);
 8001d7a:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <MPU6050_SetIntFreeFallEnabled+0x68>)
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	230a      	movs	r3, #10
 8001d80:	9302      	str	r3, [sp, #8]
 8001d82:	2301      	movs	r3, #1
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	f107 030f 	add.w	r3, r7, #15
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	2238      	movs	r2, #56	; 0x38
 8001d90:	21d0      	movs	r1, #208	; 0xd0
 8001d92:	f001 f8a1 	bl	8002ed8 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTERRUPT_FF_BIT);
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Enable & 0x1) << MPU6050_INTERRUPT_FF_BIT);
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	01db      	lsls	r3, r3, #7
 8001da4:	b25a      	sxtb	r2, r3
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	b25b      	sxtb	r3, r3
 8001daa:	4313      	orrs	r3, r2
 8001dac:	b25b      	sxtb	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &tmp, 1, I2C_TIMEOUT);
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MPU6050_SetIntFreeFallEnabled+0x68>)
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	230a      	movs	r3, #10
 8001db8:	9302      	str	r3, [sp, #8]
 8001dba:	2301      	movs	r3, #1
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	f107 030f 	add.w	r3, r7, #15
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	2238      	movs	r2, #56	; 0x38
 8001dc8:	21d0      	movs	r1, #208	; 0xd0
 8001dca:	f000 ff8b 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000208 	.word	0x20000208

08001ddc <MPU6050_SetMotionDetectionThreshold>:

void MPU6050_SetMotionDetectionThreshold(uint8_t Threshold)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af04      	add	r7, sp, #16
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_MOT_THR, 1, &Threshold, 1, I2C_TIMEOUT);
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <MPU6050_SetMotionDetectionThreshold+0x2c>)
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	230a      	movs	r3, #10
 8001dec:	9302      	str	r3, [sp, #8]
 8001dee:	2301      	movs	r3, #1
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	1dfb      	adds	r3, r7, #7
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2301      	movs	r3, #1
 8001df8:	221f      	movs	r2, #31
 8001dfa:	21d0      	movs	r1, #208	; 0xd0
 8001dfc:	f000 ff72 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000208 	.word	0x20000208

08001e0c <MPU6050_SetMotionDetectionDuration>:

void MPU6050_SetMotionDetectionDuration(uint8_t Duration)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af04      	add	r7, sp, #16
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_MOT_DUR, 1, &Duration, 1, I2C_TIMEOUT);
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <MPU6050_SetMotionDetectionDuration+0x2c>)
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	230a      	movs	r3, #10
 8001e1c:	9302      	str	r3, [sp, #8]
 8001e1e:	2301      	movs	r3, #1
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	1dfb      	adds	r3, r7, #7
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	2301      	movs	r3, #1
 8001e28:	2220      	movs	r2, #32
 8001e2a:	21d0      	movs	r1, #208	; 0xd0
 8001e2c:	f000 ff5a 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000208 	.word	0x20000208

08001e3c <MPU6050_SetZeroMotionDetectionThreshold>:

void MPU6050_SetZeroMotionDetectionThreshold(uint8_t Threshold)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af04      	add	r7, sp, #16
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_ZRMOT_THR, 1, &Threshold, 1, I2C_TIMEOUT);
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <MPU6050_SetZeroMotionDetectionThreshold+0x2c>)
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	230a      	movs	r3, #10
 8001e4c:	9302      	str	r3, [sp, #8]
 8001e4e:	2301      	movs	r3, #1
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	1dfb      	adds	r3, r7, #7
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2301      	movs	r3, #1
 8001e58:	2221      	movs	r2, #33	; 0x21
 8001e5a:	21d0      	movs	r1, #208	; 0xd0
 8001e5c:	f000 ff42 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000208 	.word	0x20000208

08001e6c <MPU6050_SetZeroMotionDetectionDuration>:

void MPU6050_SetZeroMotionDetectionDuration(uint8_t Duration)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af04      	add	r7, sp, #16
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_ZRMOT_DUR, 1, &Duration, 1, I2C_TIMEOUT);
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <MPU6050_SetZeroMotionDetectionDuration+0x2c>)
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	230a      	movs	r3, #10
 8001e7c:	9302      	str	r3, [sp, #8]
 8001e7e:	2301      	movs	r3, #1
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	1dfb      	adds	r3, r7, #7
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	2301      	movs	r3, #1
 8001e88:	2222      	movs	r2, #34	; 0x22
 8001e8a:	21d0      	movs	r1, #208	; 0xd0
 8001e8c:	f000 ff2a 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000208 	.word	0x20000208

08001e9c <MPU6050_SetFreeFallDetectionThreshold>:

void MPU6050_SetFreeFallDetectionThreshold(uint8_t Threshold)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af04      	add	r7, sp, #16
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_FF_THR, 1, &Threshold, 1, I2C_TIMEOUT);
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <MPU6050_SetFreeFallDetectionThreshold+0x2c>)
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	230a      	movs	r3, #10
 8001eac:	9302      	str	r3, [sp, #8]
 8001eae:	2301      	movs	r3, #1
 8001eb0:	9301      	str	r3, [sp, #4]
 8001eb2:	1dfb      	adds	r3, r7, #7
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	221d      	movs	r2, #29
 8001eba:	21d0      	movs	r1, #208	; 0xd0
 8001ebc:	f000 ff12 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000208 	.word	0x20000208

08001ecc <MPU6050_SetFreeFallDetectionDuration>:

void MPU6050_SetFreeFallDetectionDuration(uint8_t Duration)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af04      	add	r7, sp, #16
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_FF_DUR, 1, &Duration, 1, I2C_TIMEOUT);
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <MPU6050_SetFreeFallDetectionDuration+0x2c>)
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	230a      	movs	r3, #10
 8001edc:	9302      	str	r3, [sp, #8]
 8001ede:	2301      	movs	r3, #1
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	1dfb      	adds	r3, r7, #7
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	221e      	movs	r2, #30
 8001eea:	21d0      	movs	r1, #208	; 0xd0
 8001eec:	f000 fefa 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000208 	.word	0x20000208

08001efc <MPU6050_Init>:

//
//	Initialization
//
void MPU6050_Init(I2C_HandleTypeDef *hi2c)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	i2c = hi2c;
 8001f04:	4a0c      	ldr	r2, [pc, #48]	; (8001f38 <MPU6050_Init+0x3c>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6013      	str	r3, [r2, #0]
	MPU6050_DeviceReset(1);
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f7ff faae 	bl	800146c <MPU6050_DeviceReset>
    MPU6050_SetSleepEnabled(0);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7ff fae1 	bl	80014d8 <MPU6050_SetSleepEnabled>
    MPU6050_SetClockSource(MPU6050_CLOCK_INTERNAL);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7ff fb16 	bl	8001548 <MPU6050_SetClockSource>
    MPU6050_SetDlpf(MPU6050_DLPF_BW_20);
 8001f1c:	2004      	movs	r0, #4
 8001f1e:	f7ff fa6d 	bl	80013fc <MPU6050_SetDlpf>
    MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f7ff fb48 	bl	80015b8 <MPU6050_SetFullScaleGyroRange>
    MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f7ff fba7 	bl	800167c <MPU6050_SetFullScaleAccelRange>

}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000208 	.word	0x20000208

08001f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	4a0f      	ldr	r2, [pc, #60]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f50:	6453      	str	r3, [r2, #68]	; 0x44
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	603b      	str	r3, [r7, #0]
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a08      	ldr	r2, [pc, #32]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f7a:	2007      	movs	r0, #7
 8001f7c:	f000 fb5e 	bl	800263c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800

08001f8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a21      	ldr	r2, [pc, #132]	; (8002030 <HAL_I2C_MspInit+0xa4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d13c      	bne.n	8002028 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_I2C_MspInit+0xa8>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a1f      	ldr	r2, [pc, #124]	; (8002034 <HAL_I2C_MspInit+0xa8>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_I2C_MspInit+0xa8>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd0:	2312      	movs	r3, #18
 8001fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fdc:	2304      	movs	r3, #4
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4814      	ldr	r0, [pc, #80]	; (8002038 <HAL_I2C_MspInit+0xac>)
 8001fe8:	f000 fb9a 	bl	8002720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	4b10      	ldr	r3, [pc, #64]	; (8002034 <HAL_I2C_MspInit+0xa8>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <HAL_I2C_MspInit+0xa8>)
 8001ff6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffc:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <HAL_I2C_MspInit+0xa8>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002008:	2200      	movs	r2, #0
 800200a:	2100      	movs	r1, #0
 800200c:	201f      	movs	r0, #31
 800200e:	f000 fb20 	bl	8002652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002012:	201f      	movs	r0, #31
 8002014:	f000 fb39 	bl	800268a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	2100      	movs	r1, #0
 800201c:	2020      	movs	r0, #32
 800201e:	f000 fb18 	bl	8002652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002022:	2020      	movs	r0, #32
 8002024:	f000 fb31 	bl	800268a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002028:	bf00      	nop
 800202a:	3728      	adds	r7, #40	; 0x28
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40005400 	.word	0x40005400
 8002034:	40023800 	.word	0x40023800
 8002038:	40020400 	.word	0x40020400

0800203c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	; 0x30
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a32      	ldr	r2, [pc, #200]	; (8002124 <HAL_UART_MspInit+0xe8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d12d      	bne.n	80020ba <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	4b31      	ldr	r3, [pc, #196]	; (8002128 <HAL_UART_MspInit+0xec>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	4a30      	ldr	r2, [pc, #192]	; (8002128 <HAL_UART_MspInit+0xec>)
 8002068:	f043 0310 	orr.w	r3, r3, #16
 800206c:	6453      	str	r3, [r2, #68]	; 0x44
 800206e:	4b2e      	ldr	r3, [pc, #184]	; (8002128 <HAL_UART_MspInit+0xec>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <HAL_UART_MspInit+0xec>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a29      	ldr	r2, [pc, #164]	; (8002128 <HAL_UART_MspInit+0xec>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b27      	ldr	r3, [pc, #156]	; (8002128 <HAL_UART_MspInit+0xec>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002096:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800209a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020a8:	2307      	movs	r3, #7
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	4619      	mov	r1, r3
 80020b2:	481e      	ldr	r0, [pc, #120]	; (800212c <HAL_UART_MspInit+0xf0>)
 80020b4:	f000 fb34 	bl	8002720 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020b8:	e030      	b.n	800211c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1c      	ldr	r2, [pc, #112]	; (8002130 <HAL_UART_MspInit+0xf4>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d12b      	bne.n	800211c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	4b17      	ldr	r3, [pc, #92]	; (8002128 <HAL_UART_MspInit+0xec>)
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	4a16      	ldr	r2, [pc, #88]	; (8002128 <HAL_UART_MspInit+0xec>)
 80020ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d2:	6413      	str	r3, [r2, #64]	; 0x40
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <HAL_UART_MspInit+0xec>)
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	4b10      	ldr	r3, [pc, #64]	; (8002128 <HAL_UART_MspInit+0xec>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	4a0f      	ldr	r2, [pc, #60]	; (8002128 <HAL_UART_MspInit+0xec>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6313      	str	r3, [r2, #48]	; 0x30
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <HAL_UART_MspInit+0xec>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020fc:	230c      	movs	r3, #12
 80020fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002108:	2303      	movs	r3, #3
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800210c:	2307      	movs	r3, #7
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002110:	f107 031c 	add.w	r3, r7, #28
 8002114:	4619      	mov	r1, r3
 8002116:	4805      	ldr	r0, [pc, #20]	; (800212c <HAL_UART_MspInit+0xf0>)
 8002118:	f000 fb02 	bl	8002720 <HAL_GPIO_Init>
}
 800211c:	bf00      	nop
 800211e:	3730      	adds	r7, #48	; 0x30
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40011000 	.word	0x40011000
 8002128:	40023800 	.word	0x40023800
 800212c:	40020000 	.word	0x40020000
 8002130:	40004400 	.word	0x40004400

08002134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <NMI_Handler+0x4>

0800213a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800213e:	e7fe      	b.n	800213e <HardFault_Handler+0x4>

08002140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <MemManage_Handler+0x4>

08002146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214a:	e7fe      	b.n	800214a <BusFault_Handler+0x4>

0800214c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002150:	e7fe      	b.n	8002150 <UsageFault_Handler+0x4>

08002152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002180:	f000 f948 	bl	8002414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}

08002188 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <I2C1_EV_IRQHandler+0x10>)
 800218e:	f001 f8c9 	bl	8003324 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000012c 	.word	0x2000012c

0800219c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <I2C1_ER_IRQHandler+0x10>)
 80021a2:	f001 fa30 	bl	8003606 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	2000012c 	.word	0x2000012c

080021b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	e00a      	b.n	80021d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021c2:	f3af 8000 	nop.w
 80021c6:	4601      	mov	r1, r0
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	60ba      	str	r2, [r7, #8]
 80021ce:	b2ca      	uxtb	r2, r1
 80021d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	3301      	adds	r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	dbf0      	blt.n	80021c2 <_read+0x12>
	}

return len;
 80021e0:	687b      	ldr	r3, [r7, #4]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b086      	sub	sp, #24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	e009      	b.n	8002210 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	60ba      	str	r2, [r7, #8]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	3301      	adds	r3, #1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	dbf1      	blt.n	80021fc <_write+0x12>
	}
	return len;
 8002218:	687b      	ldr	r3, [r7, #4]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <_close>:

int _close(int file)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
	return -1;
 800222a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800224a:	605a      	str	r2, [r3, #4]
	return 0;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <_isatty>:

int _isatty(int file)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
	return 1;
 8002262:	2301      	movs	r3, #1
}
 8002264:	4618      	mov	r0, r3
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
	return 0;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002294:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <_sbrk+0x5c>)
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <_sbrk+0x60>)
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a0:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <_sbrk+0x64>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <_sbrk+0x64>)
 80022aa:	4a12      	ldr	r2, [pc, #72]	; (80022f4 <_sbrk+0x68>)
 80022ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ae:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <_sbrk+0x64>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d207      	bcs.n	80022cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022bc:	f004 f8c2 	bl	8006444 <__errno>
 80022c0:	4603      	mov	r3, r0
 80022c2:	220c      	movs	r2, #12
 80022c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ca:	e009      	b.n	80022e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <_sbrk+0x64>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <_sbrk+0x64>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <_sbrk+0x64>)
 80022dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022de:	68fb      	ldr	r3, [r7, #12]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20018000 	.word	0x20018000
 80022ec:	00000400 	.word	0x00000400
 80022f0:	20000214 	.word	0x20000214
 80022f4:	20000230 	.word	0x20000230

080022f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <SystemInit+0x20>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <SystemInit+0x20>)
 8002304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800231c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002354 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002320:	480d      	ldr	r0, [pc, #52]	; (8002358 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002322:	490e      	ldr	r1, [pc, #56]	; (800235c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002324:	4a0e      	ldr	r2, [pc, #56]	; (8002360 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002328:	e002      	b.n	8002330 <LoopCopyDataInit>

0800232a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800232a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800232c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232e:	3304      	adds	r3, #4

08002330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002334:	d3f9      	bcc.n	800232a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002336:	4a0b      	ldr	r2, [pc, #44]	; (8002364 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002338:	4c0b      	ldr	r4, [pc, #44]	; (8002368 <LoopFillZerobss+0x26>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800233c:	e001      	b.n	8002342 <LoopFillZerobss>

0800233e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002340:	3204      	adds	r2, #4

08002342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002344:	d3fb      	bcc.n	800233e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002346:	f7ff ffd7 	bl	80022f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800234a:	f004 f881 	bl	8006450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800234e:	f7fe fdf3 	bl	8000f38 <main>
  bx  lr    
 8002352:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002354:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800235c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002360:	080080a0 	.word	0x080080a0
  ldr r2, =_sbss
 8002364:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002368:	2000022c 	.word	0x2000022c

0800236c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800236c:	e7fe      	b.n	800236c <ADC_IRQHandler>
	...

08002370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002374:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <HAL_Init+0x40>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0d      	ldr	r2, [pc, #52]	; (80023b0 <HAL_Init+0x40>)
 800237a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800237e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_Init+0x40>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <HAL_Init+0x40>)
 8002386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800238a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <HAL_Init+0x40>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a07      	ldr	r2, [pc, #28]	; (80023b0 <HAL_Init+0x40>)
 8002392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002396:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002398:	2003      	movs	r0, #3
 800239a:	f000 f94f 	bl	800263c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800239e:	2000      	movs	r0, #0
 80023a0:	f000 f808 	bl	80023b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023a4:	f7ff fdca 	bl	8001f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023c00 	.word	0x40023c00

080023b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023bc:	4b12      	ldr	r3, [pc, #72]	; (8002408 <HAL_InitTick+0x54>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_InitTick+0x58>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4619      	mov	r1, r3
 80023c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f967 	bl	80026a6 <HAL_SYSTICK_Config>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e00e      	b.n	8002400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b0f      	cmp	r3, #15
 80023e6:	d80a      	bhi.n	80023fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e8:	2200      	movs	r2, #0
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	f04f 30ff 	mov.w	r0, #4294967295
 80023f0:	f000 f92f 	bl	8002652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023f4:	4a06      	ldr	r2, [pc, #24]	; (8002410 <HAL_InitTick+0x5c>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	e000      	b.n	8002400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000000 	.word	0x20000000
 800240c:	20000008 	.word	0x20000008
 8002410:	20000004 	.word	0x20000004

08002414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_IncTick+0x20>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_IncTick+0x24>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4413      	add	r3, r2
 8002424:	4a04      	ldr	r2, [pc, #16]	; (8002438 <HAL_IncTick+0x24>)
 8002426:	6013      	str	r3, [r2, #0]
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000008 	.word	0x20000008
 8002438:	20000218 	.word	0x20000218

0800243c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return uwTick;
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <HAL_GetTick+0x14>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000218 	.word	0x20000218

08002454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800245c:	f7ff ffee 	bl	800243c <HAL_GetTick>
 8002460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246c:	d005      	beq.n	800247a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_Delay+0x44>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4413      	add	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800247a:	bf00      	nop
 800247c:	f7ff ffde 	bl	800243c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	429a      	cmp	r2, r3
 800248a:	d8f7      	bhi.n	800247c <HAL_Delay+0x28>
  {
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000008 	.word	0x20000008

0800249c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b8:	4013      	ands	r3, r2
 80024ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ce:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	60d3      	str	r3, [r2, #12]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e8:	4b04      	ldr	r3, [pc, #16]	; (80024fc <__NVIC_GetPriorityGrouping+0x18>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	f003 0307 	and.w	r3, r3, #7
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	2b00      	cmp	r3, #0
 8002510:	db0b      	blt.n	800252a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	f003 021f 	and.w	r2, r3, #31
 8002518:	4907      	ldr	r1, [pc, #28]	; (8002538 <__NVIC_EnableIRQ+0x38>)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	2001      	movs	r0, #1
 8002522:	fa00 f202 	lsl.w	r2, r0, r2
 8002526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000e100 	.word	0xe000e100

0800253c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	6039      	str	r1, [r7, #0]
 8002546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254c:	2b00      	cmp	r3, #0
 800254e:	db0a      	blt.n	8002566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	490c      	ldr	r1, [pc, #48]	; (8002588 <__NVIC_SetPriority+0x4c>)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	0112      	lsls	r2, r2, #4
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	440b      	add	r3, r1
 8002560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002564:	e00a      	b.n	800257c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4908      	ldr	r1, [pc, #32]	; (800258c <__NVIC_SetPriority+0x50>)
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	3b04      	subs	r3, #4
 8002574:	0112      	lsls	r2, r2, #4
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	440b      	add	r3, r1
 800257a:	761a      	strb	r2, [r3, #24]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000e100 	.word	0xe000e100
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002590:	b480      	push	{r7}
 8002592:	b089      	sub	sp, #36	; 0x24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f1c3 0307 	rsb	r3, r3, #7
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	bf28      	it	cs
 80025ae:	2304      	movcs	r3, #4
 80025b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3304      	adds	r3, #4
 80025b6:	2b06      	cmp	r3, #6
 80025b8:	d902      	bls.n	80025c0 <NVIC_EncodePriority+0x30>
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3b03      	subs	r3, #3
 80025be:	e000      	b.n	80025c2 <NVIC_EncodePriority+0x32>
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	f04f 32ff 	mov.w	r2, #4294967295
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43da      	mvns	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	401a      	ands	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d8:	f04f 31ff 	mov.w	r1, #4294967295
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa01 f303 	lsl.w	r3, r1, r3
 80025e2:	43d9      	mvns	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	4313      	orrs	r3, r2
         );
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3724      	adds	r7, #36	; 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002608:	d301      	bcc.n	800260e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800260a:	2301      	movs	r3, #1
 800260c:	e00f      	b.n	800262e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800260e:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <SysTick_Config+0x40>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002616:	210f      	movs	r1, #15
 8002618:	f04f 30ff 	mov.w	r0, #4294967295
 800261c:	f7ff ff8e 	bl	800253c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <SysTick_Config+0x40>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002626:	4b04      	ldr	r3, [pc, #16]	; (8002638 <SysTick_Config+0x40>)
 8002628:	2207      	movs	r2, #7
 800262a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	e000e010 	.word	0xe000e010

0800263c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ff29 	bl	800249c <__NVIC_SetPriorityGrouping>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	4603      	mov	r3, r0
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002664:	f7ff ff3e 	bl	80024e4 <__NVIC_GetPriorityGrouping>
 8002668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	6978      	ldr	r0, [r7, #20]
 8002670:	f7ff ff8e 	bl	8002590 <NVIC_EncodePriority>
 8002674:	4602      	mov	r2, r0
 8002676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff5d 	bl	800253c <__NVIC_SetPriority>
}
 8002682:	bf00      	nop
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff31 	bl	8002500 <__NVIC_EnableIRQ>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ffa2 	bl	80025f8 <SysTick_Config>
 80026b4:	4603      	mov	r3, r0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d004      	beq.n	80026dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2280      	movs	r2, #128	; 0x80
 80026d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e00c      	b.n	80026f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2205      	movs	r2, #5
 80026e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0201 	bic.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002710:	b2db      	uxtb	r3, r3
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	e159      	b.n	80029f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	f040 8148 	bne.w	80029ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d005      	beq.n	8002772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276e:	2b02      	cmp	r3, #2
 8002770:	d130      	bne.n	80027d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	2203      	movs	r2, #3
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a8:	2201      	movs	r2, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f003 0201 	and.w	r2, r3, #1
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d017      	beq.n	8002810 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d123      	bne.n	8002864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	08da      	lsrs	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3208      	adds	r2, #8
 8002824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	220f      	movs	r2, #15
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	08da      	lsrs	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3208      	adds	r2, #8
 800285e:	69b9      	ldr	r1, [r7, #24]
 8002860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	2203      	movs	r2, #3
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0203 	and.w	r2, r3, #3
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80a2 	beq.w	80029ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	4b57      	ldr	r3, [pc, #348]	; (8002a08 <HAL_GPIO_Init+0x2e8>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	4a56      	ldr	r2, [pc, #344]	; (8002a08 <HAL_GPIO_Init+0x2e8>)
 80028b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b4:	6453      	str	r3, [r2, #68]	; 0x44
 80028b6:	4b54      	ldr	r3, [pc, #336]	; (8002a08 <HAL_GPIO_Init+0x2e8>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028c2:	4a52      	ldr	r2, [pc, #328]	; (8002a0c <HAL_GPIO_Init+0x2ec>)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3302      	adds	r3, #2
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	220f      	movs	r2, #15
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a49      	ldr	r2, [pc, #292]	; (8002a10 <HAL_GPIO_Init+0x2f0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d019      	beq.n	8002922 <HAL_GPIO_Init+0x202>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a48      	ldr	r2, [pc, #288]	; (8002a14 <HAL_GPIO_Init+0x2f4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_GPIO_Init+0x1fe>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a47      	ldr	r2, [pc, #284]	; (8002a18 <HAL_GPIO_Init+0x2f8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00d      	beq.n	800291a <HAL_GPIO_Init+0x1fa>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a46      	ldr	r2, [pc, #280]	; (8002a1c <HAL_GPIO_Init+0x2fc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <HAL_GPIO_Init+0x1f6>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a45      	ldr	r2, [pc, #276]	; (8002a20 <HAL_GPIO_Init+0x300>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d101      	bne.n	8002912 <HAL_GPIO_Init+0x1f2>
 800290e:	2304      	movs	r3, #4
 8002910:	e008      	b.n	8002924 <HAL_GPIO_Init+0x204>
 8002912:	2307      	movs	r3, #7
 8002914:	e006      	b.n	8002924 <HAL_GPIO_Init+0x204>
 8002916:	2303      	movs	r3, #3
 8002918:	e004      	b.n	8002924 <HAL_GPIO_Init+0x204>
 800291a:	2302      	movs	r3, #2
 800291c:	e002      	b.n	8002924 <HAL_GPIO_Init+0x204>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_GPIO_Init+0x204>
 8002922:	2300      	movs	r3, #0
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	f002 0203 	and.w	r2, r2, #3
 800292a:	0092      	lsls	r2, r2, #2
 800292c:	4093      	lsls	r3, r2
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002934:	4935      	ldr	r1, [pc, #212]	; (8002a0c <HAL_GPIO_Init+0x2ec>)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	089b      	lsrs	r3, r3, #2
 800293a:	3302      	adds	r3, #2
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002942:	4b38      	ldr	r3, [pc, #224]	; (8002a24 <HAL_GPIO_Init+0x304>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002966:	4a2f      	ldr	r2, [pc, #188]	; (8002a24 <HAL_GPIO_Init+0x304>)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800296c:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <HAL_GPIO_Init+0x304>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002990:	4a24      	ldr	r2, [pc, #144]	; (8002a24 <HAL_GPIO_Init+0x304>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002996:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <HAL_GPIO_Init+0x304>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ba:	4a1a      	ldr	r2, [pc, #104]	; (8002a24 <HAL_GPIO_Init+0x304>)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c0:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_GPIO_Init+0x304>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029e4:	4a0f      	ldr	r2, [pc, #60]	; (8002a24 <HAL_GPIO_Init+0x304>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3301      	adds	r3, #1
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b0f      	cmp	r3, #15
 80029f4:	f67f aea2 	bls.w	800273c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029f8:	bf00      	nop
 80029fa:	bf00      	nop
 80029fc:	3724      	adds	r7, #36	; 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40013800 	.word	0x40013800
 8002a10:	40020000 	.word	0x40020000
 8002a14:	40020400 	.word	0x40020400
 8002a18:	40020800 	.word	0x40020800
 8002a1c:	40020c00 	.word	0x40020c00
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40013c00 	.word	0x40013c00

08002a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
 8002a34:	4613      	mov	r3, r2
 8002a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a38:	787b      	ldrb	r3, [r7, #1]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a3e:	887a      	ldrh	r2, [r7, #2]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a44:	e003      	b.n	8002a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	041a      	lsls	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	619a      	str	r2, [r3, #24]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e12b      	b.n	8002cc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fa82 	bl	8001f8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2224      	movs	r2, #36	; 0x24
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002abe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ac0:	f003 f8d6 	bl	8005c70 <HAL_RCC_GetPCLK1Freq>
 8002ac4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4a81      	ldr	r2, [pc, #516]	; (8002cd0 <HAL_I2C_Init+0x274>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d807      	bhi.n	8002ae0 <HAL_I2C_Init+0x84>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a80      	ldr	r2, [pc, #512]	; (8002cd4 <HAL_I2C_Init+0x278>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	bf94      	ite	ls
 8002ad8:	2301      	movls	r3, #1
 8002ada:	2300      	movhi	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e006      	b.n	8002aee <HAL_I2C_Init+0x92>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4a7d      	ldr	r2, [pc, #500]	; (8002cd8 <HAL_I2C_Init+0x27c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	bf94      	ite	ls
 8002ae8:	2301      	movls	r3, #1
 8002aea:	2300      	movhi	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e0e7      	b.n	8002cc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4a78      	ldr	r2, [pc, #480]	; (8002cdc <HAL_I2C_Init+0x280>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	0c9b      	lsrs	r3, r3, #18
 8002b00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a6a      	ldr	r2, [pc, #424]	; (8002cd0 <HAL_I2C_Init+0x274>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d802      	bhi.n	8002b30 <HAL_I2C_Init+0xd4>
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	e009      	b.n	8002b44 <HAL_I2C_Init+0xe8>
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b36:	fb02 f303 	mul.w	r3, r2, r3
 8002b3a:	4a69      	ldr	r2, [pc, #420]	; (8002ce0 <HAL_I2C_Init+0x284>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	3301      	adds	r3, #1
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	495c      	ldr	r1, [pc, #368]	; (8002cd0 <HAL_I2C_Init+0x274>)
 8002b60:	428b      	cmp	r3, r1
 8002b62:	d819      	bhi.n	8002b98 <HAL_I2C_Init+0x13c>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1e59      	subs	r1, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b72:	1c59      	adds	r1, r3, #1
 8002b74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b78:	400b      	ands	r3, r1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HAL_I2C_Init+0x138>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1e59      	subs	r1, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b92:	e051      	b.n	8002c38 <HAL_I2C_Init+0x1dc>
 8002b94:	2304      	movs	r3, #4
 8002b96:	e04f      	b.n	8002c38 <HAL_I2C_Init+0x1dc>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d111      	bne.n	8002bc4 <HAL_I2C_Init+0x168>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1e58      	subs	r0, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6859      	ldr	r1, [r3, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	440b      	add	r3, r1
 8002bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	e012      	b.n	8002bea <HAL_I2C_Init+0x18e>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1e58      	subs	r0, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	0099      	lsls	r1, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_I2C_Init+0x196>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e022      	b.n	8002c38 <HAL_I2C_Init+0x1dc>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10e      	bne.n	8002c18 <HAL_I2C_Init+0x1bc>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1e58      	subs	r0, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	440b      	add	r3, r1
 8002c08:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c16:	e00f      	b.n	8002c38 <HAL_I2C_Init+0x1dc>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	1e58      	subs	r0, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6859      	ldr	r1, [r3, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	0099      	lsls	r1, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c2e:	3301      	adds	r3, #1
 8002c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	6809      	ldr	r1, [r1, #0]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69da      	ldr	r2, [r3, #28]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6911      	ldr	r1, [r2, #16]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68d2      	ldr	r2, [r2, #12]
 8002c72:	4311      	orrs	r1, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	000186a0 	.word	0x000186a0
 8002cd4:	001e847f 	.word	0x001e847f
 8002cd8:	003d08ff 	.word	0x003d08ff
 8002cdc:	431bde83 	.word	0x431bde83
 8002ce0:	10624dd3 	.word	0x10624dd3

08002ce4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	4608      	mov	r0, r1
 8002cee:	4611      	mov	r1, r2
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	817b      	strh	r3, [r7, #10]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	813b      	strh	r3, [r7, #8]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cfe:	f7ff fb9d 	bl	800243c <HAL_GetTick>
 8002d02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	f040 80d9 	bne.w	8002ec4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	2319      	movs	r3, #25
 8002d18:	2201      	movs	r2, #1
 8002d1a:	496d      	ldr	r1, [pc, #436]	; (8002ed0 <HAL_I2C_Mem_Write+0x1ec>)
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f002 f90d 	bl	8004f3c <I2C_WaitOnFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e0cc      	b.n	8002ec6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_I2C_Mem_Write+0x56>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e0c5      	b.n	8002ec6 <HAL_I2C_Mem_Write+0x1e2>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d007      	beq.n	8002d60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2221      	movs	r2, #33	; 0x21
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2240      	movs	r2, #64	; 0x40
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a3a      	ldr	r2, [r7, #32]
 8002d8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4a4d      	ldr	r2, [pc, #308]	; (8002ed4 <HAL_I2C_Mem_Write+0x1f0>)
 8002da0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002da2:	88f8      	ldrh	r0, [r7, #6]
 8002da4:	893a      	ldrh	r2, [r7, #8]
 8002da6:	8979      	ldrh	r1, [r7, #10]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	9301      	str	r3, [sp, #4]
 8002dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	4603      	mov	r3, r0
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f001 fe9c 	bl	8004af0 <I2C_RequestMemoryWrite>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d052      	beq.n	8002e64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e081      	b.n	8002ec6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f002 f98e 	bl	80050e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00d      	beq.n	8002dee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d107      	bne.n	8002dea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e06b      	b.n	8002ec6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d11b      	bne.n	8002e64 <HAL_I2C_Mem_Write+0x180>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d017      	beq.n	8002e64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	781a      	ldrb	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1aa      	bne.n	8002dc2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f002 f97a 	bl	800516a <I2C_WaitOnBTFFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00d      	beq.n	8002e98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d107      	bne.n	8002e94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e016      	b.n	8002ec6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e000      	b.n	8002ec6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ec4:	2302      	movs	r3, #2
  }
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	00100002 	.word	0x00100002
 8002ed4:	ffff0000 	.word	0xffff0000

08002ed8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08c      	sub	sp, #48	; 0x30
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	4608      	mov	r0, r1
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	817b      	strh	r3, [r7, #10]
 8002eea:	460b      	mov	r3, r1
 8002eec:	813b      	strh	r3, [r7, #8]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ef2:	f7ff faa3 	bl	800243c <HAL_GetTick>
 8002ef6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	f040 8208 	bne.w	8003316 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	2319      	movs	r3, #25
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	497b      	ldr	r1, [pc, #492]	; (80030fc <HAL_I2C_Mem_Read+0x224>)
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f002 f813 	bl	8004f3c <I2C_WaitOnFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e1fb      	b.n	8003318 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_I2C_Mem_Read+0x56>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e1f4      	b.n	8003318 <HAL_I2C_Mem_Read+0x440>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d007      	beq.n	8002f54 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2222      	movs	r2, #34	; 0x22
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2240      	movs	r2, #64	; 0x40
 8002f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002f84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4a5b      	ldr	r2, [pc, #364]	; (8003100 <HAL_I2C_Mem_Read+0x228>)
 8002f94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f96:	88f8      	ldrh	r0, [r7, #6]
 8002f98:	893a      	ldrh	r2, [r7, #8]
 8002f9a:	8979      	ldrh	r1, [r7, #10]
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	9301      	str	r3, [sp, #4]
 8002fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f001 fe38 	bl	8004c1c <I2C_RequestMemoryRead>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e1b0      	b.n	8003318 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d113      	bne.n	8002fe6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	623b      	str	r3, [r7, #32]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	623b      	str	r3, [r7, #32]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	623b      	str	r3, [r7, #32]
 8002fd2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e184      	b.n	80032f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d11b      	bne.n	8003026 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	e164      	b.n	80032f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302a:	2b02      	cmp	r3, #2
 800302c:	d11b      	bne.n	8003066 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800303c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800304c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304e:	2300      	movs	r3, #0
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	61bb      	str	r3, [r7, #24]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	61bb      	str	r3, [r7, #24]
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	e144      	b.n	80032f0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800307c:	e138      	b.n	80032f0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003082:	2b03      	cmp	r3, #3
 8003084:	f200 80f1 	bhi.w	800326a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308c:	2b01      	cmp	r3, #1
 800308e:	d123      	bne.n	80030d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003092:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f002 f8db 	bl	8005250 <I2C_WaitOnRXNEFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e139      	b.n	8003318 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691a      	ldr	r2, [r3, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030d6:	e10b      	b.n	80032f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d14e      	bne.n	800317e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e6:	2200      	movs	r2, #0
 80030e8:	4906      	ldr	r1, [pc, #24]	; (8003104 <HAL_I2C_Mem_Read+0x22c>)
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f001 ff26 	bl	8004f3c <I2C_WaitOnFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e10e      	b.n	8003318 <HAL_I2C_Mem_Read+0x440>
 80030fa:	bf00      	nop
 80030fc:	00100002 	.word	0x00100002
 8003100:	ffff0000 	.word	0xffff0000
 8003104:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003116:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800317c:	e0b8      	b.n	80032f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003184:	2200      	movs	r2, #0
 8003186:	4966      	ldr	r1, [pc, #408]	; (8003320 <HAL_I2C_Mem_Read+0x448>)
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f001 fed7 	bl	8004f3c <I2C_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0bf      	b.n	8003318 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691a      	ldr	r2, [r3, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e0:	2200      	movs	r2, #0
 80031e2:	494f      	ldr	r1, [pc, #316]	; (8003320 <HAL_I2C_Mem_Read+0x448>)
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f001 fea9 	bl	8004f3c <I2C_WaitOnFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e091      	b.n	8003318 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003202:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003268:	e042      	b.n	80032f0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f001 ffee 	bl	8005250 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e04c      	b.n	8003318 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d118      	bne.n	80032f0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f47f aec2 	bne.w	800307e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	e000      	b.n	8003318 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003316:	2302      	movs	r3, #2
  }
}
 8003318:	4618      	mov	r0, r3
 800331a:	3728      	adds	r7, #40	; 0x28
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	00010004 	.word	0x00010004

08003324 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003344:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	2b10      	cmp	r3, #16
 8003352:	d003      	beq.n	800335c <HAL_I2C_EV_IRQHandler+0x38>
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	2b40      	cmp	r3, #64	; 0x40
 8003358:	f040 80c1 	bne.w	80034de <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10d      	bne.n	8003392 <HAL_I2C_EV_IRQHandler+0x6e>
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800337c:	d003      	beq.n	8003386 <HAL_I2C_EV_IRQHandler+0x62>
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003384:	d101      	bne.n	800338a <HAL_I2C_EV_IRQHandler+0x66>
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <HAL_I2C_EV_IRQHandler+0x68>
 800338a:	2300      	movs	r3, #0
 800338c:	2b01      	cmp	r3, #1
 800338e:	f000 8132 	beq.w	80035f6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00c      	beq.n	80033b6 <HAL_I2C_EV_IRQHandler+0x92>
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	0a5b      	lsrs	r3, r3, #9
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d006      	beq.n	80033b6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f001 ffd6 	bl	800535a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fd83 	bl	8003eba <I2C_Master_SB>
 80033b4:	e092      	b.n	80034dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	08db      	lsrs	r3, r3, #3
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_I2C_EV_IRQHandler+0xb2>
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	0a5b      	lsrs	r3, r3, #9
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fdf9 	bl	8003fc6 <I2C_Master_ADD10>
 80033d4:	e082      	b.n	80034dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	085b      	lsrs	r3, r3, #1
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <HAL_I2C_EV_IRQHandler+0xd2>
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	0a5b      	lsrs	r3, r3, #9
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fe13 	bl	800401a <I2C_Master_ADDR>
 80033f4:	e072      	b.n	80034dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	089b      	lsrs	r3, r3, #2
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d03b      	beq.n	800347a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800340c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003410:	f000 80f3 	beq.w	80035fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	09db      	lsrs	r3, r3, #7
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00f      	beq.n	8003440 <HAL_I2C_EV_IRQHandler+0x11c>
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	0a9b      	lsrs	r3, r3, #10
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d009      	beq.n	8003440 <HAL_I2C_EV_IRQHandler+0x11c>
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	089b      	lsrs	r3, r3, #2
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d103      	bne.n	8003440 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f9f3 	bl	8003824 <I2C_MasterTransmit_TXE>
 800343e:	e04d      	b.n	80034dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	089b      	lsrs	r3, r3, #2
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80d6 	beq.w	80035fa <HAL_I2C_EV_IRQHandler+0x2d6>
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	0a5b      	lsrs	r3, r3, #9
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 80cf 	beq.w	80035fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800345c:	7bbb      	ldrb	r3, [r7, #14]
 800345e:	2b21      	cmp	r3, #33	; 0x21
 8003460:	d103      	bne.n	800346a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fa7a 	bl	800395c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003468:	e0c7      	b.n	80035fa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	2b40      	cmp	r3, #64	; 0x40
 800346e:	f040 80c4 	bne.w	80035fa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fae8 	bl	8003a48 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003478:	e0bf      	b.n	80035fa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003488:	f000 80b7 	beq.w	80035fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	099b      	lsrs	r3, r3, #6
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00f      	beq.n	80034b8 <HAL_I2C_EV_IRQHandler+0x194>
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	0a9b      	lsrs	r3, r3, #10
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d009      	beq.n	80034b8 <HAL_I2C_EV_IRQHandler+0x194>
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	089b      	lsrs	r3, r3, #2
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d103      	bne.n	80034b8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fb5d 	bl	8003b70 <I2C_MasterReceive_RXNE>
 80034b6:	e011      	b.n	80034dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	089b      	lsrs	r3, r3, #2
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 809a 	beq.w	80035fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	0a5b      	lsrs	r3, r3, #9
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8093 	beq.w	80035fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fc06 	bl	8003ce6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034da:	e08e      	b.n	80035fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80034dc:	e08d      	b.n	80035fa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d004      	beq.n	80034f0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	e007      	b.n	8003500 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d012      	beq.n	8003532 <HAL_I2C_EV_IRQHandler+0x20e>
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	0a5b      	lsrs	r3, r3, #9
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00c      	beq.n	8003532 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003528:	69b9      	ldr	r1, [r7, #24]
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 ffc4 	bl	80044b8 <I2C_Slave_ADDR>
 8003530:	e066      	b.n	8003600 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HAL_I2C_EV_IRQHandler+0x22e>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	0a5b      	lsrs	r3, r3, #9
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fffe 	bl	800454c <I2C_Slave_STOPF>
 8003550:	e056      	b.n	8003600 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003552:	7bbb      	ldrb	r3, [r7, #14]
 8003554:	2b21      	cmp	r3, #33	; 0x21
 8003556:	d002      	beq.n	800355e <HAL_I2C_EV_IRQHandler+0x23a>
 8003558:	7bbb      	ldrb	r3, [r7, #14]
 800355a:	2b29      	cmp	r3, #41	; 0x29
 800355c:	d125      	bne.n	80035aa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	09db      	lsrs	r3, r3, #7
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00f      	beq.n	800358a <HAL_I2C_EV_IRQHandler+0x266>
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	0a9b      	lsrs	r3, r3, #10
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <HAL_I2C_EV_IRQHandler+0x266>
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	089b      	lsrs	r3, r3, #2
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d103      	bne.n	800358a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 feda 	bl	800433c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003588:	e039      	b.n	80035fe <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	089b      	lsrs	r3, r3, #2
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d033      	beq.n	80035fe <HAL_I2C_EV_IRQHandler+0x2da>
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	0a5b      	lsrs	r3, r3, #9
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d02d      	beq.n	80035fe <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 ff07 	bl	80043b6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035a8:	e029      	b.n	80035fe <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	099b      	lsrs	r3, r3, #6
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00f      	beq.n	80035d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	0a9b      	lsrs	r3, r3, #10
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d009      	beq.n	80035d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	089b      	lsrs	r3, r3, #2
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d103      	bne.n	80035d6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 ff12 	bl	80043f8 <I2C_SlaveReceive_RXNE>
 80035d4:	e014      	b.n	8003600 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	089b      	lsrs	r3, r3, #2
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00e      	beq.n	8003600 <HAL_I2C_EV_IRQHandler+0x2dc>
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	0a5b      	lsrs	r3, r3, #9
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d008      	beq.n	8003600 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 ff40 	bl	8004474 <I2C_SlaveReceive_BTF>
 80035f4:	e004      	b.n	8003600 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80035f6:	bf00      	nop
 80035f8:	e002      	b.n	8003600 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035fa:	bf00      	nop
 80035fc:	e000      	b.n	8003600 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035fe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003600:	3720      	adds	r7, #32
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b08a      	sub	sp, #40	; 0x28
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800361e:	2300      	movs	r3, #0
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003628:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	0a1b      	lsrs	r3, r3, #8
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00e      	beq.n	8003654 <HAL_I2C_ER_IRQHandler+0x4e>
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	0a1b      	lsrs	r3, r3, #8
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003652:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	0a5b      	lsrs	r3, r3, #9
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00e      	beq.n	800367e <HAL_I2C_ER_IRQHandler+0x78>
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	f043 0302 	orr.w	r3, r3, #2
 8003672:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800367c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	0a9b      	lsrs	r3, r3, #10
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d03f      	beq.n	800370a <HAL_I2C_ER_IRQHandler+0x104>
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	0a1b      	lsrs	r3, r3, #8
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d039      	beq.n	800370a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003696:	7efb      	ldrb	r3, [r7, #27]
 8003698:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80036b0:	7ebb      	ldrb	r3, [r7, #26]
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d112      	bne.n	80036dc <HAL_I2C_ER_IRQHandler+0xd6>
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10f      	bne.n	80036dc <HAL_I2C_ER_IRQHandler+0xd6>
 80036bc:	7cfb      	ldrb	r3, [r7, #19]
 80036be:	2b21      	cmp	r3, #33	; 0x21
 80036c0:	d008      	beq.n	80036d4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80036c2:	7cfb      	ldrb	r3, [r7, #19]
 80036c4:	2b29      	cmp	r3, #41	; 0x29
 80036c6:	d005      	beq.n	80036d4 <HAL_I2C_ER_IRQHandler+0xce>
 80036c8:	7cfb      	ldrb	r3, [r7, #19]
 80036ca:	2b28      	cmp	r3, #40	; 0x28
 80036cc:	d106      	bne.n	80036dc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b21      	cmp	r3, #33	; 0x21
 80036d2:	d103      	bne.n	80036dc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f001 f869 	bl	80047ac <I2C_Slave_AF>
 80036da:	e016      	b.n	800370a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036e4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	f043 0304 	orr.w	r3, r3, #4
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80036ee:	7efb      	ldrb	r3, [r7, #27]
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d002      	beq.n	80036fa <HAL_I2C_ER_IRQHandler+0xf4>
 80036f4:	7efb      	ldrb	r3, [r7, #27]
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	d107      	bne.n	800370a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003708:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	0adb      	lsrs	r3, r3, #11
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00e      	beq.n	8003734 <HAL_I2C_ER_IRQHandler+0x12e>
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	0a1b      	lsrs	r3, r3, #8
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	f043 0308 	orr.w	r3, r3, #8
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003732:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f001 f8a0 	bl	800488c <I2C_ITError>
  }
}
 800374c:	bf00      	nop
 800374e:	3728      	adds	r7, #40	; 0x28
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	70fb      	strb	r3, [r7, #3]
 80037b0:	4613      	mov	r3, r2
 80037b2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003832:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800383a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003846:	2b00      	cmp	r3, #0
 8003848:	d150      	bne.n	80038ec <I2C_MasterTransmit_TXE+0xc8>
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	2b21      	cmp	r3, #33	; 0x21
 800384e:	d14d      	bne.n	80038ec <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b08      	cmp	r3, #8
 8003854:	d01d      	beq.n	8003892 <I2C_MasterTransmit_TXE+0x6e>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b20      	cmp	r3, #32
 800385a:	d01a      	beq.n	8003892 <I2C_MasterTransmit_TXE+0x6e>
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003862:	d016      	beq.n	8003892 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003872:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2211      	movs	r2, #17
 8003878:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff ff62 	bl	8003754 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003890:	e060      	b.n	8003954 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038a0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b40      	cmp	r3, #64	; 0x40
 80038ca:	d107      	bne.n	80038dc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff ff7d 	bl	80037d4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038da:	e03b      	b.n	8003954 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ff35 	bl	8003754 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038ea:	e033      	b.n	8003954 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	2b21      	cmp	r3, #33	; 0x21
 80038f0:	d005      	beq.n	80038fe <I2C_MasterTransmit_TXE+0xda>
 80038f2:	7bbb      	ldrb	r3, [r7, #14]
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d12d      	bne.n	8003954 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	2b22      	cmp	r3, #34	; 0x22
 80038fc:	d12a      	bne.n	8003954 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d108      	bne.n	800391a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003916:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003918:	e01c      	b.n	8003954 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d103      	bne.n	800392e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f88e 	bl	8003a48 <I2C_MemoryTransmit_TXE_BTF>
}
 800392c:	e012      	b.n	8003954 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	781a      	ldrb	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003952:	e7ff      	b.n	8003954 <I2C_MasterTransmit_TXE+0x130>
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b21      	cmp	r3, #33	; 0x21
 8003974:	d164      	bne.n	8003a40 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d012      	beq.n	80039a6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	781a      	ldrb	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80039a4:	e04c      	b.n	8003a40 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d01d      	beq.n	80039e8 <I2C_MasterTransmit_BTF+0x8c>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d01a      	beq.n	80039e8 <I2C_MasterTransmit_BTF+0x8c>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039b8:	d016      	beq.n	80039e8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039c8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2211      	movs	r2, #17
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff feb7 	bl	8003754 <HAL_I2C_MasterTxCpltCallback>
}
 80039e6:	e02b      	b.n	8003a40 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039f6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a06:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b40      	cmp	r3, #64	; 0x40
 8003a20:	d107      	bne.n	8003a32 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff fed2 	bl	80037d4 <HAL_I2C_MemTxCpltCallback>
}
 8003a30:	e006      	b.n	8003a40 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff fe8a 	bl	8003754 <HAL_I2C_MasterTxCpltCallback>
}
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a56:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d11d      	bne.n	8003a9c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d10b      	bne.n	8003a80 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a78:	1c9a      	adds	r2, r3, #2
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003a7e:	e073      	b.n	8003b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	121b      	asrs	r3, r3, #8
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a9a:	e065      	b.n	8003b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d10b      	bne.n	8003abc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003aba:	e055      	b.n	8003b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d151      	bne.n	8003b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	2b22      	cmp	r3, #34	; 0x22
 8003ac8:	d10d      	bne.n	8003ae6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ad8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ae4:	e040      	b.n	8003b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d015      	beq.n	8003b1c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	2b21      	cmp	r3, #33	; 0x21
 8003af4:	d112      	bne.n	8003b1c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	781a      	ldrb	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b1a:	e025      	b.n	8003b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d120      	bne.n	8003b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
 8003b28:	2b21      	cmp	r3, #33	; 0x21
 8003b2a:	d11d      	bne.n	8003b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b3a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b4a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7ff fe36 	bl	80037d4 <HAL_I2C_MemTxCpltCallback>
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b22      	cmp	r3, #34	; 0x22
 8003b82:	f040 80ac 	bne.w	8003cde <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d921      	bls.n	8003bd8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	f040 808c 	bne.w	8003cde <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003bd6:	e082      	b.n	8003cde <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d075      	beq.n	8003ccc <I2C_MasterReceive_RXNE+0x15c>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d002      	beq.n	8003bec <I2C_MasterReceive_RXNE+0x7c>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d16f      	bne.n	8003ccc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f001 fafd 	bl	80051ec <I2C_WaitOnSTOPRequestThroughIT>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d142      	bne.n	8003c7e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c06:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c16:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d10a      	bne.n	8003c68 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff fdc1 	bl	80037e8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c66:	e03a      	b.n	8003cde <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2212      	movs	r2, #18
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7ff fd76 	bl	8003768 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c7c:	e02f      	b.n	8003cde <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c8c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff fd99 	bl	80037fc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cca:	e008      	b.n	8003cde <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cda:	605a      	str	r2, [r3, #4]
}
 8003cdc:	e7ff      	b.n	8003cde <I2C_MasterReceive_RXNE+0x16e>
 8003cde:	bf00      	nop
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d11b      	bne.n	8003d36 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003d34:	e0bd      	b.n	8003eb2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d129      	bne.n	8003d94 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d00a      	beq.n	8003d6c <I2C_MasterReceive_BTF+0x86>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d007      	beq.n	8003d6c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691a      	ldr	r2, [r3, #16]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d92:	e08e      	b.n	8003eb2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d176      	bne.n	8003e8c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d002      	beq.n	8003daa <I2C_MasterReceive_BTF+0xc4>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b10      	cmp	r3, #16
 8003da8:	d108      	bne.n	8003dbc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	e019      	b.n	8003df0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d002      	beq.n	8003dc8 <I2C_MasterReceive_BTF+0xe2>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d108      	bne.n	8003dda <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	e00a      	b.n	8003df0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	d007      	beq.n	8003df0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691a      	ldr	r2, [r3, #16]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e4a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b40      	cmp	r3, #64	; 0x40
 8003e5e:	d10a      	bne.n	8003e76 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff fcba 	bl	80037e8 <HAL_I2C_MemRxCpltCallback>
}
 8003e74:	e01d      	b.n	8003eb2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2212      	movs	r2, #18
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff fc6f 	bl	8003768 <HAL_I2C_MasterRxCpltCallback>
}
 8003e8a:	e012      	b.n	8003eb2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003eb2:	bf00      	nop
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b40      	cmp	r3, #64	; 0x40
 8003ecc:	d117      	bne.n	8003efe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d109      	bne.n	8003eea <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ee6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003ee8:	e067      	b.n	8003fba <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	611a      	str	r2, [r3, #16]
}
 8003efc:	e05d      	b.n	8003fba <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f06:	d133      	bne.n	8003f70 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b21      	cmp	r3, #33	; 0x21
 8003f12:	d109      	bne.n	8003f28 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f24:	611a      	str	r2, [r3, #16]
 8003f26:	e008      	b.n	8003f3a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d004      	beq.n	8003f4c <I2C_Master_SB+0x92>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d108      	bne.n	8003f5e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d032      	beq.n	8003fba <I2C_Master_SB+0x100>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d02d      	beq.n	8003fba <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f6c:	605a      	str	r2, [r3, #4]
}
 8003f6e:	e024      	b.n	8003fba <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10e      	bne.n	8003f96 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	11db      	asrs	r3, r3, #7
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f003 0306 	and.w	r3, r3, #6
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	f063 030f 	orn	r3, r3, #15
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	611a      	str	r2, [r3, #16]
}
 8003f94:	e011      	b.n	8003fba <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d10d      	bne.n	8003fba <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	11db      	asrs	r3, r3, #7
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	f003 0306 	and.w	r3, r3, #6
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	f063 030e 	orn	r3, r3, #14
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	611a      	str	r2, [r3, #16]
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d004      	beq.n	8003fec <I2C_Master_ADD10+0x26>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d108      	bne.n	8003ffe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00c      	beq.n	800400e <I2C_Master_ADD10+0x48>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d007      	beq.n	800400e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800400c:	605a      	str	r2, [r3, #4]
  }
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800401a:	b480      	push	{r7}
 800401c:	b091      	sub	sp, #68	; 0x44
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004028:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b22      	cmp	r3, #34	; 0x22
 8004042:	f040 8169 	bne.w	8004318 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10f      	bne.n	800406e <I2C_Master_ADDR+0x54>
 800404e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004052:	2b40      	cmp	r3, #64	; 0x40
 8004054:	d10b      	bne.n	800406e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004056:	2300      	movs	r3, #0
 8004058:	633b      	str	r3, [r7, #48]	; 0x30
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	633b      	str	r3, [r7, #48]	; 0x30
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	633b      	str	r3, [r7, #48]	; 0x30
 800406a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406c:	e160      	b.n	8004330 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004072:	2b00      	cmp	r3, #0
 8004074:	d11d      	bne.n	80040b2 <I2C_Master_ADDR+0x98>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800407e:	d118      	bne.n	80040b2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004080:	2300      	movs	r3, #0
 8004082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004094:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	651a      	str	r2, [r3, #80]	; 0x50
 80040b0:	e13e      	b.n	8004330 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d113      	bne.n	80040e4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040bc:	2300      	movs	r3, #0
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80040d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	e115      	b.n	8004310 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	f040 808a 	bne.w	8004204 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040f6:	d137      	bne.n	8004168 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004106:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004116:	d113      	bne.n	8004140 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004126:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004128:	2300      	movs	r3, #0
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	e0e7      	b.n	8004310 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004140:	2300      	movs	r3, #0
 8004142:	623b      	str	r3, [r7, #32]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	623b      	str	r3, [r7, #32]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	623b      	str	r3, [r7, #32]
 8004154:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e0d3      	b.n	8004310 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416a:	2b08      	cmp	r3, #8
 800416c:	d02e      	beq.n	80041cc <I2C_Master_ADDR+0x1b2>
 800416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004170:	2b20      	cmp	r3, #32
 8004172:	d02b      	beq.n	80041cc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004176:	2b12      	cmp	r3, #18
 8004178:	d102      	bne.n	8004180 <I2C_Master_ADDR+0x166>
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	2b01      	cmp	r3, #1
 800417e:	d125      	bne.n	80041cc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004182:	2b04      	cmp	r3, #4
 8004184:	d00e      	beq.n	80041a4 <I2C_Master_ADDR+0x18a>
 8004186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004188:	2b02      	cmp	r3, #2
 800418a:	d00b      	beq.n	80041a4 <I2C_Master_ADDR+0x18a>
 800418c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418e:	2b10      	cmp	r3, #16
 8004190:	d008      	beq.n	80041a4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	e007      	b.n	80041b4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041b2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b4:	2300      	movs	r3, #0
 80041b6:	61fb      	str	r3, [r7, #28]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	e0a1      	b.n	8004310 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041da:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041dc:	2300      	movs	r3, #0
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	61bb      	str	r3, [r7, #24]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	e085      	b.n	8004310 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d14d      	bne.n	80042aa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800420e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004210:	2b04      	cmp	r3, #4
 8004212:	d016      	beq.n	8004242 <I2C_Master_ADDR+0x228>
 8004214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004216:	2b02      	cmp	r3, #2
 8004218:	d013      	beq.n	8004242 <I2C_Master_ADDR+0x228>
 800421a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421c:	2b10      	cmp	r3, #16
 800421e:	d010      	beq.n	8004242 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800422e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	e007      	b.n	8004252 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004250:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800425c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004260:	d117      	bne.n	8004292 <I2C_Master_ADDR+0x278>
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004268:	d00b      	beq.n	8004282 <I2C_Master_ADDR+0x268>
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	2b01      	cmp	r3, #1
 800426e:	d008      	beq.n	8004282 <I2C_Master_ADDR+0x268>
 8004270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004272:	2b08      	cmp	r3, #8
 8004274:	d005      	beq.n	8004282 <I2C_Master_ADDR+0x268>
 8004276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004278:	2b10      	cmp	r3, #16
 800427a:	d002      	beq.n	8004282 <I2C_Master_ADDR+0x268>
 800427c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427e:	2b20      	cmp	r3, #32
 8004280:	d107      	bne.n	8004292 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004290:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004292:	2300      	movs	r3, #0
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	e032      	b.n	8004310 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042b8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c8:	d117      	bne.n	80042fa <I2C_Master_ADDR+0x2e0>
 80042ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042d0:	d00b      	beq.n	80042ea <I2C_Master_ADDR+0x2d0>
 80042d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d008      	beq.n	80042ea <I2C_Master_ADDR+0x2d0>
 80042d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d005      	beq.n	80042ea <I2C_Master_ADDR+0x2d0>
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d002      	beq.n	80042ea <I2C_Master_ADDR+0x2d0>
 80042e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d107      	bne.n	80042fa <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042f8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004316:	e00b      	b.n	8004330 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
}
 800432e:	e7ff      	b.n	8004330 <I2C_Master_ADDR+0x316>
 8004330:	bf00      	nop
 8004332:	3744      	adds	r7, #68	; 0x44
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d02b      	beq.n	80043ae <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	781a      	ldrb	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d114      	bne.n	80043ae <I2C_SlaveTransmit_TXE+0x72>
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	2b29      	cmp	r3, #41	; 0x29
 8004388:	d111      	bne.n	80043ae <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004398:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2221      	movs	r2, #33	; 0x21
 800439e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2228      	movs	r2, #40	; 0x28
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff f9e7 	bl	800377c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d011      	beq.n	80043ec <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	781a      	ldrb	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004406:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d02c      	beq.n	800446c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d114      	bne.n	800446c <I2C_SlaveReceive_RXNE+0x74>
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	2b2a      	cmp	r3, #42	; 0x2a
 8004446:	d111      	bne.n	800446c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004456:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2222      	movs	r2, #34	; 0x22
 800445c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2228      	movs	r2, #40	; 0x28
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7ff f992 	bl	8003790 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800446c:	bf00      	nop
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d012      	beq.n	80044ac <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80044c2:	2300      	movs	r3, #0
 80044c4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044d2:	2b28      	cmp	r3, #40	; 0x28
 80044d4:	d127      	bne.n	8004526 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	089b      	lsrs	r3, r3, #2
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80044f2:	2301      	movs	r3, #1
 80044f4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	09db      	lsrs	r3, r3, #7
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d103      	bne.n	800450a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	81bb      	strh	r3, [r7, #12]
 8004508:	e002      	b.n	8004510 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004518:	89ba      	ldrh	r2, [r7, #12]
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	4619      	mov	r1, r3
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff f940 	bl	80037a4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004524:	e00e      	b.n	8004544 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004526:	2300      	movs	r3, #0
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004544:	bf00      	nop
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800456a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800456c:	2300      	movs	r3, #0
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	60bb      	str	r3, [r7, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004598:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a8:	d172      	bne.n	8004690 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	2b22      	cmp	r3, #34	; 0x22
 80045ae:	d002      	beq.n	80045b6 <I2C_Slave_STOPF+0x6a>
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	2b2a      	cmp	r3, #42	; 0x2a
 80045b4:	d135      	bne.n	8004622 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	b29a      	uxth	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f043 0204 	orr.w	r2, r3, #4
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fe f887 	bl	8002702 <HAL_DMA_GetState>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d049      	beq.n	800468e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	4a69      	ldr	r2, [pc, #420]	; (80047a4 <I2C_Slave_STOPF+0x258>)
 8004600:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	4618      	mov	r0, r3
 8004608:	f7fe f859 	bl	80026be <HAL_DMA_Abort_IT>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d03d      	beq.n	800468e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800461c:	4610      	mov	r0, r2
 800461e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004620:	e035      	b.n	800468e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	b29a      	uxth	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f043 0204 	orr.w	r2, r3, #4
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004654:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe f851 	bl	8002702 <HAL_DMA_GetState>
 8004660:	4603      	mov	r3, r0
 8004662:	2b01      	cmp	r3, #1
 8004664:	d014      	beq.n	8004690 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466a:	4a4e      	ldr	r2, [pc, #312]	; (80047a4 <I2C_Slave_STOPF+0x258>)
 800466c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe f823 	bl	80026be <HAL_DMA_Abort_IT>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d008      	beq.n	8004690 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004688:	4610      	mov	r0, r2
 800468a:	4798      	blx	r3
 800468c:	e000      	b.n	8004690 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800468e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d03e      	beq.n	8004718 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d112      	bne.n	80046ce <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d8:	2b40      	cmp	r3, #64	; 0x40
 80046da:	d112      	bne.n	8004702 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004706:	b29b      	uxth	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	f043 0204 	orr.w	r2, r3, #4
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f8b3 	bl	800488c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004726:	e039      	b.n	800479c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004728:	7bfb      	ldrb	r3, [r7, #15]
 800472a:	2b2a      	cmp	r3, #42	; 0x2a
 800472c:	d109      	bne.n	8004742 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2228      	movs	r2, #40	; 0x28
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7ff f827 	bl	8003790 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b28      	cmp	r3, #40	; 0x28
 800474c:	d111      	bne.n	8004772 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a15      	ldr	r2, [pc, #84]	; (80047a8 <I2C_Slave_STOPF+0x25c>)
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff f828 	bl	80037c0 <HAL_I2C_ListenCpltCallback>
}
 8004770:	e014      	b.n	800479c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	2b22      	cmp	r3, #34	; 0x22
 8004778:	d002      	beq.n	8004780 <I2C_Slave_STOPF+0x234>
 800477a:	7bfb      	ldrb	r3, [r7, #15]
 800477c:	2b22      	cmp	r3, #34	; 0x22
 800477e:	d10d      	bne.n	800479c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fe fffa 	bl	8003790 <HAL_I2C_SlaveRxCpltCallback>
}
 800479c:	bf00      	nop
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	08004ded 	.word	0x08004ded
 80047a8:	ffff0000 	.word	0xffff0000

080047ac <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ba:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d002      	beq.n	80047ce <I2C_Slave_AF+0x22>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	d129      	bne.n	8004822 <I2C_Slave_AF+0x76>
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
 80047d0:	2b28      	cmp	r3, #40	; 0x28
 80047d2:	d126      	bne.n	8004822 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a2c      	ldr	r2, [pc, #176]	; (8004888 <I2C_Slave_AF+0xdc>)
 80047d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047e8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047f2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004802:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fe ffd0 	bl	80037c0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004820:	e02e      	b.n	8004880 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004822:	7bfb      	ldrb	r3, [r7, #15]
 8004824:	2b21      	cmp	r3, #33	; 0x21
 8004826:	d126      	bne.n	8004876 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a17      	ldr	r2, [pc, #92]	; (8004888 <I2C_Slave_AF+0xdc>)
 800482c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2221      	movs	r2, #33	; 0x21
 8004832:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2220      	movs	r2, #32
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004852:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800485c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fe ff84 	bl	800377c <HAL_I2C_SlaveTxCpltCallback>
}
 8004874:	e004      	b.n	8004880 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800487e:	615a      	str	r2, [r3, #20]
}
 8004880:	bf00      	nop
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	ffff0000 	.word	0xffff0000

0800488c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80048a4:	7bbb      	ldrb	r3, [r7, #14]
 80048a6:	2b10      	cmp	r3, #16
 80048a8:	d002      	beq.n	80048b0 <I2C_ITError+0x24>
 80048aa:	7bbb      	ldrb	r3, [r7, #14]
 80048ac:	2b40      	cmp	r3, #64	; 0x40
 80048ae:	d10a      	bne.n	80048c6 <I2C_ITError+0x3a>
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	2b22      	cmp	r3, #34	; 0x22
 80048b4:	d107      	bne.n	80048c6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048c4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048cc:	2b28      	cmp	r3, #40	; 0x28
 80048ce:	d107      	bne.n	80048e0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2228      	movs	r2, #40	; 0x28
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048de:	e015      	b.n	800490c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ee:	d00a      	beq.n	8004906 <I2C_ITError+0x7a>
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	2b60      	cmp	r3, #96	; 0x60
 80048f4:	d007      	beq.n	8004906 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800491a:	d162      	bne.n	80049e2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800492a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004930:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b01      	cmp	r3, #1
 8004938:	d020      	beq.n	800497c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493e:	4a6a      	ldr	r2, [pc, #424]	; (8004ae8 <I2C_ITError+0x25c>)
 8004940:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004946:	4618      	mov	r0, r3
 8004948:	f7fd feb9 	bl	80026be <HAL_DMA_Abort_IT>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 8089 	beq.w	8004a66 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0201 	bic.w	r2, r2, #1
 8004962:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004976:	4610      	mov	r0, r2
 8004978:	4798      	blx	r3
 800497a:	e074      	b.n	8004a66 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	4a59      	ldr	r2, [pc, #356]	; (8004ae8 <I2C_ITError+0x25c>)
 8004982:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	4618      	mov	r0, r3
 800498a:	f7fd fe98 	bl	80026be <HAL_DMA_Abort_IT>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d068      	beq.n	8004a66 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499e:	2b40      	cmp	r3, #64	; 0x40
 80049a0:	d10b      	bne.n	80049ba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0201 	bic.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049dc:	4610      	mov	r0, r2
 80049de:	4798      	blx	r3
 80049e0:	e041      	b.n	8004a66 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b60      	cmp	r3, #96	; 0x60
 80049ec:	d125      	bne.n	8004a3a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a06:	2b40      	cmp	r3, #64	; 0x40
 8004a08:	d10b      	bne.n	8004a22 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0201 	bic.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fe feec 	bl	8003810 <HAL_I2C_AbortCpltCallback>
 8004a38:	e015      	b.n	8004a66 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a44:	2b40      	cmp	r3, #64	; 0x40
 8004a46:	d10b      	bne.n	8004a60 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691a      	ldr	r2, [r3, #16]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7fe fecb 	bl	80037fc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10e      	bne.n	8004a94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d109      	bne.n	8004a94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d104      	bne.n	8004a94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d007      	beq.n	8004aa4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004aa2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aaa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d113      	bne.n	8004ae0 <I2C_ITError+0x254>
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	2b28      	cmp	r3, #40	; 0x28
 8004abc:	d110      	bne.n	8004ae0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a0a      	ldr	r2, [pc, #40]	; (8004aec <I2C_ITError+0x260>)
 8004ac2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7fe fe70 	bl	80037c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ae0:	bf00      	nop
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	08004ded 	.word	0x08004ded
 8004aec:	ffff0000 	.word	0xffff0000

08004af0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	4608      	mov	r0, r1
 8004afa:	4611      	mov	r1, r2
 8004afc:	461a      	mov	r2, r3
 8004afe:	4603      	mov	r3, r0
 8004b00:	817b      	strh	r3, [r7, #10]
 8004b02:	460b      	mov	r3, r1
 8004b04:	813b      	strh	r3, [r7, #8]
 8004b06:	4613      	mov	r3, r2
 8004b08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 fa08 	bl	8004f3c <I2C_WaitOnFlagUntilTimeout>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00d      	beq.n	8004b4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b40:	d103      	bne.n	8004b4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e05f      	b.n	8004c0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b4e:	897b      	ldrh	r3, [r7, #10]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	461a      	mov	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	6a3a      	ldr	r2, [r7, #32]
 8004b62:	492d      	ldr	r1, [pc, #180]	; (8004c18 <I2C_RequestMemoryWrite+0x128>)
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 fa40 	bl	8004fea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e04c      	b.n	8004c0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8c:	6a39      	ldr	r1, [r7, #32]
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 faaa 	bl	80050e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00d      	beq.n	8004bb6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d107      	bne.n	8004bb2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e02b      	b.n	8004c0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d105      	bne.n	8004bc8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bbc:	893b      	ldrh	r3, [r7, #8]
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	611a      	str	r2, [r3, #16]
 8004bc6:	e021      	b.n	8004c0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004bc8:	893b      	ldrh	r3, [r7, #8]
 8004bca:	0a1b      	lsrs	r3, r3, #8
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd8:	6a39      	ldr	r1, [r7, #32]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fa84 	bl	80050e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00d      	beq.n	8004c02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d107      	bne.n	8004bfe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e005      	b.n	8004c0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c02:	893b      	ldrh	r3, [r7, #8]
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	00010002 	.word	0x00010002

08004c1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	4608      	mov	r0, r1
 8004c26:	4611      	mov	r1, r2
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	817b      	strh	r3, [r7, #10]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	813b      	strh	r3, [r7, #8]
 8004c32:	4613      	mov	r3, r2
 8004c34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 f96a 	bl	8004f3c <I2C_WaitOnFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00d      	beq.n	8004c8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7c:	d103      	bne.n	8004c86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e0aa      	b.n	8004de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c8a:	897b      	ldrh	r3, [r7, #10]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	6a3a      	ldr	r2, [r7, #32]
 8004c9e:	4952      	ldr	r1, [pc, #328]	; (8004de8 <I2C_RequestMemoryRead+0x1cc>)
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 f9a2 	bl	8004fea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e097      	b.n	8004de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc8:	6a39      	ldr	r1, [r7, #32]
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 fa0c 	bl	80050e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00d      	beq.n	8004cf2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d107      	bne.n	8004cee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e076      	b.n	8004de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d105      	bne.n	8004d04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cf8:	893b      	ldrh	r3, [r7, #8]
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	611a      	str	r2, [r3, #16]
 8004d02:	e021      	b.n	8004d48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d04:	893b      	ldrh	r3, [r7, #8]
 8004d06:	0a1b      	lsrs	r3, r3, #8
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d14:	6a39      	ldr	r1, [r7, #32]
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f9e6 	bl	80050e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00d      	beq.n	8004d3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d107      	bne.n	8004d3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e050      	b.n	8004de0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d3e:	893b      	ldrh	r3, [r7, #8]
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d4a:	6a39      	ldr	r1, [r7, #32]
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 f9cb 	bl	80050e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00d      	beq.n	8004d74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d107      	bne.n	8004d70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e035      	b.n	8004de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 f8d3 	bl	8004f3c <I2C_WaitOnFlagUntilTimeout>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00d      	beq.n	8004db8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004daa:	d103      	bne.n	8004db4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004db2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e013      	b.n	8004de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004db8:	897b      	ldrh	r3, [r7, #10]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	6a3a      	ldr	r2, [r7, #32]
 8004dcc:	4906      	ldr	r1, [pc, #24]	; (8004de8 <I2C_RequestMemoryRead+0x1cc>)
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 f90b 	bl	8004fea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	00010002 	.word	0x00010002

08004dec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e04:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e06:	4b4b      	ldr	r3, [pc, #300]	; (8004f34 <I2C_DMAAbort+0x148>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	08db      	lsrs	r3, r3, #3
 8004e0c:	4a4a      	ldr	r2, [pc, #296]	; (8004f38 <I2C_DMAAbort+0x14c>)
 8004e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e12:	0a1a      	lsrs	r2, r3, #8
 8004e14:	4613      	mov	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	00da      	lsls	r2, r3, #3
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f043 0220 	orr.w	r2, r3, #32
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004e32:	e00a      	b.n	8004e4a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e48:	d0ea      	beq.n	8004e20 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e56:	2200      	movs	r2, #0
 8004e58:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	2200      	movs	r2, #0
 8004e68:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e78:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0201 	bic.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b60      	cmp	r3, #96	; 0x60
 8004eba:	d10e      	bne.n	8004eda <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ed2:	6978      	ldr	r0, [r7, #20]
 8004ed4:	f7fe fc9c 	bl	8003810 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ed8:	e027      	b.n	8004f2a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004eda:	7cfb      	ldrb	r3, [r7, #19]
 8004edc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ee0:	2b28      	cmp	r3, #40	; 0x28
 8004ee2:	d117      	bne.n	8004f14 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0201 	orr.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f02:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2200      	movs	r2, #0
 8004f08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2228      	movs	r2, #40	; 0x28
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f12:	e007      	b.n	8004f24 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004f24:	6978      	ldr	r0, [r7, #20]
 8004f26:	f7fe fc69 	bl	80037fc <HAL_I2C_ErrorCallback>
}
 8004f2a:	bf00      	nop
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000000 	.word	0x20000000
 8004f38:	14f8b589 	.word	0x14f8b589

08004f3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f4c:	e025      	b.n	8004f9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f54:	d021      	beq.n	8004f9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f56:	f7fd fa71 	bl	800243c <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d302      	bcc.n	8004f6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d116      	bne.n	8004f9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	f043 0220 	orr.w	r2, r3, #32
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e023      	b.n	8004fe2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	0c1b      	lsrs	r3, r3, #16
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d10d      	bne.n	8004fc0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	43da      	mvns	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	bf0c      	ite	eq
 8004fb6:	2301      	moveq	r3, #1
 8004fb8:	2300      	movne	r3, #0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	e00c      	b.n	8004fda <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	43da      	mvns	r2, r3
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	bf0c      	ite	eq
 8004fd2:	2301      	moveq	r3, #1
 8004fd4:	2300      	movne	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	461a      	mov	r2, r3
 8004fda:	79fb      	ldrb	r3, [r7, #7]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d0b6      	beq.n	8004f4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	607a      	str	r2, [r7, #4]
 8004ff6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ff8:	e051      	b.n	800509e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005008:	d123      	bne.n	8005052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005018:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005022:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2220      	movs	r2, #32
 800502e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	f043 0204 	orr.w	r2, r3, #4
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e046      	b.n	80050e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005058:	d021      	beq.n	800509e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800505a:	f7fd f9ef 	bl	800243c <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	429a      	cmp	r2, r3
 8005068:	d302      	bcc.n	8005070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d116      	bne.n	800509e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	f043 0220 	orr.w	r2, r3, #32
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e020      	b.n	80050e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	0c1b      	lsrs	r3, r3, #16
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d10c      	bne.n	80050c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	43da      	mvns	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4013      	ands	r3, r2
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	bf14      	ite	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	2300      	moveq	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	e00b      	b.n	80050da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	43da      	mvns	r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	4013      	ands	r3, r2
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	bf14      	ite	ne
 80050d4:	2301      	movne	r3, #1
 80050d6:	2300      	moveq	r3, #0
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d18d      	bne.n	8004ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050f4:	e02d      	b.n	8005152 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 f900 	bl	80052fc <I2C_IsAcknowledgeFailed>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e02d      	b.n	8005162 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510c:	d021      	beq.n	8005152 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800510e:	f7fd f995 	bl	800243c <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	429a      	cmp	r2, r3
 800511c:	d302      	bcc.n	8005124 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d116      	bne.n	8005152 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2220      	movs	r2, #32
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	f043 0220 	orr.w	r2, r3, #32
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e007      	b.n	8005162 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515c:	2b80      	cmp	r3, #128	; 0x80
 800515e:	d1ca      	bne.n	80050f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005176:	e02d      	b.n	80051d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f8bf 	bl	80052fc <I2C_IsAcknowledgeFailed>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e02d      	b.n	80051e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518e:	d021      	beq.n	80051d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005190:	f7fd f954 	bl	800243c <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	429a      	cmp	r2, r3
 800519e:	d302      	bcc.n	80051a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d116      	bne.n	80051d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	f043 0220 	orr.w	r2, r3, #32
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e007      	b.n	80051e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d1ca      	bne.n	8005178 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80051f8:	4b13      	ldr	r3, [pc, #76]	; (8005248 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	08db      	lsrs	r3, r3, #3
 80051fe:	4a13      	ldr	r2, [pc, #76]	; (800524c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005200:	fba2 2303 	umull	r2, r3, r2, r3
 8005204:	0a1a      	lsrs	r2, r3, #8
 8005206:	4613      	mov	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3b01      	subs	r3, #1
 8005212:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d107      	bne.n	800522a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f043 0220 	orr.w	r2, r3, #32
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e008      	b.n	800523c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005238:	d0e9      	beq.n	800520e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	20000000 	.word	0x20000000
 800524c:	14f8b589 	.word	0x14f8b589

08005250 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800525c:	e042      	b.n	80052e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b10      	cmp	r3, #16
 800526a:	d119      	bne.n	80052a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0210 	mvn.w	r2, #16
 8005274:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e029      	b.n	80052f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a0:	f7fd f8cc 	bl	800243c <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d302      	bcc.n	80052b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d116      	bne.n	80052e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d0:	f043 0220 	orr.w	r2, r3, #32
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e007      	b.n	80052f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ee:	2b40      	cmp	r3, #64	; 0x40
 80052f0:	d1b5      	bne.n	800525e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800530e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005312:	d11b      	bne.n	800534c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800531c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2220      	movs	r2, #32
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	f043 0204 	orr.w	r2, r3, #4
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e000      	b.n	800534e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800536a:	d103      	bne.n	8005374 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005372:	e007      	b.n	8005384 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800537c:	d102      	bne.n	8005384 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2208      	movs	r2, #8
 8005382:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e267      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d075      	beq.n	800549a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053ae:	4b88      	ldr	r3, [pc, #544]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 030c 	and.w	r3, r3, #12
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d00c      	beq.n	80053d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ba:	4b85      	ldr	r3, [pc, #532]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d112      	bne.n	80053ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053c6:	4b82      	ldr	r3, [pc, #520]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053d2:	d10b      	bne.n	80053ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d4:	4b7e      	ldr	r3, [pc, #504]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d05b      	beq.n	8005498 <HAL_RCC_OscConfig+0x108>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d157      	bne.n	8005498 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e242      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f4:	d106      	bne.n	8005404 <HAL_RCC_OscConfig+0x74>
 80053f6:	4b76      	ldr	r3, [pc, #472]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a75      	ldr	r2, [pc, #468]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80053fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	e01d      	b.n	8005440 <HAL_RCC_OscConfig+0xb0>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800540c:	d10c      	bne.n	8005428 <HAL_RCC_OscConfig+0x98>
 800540e:	4b70      	ldr	r3, [pc, #448]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a6f      	ldr	r2, [pc, #444]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 8005414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	4b6d      	ldr	r3, [pc, #436]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a6c      	ldr	r2, [pc, #432]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 8005420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	e00b      	b.n	8005440 <HAL_RCC_OscConfig+0xb0>
 8005428:	4b69      	ldr	r3, [pc, #420]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a68      	ldr	r2, [pc, #416]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 800542e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	4b66      	ldr	r3, [pc, #408]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a65      	ldr	r2, [pc, #404]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 800543a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800543e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d013      	beq.n	8005470 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005448:	f7fc fff8 	bl	800243c <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005450:	f7fc fff4 	bl	800243c <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b64      	cmp	r3, #100	; 0x64
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e207      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005462:	4b5b      	ldr	r3, [pc, #364]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0f0      	beq.n	8005450 <HAL_RCC_OscConfig+0xc0>
 800546e:	e014      	b.n	800549a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005470:	f7fc ffe4 	bl	800243c <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005478:	f7fc ffe0 	bl	800243c <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b64      	cmp	r3, #100	; 0x64
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e1f3      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800548a:	4b51      	ldr	r3, [pc, #324]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1f0      	bne.n	8005478 <HAL_RCC_OscConfig+0xe8>
 8005496:	e000      	b.n	800549a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d063      	beq.n	800556e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054a6:	4b4a      	ldr	r3, [pc, #296]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 030c 	and.w	r3, r3, #12
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00b      	beq.n	80054ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054b2:	4b47      	ldr	r3, [pc, #284]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d11c      	bne.n	80054f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054be:	4b44      	ldr	r3, [pc, #272]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d116      	bne.n	80054f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ca:	4b41      	ldr	r3, [pc, #260]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d005      	beq.n	80054e2 <HAL_RCC_OscConfig+0x152>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d001      	beq.n	80054e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e1c7      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e2:	4b3b      	ldr	r3, [pc, #236]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4937      	ldr	r1, [pc, #220]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054f6:	e03a      	b.n	800556e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d020      	beq.n	8005542 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005500:	4b34      	ldr	r3, [pc, #208]	; (80055d4 <HAL_RCC_OscConfig+0x244>)
 8005502:	2201      	movs	r2, #1
 8005504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005506:	f7fc ff99 	bl	800243c <HAL_GetTick>
 800550a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800550c:	e008      	b.n	8005520 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800550e:	f7fc ff95 	bl	800243c <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e1a8      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005520:	4b2b      	ldr	r3, [pc, #172]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0f0      	beq.n	800550e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552c:	4b28      	ldr	r3, [pc, #160]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	00db      	lsls	r3, r3, #3
 800553a:	4925      	ldr	r1, [pc, #148]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 800553c:	4313      	orrs	r3, r2
 800553e:	600b      	str	r3, [r1, #0]
 8005540:	e015      	b.n	800556e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005542:	4b24      	ldr	r3, [pc, #144]	; (80055d4 <HAL_RCC_OscConfig+0x244>)
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005548:	f7fc ff78 	bl	800243c <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005550:	f7fc ff74 	bl	800243c <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e187      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005562:	4b1b      	ldr	r3, [pc, #108]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1f0      	bne.n	8005550 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d036      	beq.n	80055e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d016      	beq.n	80055b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005582:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <HAL_RCC_OscConfig+0x248>)
 8005584:	2201      	movs	r2, #1
 8005586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005588:	f7fc ff58 	bl	800243c <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005590:	f7fc ff54 	bl	800243c <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e167      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055a2:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80055a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0f0      	beq.n	8005590 <HAL_RCC_OscConfig+0x200>
 80055ae:	e01b      	b.n	80055e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055b0:	4b09      	ldr	r3, [pc, #36]	; (80055d8 <HAL_RCC_OscConfig+0x248>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055b6:	f7fc ff41 	bl	800243c <HAL_GetTick>
 80055ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055bc:	e00e      	b.n	80055dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055be:	f7fc ff3d 	bl	800243c <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d907      	bls.n	80055dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e150      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
 80055d0:	40023800 	.word	0x40023800
 80055d4:	42470000 	.word	0x42470000
 80055d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055dc:	4b88      	ldr	r3, [pc, #544]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 80055de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1ea      	bne.n	80055be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 8097 	beq.w	8005724 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055f6:	2300      	movs	r3, #0
 80055f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055fa:	4b81      	ldr	r3, [pc, #516]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10f      	bne.n	8005626 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005606:	2300      	movs	r3, #0
 8005608:	60bb      	str	r3, [r7, #8]
 800560a:	4b7d      	ldr	r3, [pc, #500]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	4a7c      	ldr	r2, [pc, #496]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005614:	6413      	str	r3, [r2, #64]	; 0x40
 8005616:	4b7a      	ldr	r3, [pc, #488]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800561e:	60bb      	str	r3, [r7, #8]
 8005620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005622:	2301      	movs	r3, #1
 8005624:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005626:	4b77      	ldr	r3, [pc, #476]	; (8005804 <HAL_RCC_OscConfig+0x474>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562e:	2b00      	cmp	r3, #0
 8005630:	d118      	bne.n	8005664 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005632:	4b74      	ldr	r3, [pc, #464]	; (8005804 <HAL_RCC_OscConfig+0x474>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a73      	ldr	r2, [pc, #460]	; (8005804 <HAL_RCC_OscConfig+0x474>)
 8005638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800563e:	f7fc fefd 	bl	800243c <HAL_GetTick>
 8005642:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005644:	e008      	b.n	8005658 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005646:	f7fc fef9 	bl	800243c <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e10c      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005658:	4b6a      	ldr	r3, [pc, #424]	; (8005804 <HAL_RCC_OscConfig+0x474>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0f0      	beq.n	8005646 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d106      	bne.n	800567a <HAL_RCC_OscConfig+0x2ea>
 800566c:	4b64      	ldr	r3, [pc, #400]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	4a63      	ldr	r2, [pc, #396]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005672:	f043 0301 	orr.w	r3, r3, #1
 8005676:	6713      	str	r3, [r2, #112]	; 0x70
 8005678:	e01c      	b.n	80056b4 <HAL_RCC_OscConfig+0x324>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2b05      	cmp	r3, #5
 8005680:	d10c      	bne.n	800569c <HAL_RCC_OscConfig+0x30c>
 8005682:	4b5f      	ldr	r3, [pc, #380]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	4a5e      	ldr	r2, [pc, #376]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005688:	f043 0304 	orr.w	r3, r3, #4
 800568c:	6713      	str	r3, [r2, #112]	; 0x70
 800568e:	4b5c      	ldr	r3, [pc, #368]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005692:	4a5b      	ldr	r2, [pc, #364]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005694:	f043 0301 	orr.w	r3, r3, #1
 8005698:	6713      	str	r3, [r2, #112]	; 0x70
 800569a:	e00b      	b.n	80056b4 <HAL_RCC_OscConfig+0x324>
 800569c:	4b58      	ldr	r3, [pc, #352]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 800569e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a0:	4a57      	ldr	r2, [pc, #348]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 80056a2:	f023 0301 	bic.w	r3, r3, #1
 80056a6:	6713      	str	r3, [r2, #112]	; 0x70
 80056a8:	4b55      	ldr	r3, [pc, #340]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 80056aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ac:	4a54      	ldr	r2, [pc, #336]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 80056ae:	f023 0304 	bic.w	r3, r3, #4
 80056b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d015      	beq.n	80056e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056bc:	f7fc febe 	bl	800243c <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c2:	e00a      	b.n	80056da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056c4:	f7fc feba 	bl	800243c <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e0cb      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056da:	4b49      	ldr	r3, [pc, #292]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 80056dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0ee      	beq.n	80056c4 <HAL_RCC_OscConfig+0x334>
 80056e6:	e014      	b.n	8005712 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056e8:	f7fc fea8 	bl	800243c <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ee:	e00a      	b.n	8005706 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f0:	f7fc fea4 	bl	800243c <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e0b5      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005706:	4b3e      	ldr	r3, [pc, #248]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1ee      	bne.n	80056f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005712:	7dfb      	ldrb	r3, [r7, #23]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d105      	bne.n	8005724 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005718:	4b39      	ldr	r3, [pc, #228]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	4a38      	ldr	r2, [pc, #224]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 800571e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005722:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 80a1 	beq.w	8005870 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800572e:	4b34      	ldr	r3, [pc, #208]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 030c 	and.w	r3, r3, #12
 8005736:	2b08      	cmp	r3, #8
 8005738:	d05c      	beq.n	80057f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d141      	bne.n	80057c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005742:	4b31      	ldr	r3, [pc, #196]	; (8005808 <HAL_RCC_OscConfig+0x478>)
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005748:	f7fc fe78 	bl	800243c <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800574e:	e008      	b.n	8005762 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005750:	f7fc fe74 	bl	800243c <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e087      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005762:	4b27      	ldr	r3, [pc, #156]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1f0      	bne.n	8005750 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69da      	ldr	r2, [r3, #28]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	019b      	lsls	r3, r3, #6
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005784:	085b      	lsrs	r3, r3, #1
 8005786:	3b01      	subs	r3, #1
 8005788:	041b      	lsls	r3, r3, #16
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	061b      	lsls	r3, r3, #24
 8005792:	491b      	ldr	r1, [pc, #108]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005794:	4313      	orrs	r3, r2
 8005796:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005798:	4b1b      	ldr	r3, [pc, #108]	; (8005808 <HAL_RCC_OscConfig+0x478>)
 800579a:	2201      	movs	r2, #1
 800579c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800579e:	f7fc fe4d 	bl	800243c <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a6:	f7fc fe49 	bl	800243c <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e05c      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b8:	4b11      	ldr	r3, [pc, #68]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f0      	beq.n	80057a6 <HAL_RCC_OscConfig+0x416>
 80057c4:	e054      	b.n	8005870 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c6:	4b10      	ldr	r3, [pc, #64]	; (8005808 <HAL_RCC_OscConfig+0x478>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057cc:	f7fc fe36 	bl	800243c <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d4:	f7fc fe32 	bl	800243c <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e045      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e6:	4b06      	ldr	r3, [pc, #24]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f0      	bne.n	80057d4 <HAL_RCC_OscConfig+0x444>
 80057f2:	e03d      	b.n	8005870 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d107      	bne.n	800580c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e038      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
 8005800:	40023800 	.word	0x40023800
 8005804:	40007000 	.word	0x40007000
 8005808:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800580c:	4b1b      	ldr	r3, [pc, #108]	; (800587c <HAL_RCC_OscConfig+0x4ec>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d028      	beq.n	800586c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005824:	429a      	cmp	r2, r3
 8005826:	d121      	bne.n	800586c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005832:	429a      	cmp	r2, r3
 8005834:	d11a      	bne.n	800586c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800583c:	4013      	ands	r3, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005842:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005844:	4293      	cmp	r3, r2
 8005846:	d111      	bne.n	800586c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005852:	085b      	lsrs	r3, r3, #1
 8005854:	3b01      	subs	r3, #1
 8005856:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005858:	429a      	cmp	r2, r3
 800585a:	d107      	bne.n	800586c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005868:	429a      	cmp	r2, r3
 800586a:	d001      	beq.n	8005870 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	40023800 	.word	0x40023800

08005880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e0cc      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005894:	4b68      	ldr	r3, [pc, #416]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d90c      	bls.n	80058bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a2:	4b65      	ldr	r3, [pc, #404]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058aa:	4b63      	ldr	r3, [pc, #396]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d001      	beq.n	80058bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e0b8      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d020      	beq.n	800590a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d005      	beq.n	80058e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058d4:	4b59      	ldr	r3, [pc, #356]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	4a58      	ldr	r2, [pc, #352]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058ec:	4b53      	ldr	r3, [pc, #332]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	4a52      	ldr	r2, [pc, #328]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058f8:	4b50      	ldr	r3, [pc, #320]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	494d      	ldr	r1, [pc, #308]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	4313      	orrs	r3, r2
 8005908:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d044      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d107      	bne.n	800592e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800591e:	4b47      	ldr	r3, [pc, #284]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d119      	bne.n	800595e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e07f      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2b02      	cmp	r3, #2
 8005934:	d003      	beq.n	800593e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800593a:	2b03      	cmp	r3, #3
 800593c:	d107      	bne.n	800594e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800593e:	4b3f      	ldr	r3, [pc, #252]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d109      	bne.n	800595e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e06f      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800594e:	4b3b      	ldr	r3, [pc, #236]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e067      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800595e:	4b37      	ldr	r3, [pc, #220]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f023 0203 	bic.w	r2, r3, #3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	4934      	ldr	r1, [pc, #208]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 800596c:	4313      	orrs	r3, r2
 800596e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005970:	f7fc fd64 	bl	800243c <HAL_GetTick>
 8005974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005976:	e00a      	b.n	800598e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005978:	f7fc fd60 	bl	800243c <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	f241 3288 	movw	r2, #5000	; 0x1388
 8005986:	4293      	cmp	r3, r2
 8005988:	d901      	bls.n	800598e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e04f      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800598e:	4b2b      	ldr	r3, [pc, #172]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 020c 	and.w	r2, r3, #12
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	429a      	cmp	r2, r3
 800599e:	d1eb      	bne.n	8005978 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059a0:	4b25      	ldr	r3, [pc, #148]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d20c      	bcs.n	80059c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ae:	4b22      	ldr	r3, [pc, #136]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b6:	4b20      	ldr	r3, [pc, #128]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d001      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e032      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059d4:	4b19      	ldr	r3, [pc, #100]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	4916      	ldr	r1, [pc, #88]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059f2:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	490e      	ldr	r1, [pc, #56]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a06:	f000 f821 	bl	8005a4c <HAL_RCC_GetSysClockFreq>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	091b      	lsrs	r3, r3, #4
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	490a      	ldr	r1, [pc, #40]	; (8005a40 <HAL_RCC_ClockConfig+0x1c0>)
 8005a18:	5ccb      	ldrb	r3, [r1, r3]
 8005a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1e:	4a09      	ldr	r2, [pc, #36]	; (8005a44 <HAL_RCC_ClockConfig+0x1c4>)
 8005a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a22:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <HAL_RCC_ClockConfig+0x1c8>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fc fcc4 	bl	80023b4 <HAL_InitTick>

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	40023c00 	.word	0x40023c00
 8005a3c:	40023800 	.word	0x40023800
 8005a40:	08007f6c 	.word	0x08007f6c
 8005a44:	20000000 	.word	0x20000000
 8005a48:	20000004 	.word	0x20000004

08005a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a50:	b094      	sub	sp, #80	; 0x50
 8005a52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	647b      	str	r3, [r7, #68]	; 0x44
 8005a58:	2300      	movs	r3, #0
 8005a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a64:	4b79      	ldr	r3, [pc, #484]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 030c 	and.w	r3, r3, #12
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d00d      	beq.n	8005a8c <HAL_RCC_GetSysClockFreq+0x40>
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	f200 80e1 	bhi.w	8005c38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <HAL_RCC_GetSysClockFreq+0x34>
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d003      	beq.n	8005a86 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a7e:	e0db      	b.n	8005c38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a80:	4b73      	ldr	r3, [pc, #460]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a84:	e0db      	b.n	8005c3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a86:	4b73      	ldr	r3, [pc, #460]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a8a:	e0d8      	b.n	8005c3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a8c:	4b6f      	ldr	r3, [pc, #444]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a96:	4b6d      	ldr	r3, [pc, #436]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d063      	beq.n	8005b6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aa2:	4b6a      	ldr	r3, [pc, #424]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	099b      	lsrs	r3, r3, #6
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005aac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005abe:	4622      	mov	r2, r4
 8005ac0:	462b      	mov	r3, r5
 8005ac2:	f04f 0000 	mov.w	r0, #0
 8005ac6:	f04f 0100 	mov.w	r1, #0
 8005aca:	0159      	lsls	r1, r3, #5
 8005acc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ad0:	0150      	lsls	r0, r2, #5
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	1a51      	subs	r1, r2, r1
 8005ada:	6139      	str	r1, [r7, #16]
 8005adc:	4629      	mov	r1, r5
 8005ade:	eb63 0301 	sbc.w	r3, r3, r1
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	f04f 0300 	mov.w	r3, #0
 8005aec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005af0:	4659      	mov	r1, fp
 8005af2:	018b      	lsls	r3, r1, #6
 8005af4:	4651      	mov	r1, sl
 8005af6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005afa:	4651      	mov	r1, sl
 8005afc:	018a      	lsls	r2, r1, #6
 8005afe:	4651      	mov	r1, sl
 8005b00:	ebb2 0801 	subs.w	r8, r2, r1
 8005b04:	4659      	mov	r1, fp
 8005b06:	eb63 0901 	sbc.w	r9, r3, r1
 8005b0a:	f04f 0200 	mov.w	r2, #0
 8005b0e:	f04f 0300 	mov.w	r3, #0
 8005b12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b1e:	4690      	mov	r8, r2
 8005b20:	4699      	mov	r9, r3
 8005b22:	4623      	mov	r3, r4
 8005b24:	eb18 0303 	adds.w	r3, r8, r3
 8005b28:	60bb      	str	r3, [r7, #8]
 8005b2a:	462b      	mov	r3, r5
 8005b2c:	eb49 0303 	adc.w	r3, r9, r3
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	f04f 0200 	mov.w	r2, #0
 8005b36:	f04f 0300 	mov.w	r3, #0
 8005b3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b3e:	4629      	mov	r1, r5
 8005b40:	024b      	lsls	r3, r1, #9
 8005b42:	4621      	mov	r1, r4
 8005b44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b48:	4621      	mov	r1, r4
 8005b4a:	024a      	lsls	r2, r1, #9
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b52:	2200      	movs	r2, #0
 8005b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b5c:	f7fb f854 	bl	8000c08 <__aeabi_uldivmod>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4613      	mov	r3, r2
 8005b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b68:	e058      	b.n	8005c1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b6a:	4b38      	ldr	r3, [pc, #224]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	099b      	lsrs	r3, r3, #6
 8005b70:	2200      	movs	r2, #0
 8005b72:	4618      	mov	r0, r3
 8005b74:	4611      	mov	r1, r2
 8005b76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b7a:	623b      	str	r3, [r7, #32]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b84:	4642      	mov	r2, r8
 8005b86:	464b      	mov	r3, r9
 8005b88:	f04f 0000 	mov.w	r0, #0
 8005b8c:	f04f 0100 	mov.w	r1, #0
 8005b90:	0159      	lsls	r1, r3, #5
 8005b92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b96:	0150      	lsls	r0, r2, #5
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4641      	mov	r1, r8
 8005b9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	f04f 0300 	mov.w	r3, #0
 8005bb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bbc:	ebb2 040a 	subs.w	r4, r2, sl
 8005bc0:	eb63 050b 	sbc.w	r5, r3, fp
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	f04f 0300 	mov.w	r3, #0
 8005bcc:	00eb      	lsls	r3, r5, #3
 8005bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bd2:	00e2      	lsls	r2, r4, #3
 8005bd4:	4614      	mov	r4, r2
 8005bd6:	461d      	mov	r5, r3
 8005bd8:	4643      	mov	r3, r8
 8005bda:	18e3      	adds	r3, r4, r3
 8005bdc:	603b      	str	r3, [r7, #0]
 8005bde:	464b      	mov	r3, r9
 8005be0:	eb45 0303 	adc.w	r3, r5, r3
 8005be4:	607b      	str	r3, [r7, #4]
 8005be6:	f04f 0200 	mov.w	r2, #0
 8005bea:	f04f 0300 	mov.w	r3, #0
 8005bee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bf2:	4629      	mov	r1, r5
 8005bf4:	028b      	lsls	r3, r1, #10
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	028a      	lsls	r2, r1, #10
 8005c00:	4610      	mov	r0, r2
 8005c02:	4619      	mov	r1, r3
 8005c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c06:	2200      	movs	r2, #0
 8005c08:	61bb      	str	r3, [r7, #24]
 8005c0a:	61fa      	str	r2, [r7, #28]
 8005c0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c10:	f7fa fffa 	bl	8000c08 <__aeabi_uldivmod>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4613      	mov	r3, r2
 8005c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	0c1b      	lsrs	r3, r3, #16
 8005c22:	f003 0303 	and.w	r3, r3, #3
 8005c26:	3301      	adds	r3, #1
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c36:	e002      	b.n	8005c3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c38:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3750      	adds	r7, #80	; 0x50
 8005c44:	46bd      	mov	sp, r7
 8005c46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c4a:	bf00      	nop
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	00f42400 	.word	0x00f42400
 8005c54:	007a1200 	.word	0x007a1200

08005c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c5c:	4b03      	ldr	r3, [pc, #12]	; (8005c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	20000000 	.word	0x20000000

08005c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c74:	f7ff fff0 	bl	8005c58 <HAL_RCC_GetHCLKFreq>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	0a9b      	lsrs	r3, r3, #10
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	4903      	ldr	r1, [pc, #12]	; (8005c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c86:	5ccb      	ldrb	r3, [r1, r3]
 8005c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40023800 	.word	0x40023800
 8005c94:	08007f7c 	.word	0x08007f7c

08005c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c9c:	f7ff ffdc 	bl	8005c58 <HAL_RCC_GetHCLKFreq>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	0b5b      	lsrs	r3, r3, #13
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	4903      	ldr	r1, [pc, #12]	; (8005cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cae:	5ccb      	ldrb	r3, [r1, r3]
 8005cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	40023800 	.word	0x40023800
 8005cbc:	08007f7c 	.word	0x08007f7c

08005cc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e03f      	b.n	8005d52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fc f9a8 	bl	800203c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2224      	movs	r2, #36	; 0x24
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f929 	bl	8005f5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	695a      	ldr	r2, [r3, #20]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b08a      	sub	sp, #40	; 0x28
 8005d5e:	af02      	add	r7, sp, #8
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	603b      	str	r3, [r7, #0]
 8005d66:	4613      	mov	r3, r2
 8005d68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	d17c      	bne.n	8005e74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <HAL_UART_Transmit+0x2c>
 8005d80:	88fb      	ldrh	r3, [r7, #6]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e075      	b.n	8005e76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_UART_Transmit+0x3e>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e06e      	b.n	8005e76 <HAL_UART_Transmit+0x11c>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2221      	movs	r2, #33	; 0x21
 8005daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dae:	f7fc fb45 	bl	800243c <HAL_GetTick>
 8005db2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	88fa      	ldrh	r2, [r7, #6]
 8005db8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	88fa      	ldrh	r2, [r7, #6]
 8005dbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc8:	d108      	bne.n	8005ddc <HAL_UART_Transmit+0x82>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d104      	bne.n	8005ddc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	e003      	b.n	8005de4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005dec:	e02a      	b.n	8005e44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2200      	movs	r2, #0
 8005df6:	2180      	movs	r1, #128	; 0x80
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f840 	bl	8005e7e <UART_WaitOnFlagUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e036      	b.n	8005e76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10b      	bne.n	8005e26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	3302      	adds	r3, #2
 8005e22:	61bb      	str	r3, [r7, #24]
 8005e24:	e007      	b.n	8005e36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	781a      	ldrb	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	3301      	adds	r3, #1
 8005e34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1cf      	bne.n	8005dee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2200      	movs	r2, #0
 8005e56:	2140      	movs	r1, #64	; 0x40
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 f810 	bl	8005e7e <UART_WaitOnFlagUntilTimeout>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e006      	b.n	8005e76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	e000      	b.n	8005e76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e74:	2302      	movs	r3, #2
  }
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3720      	adds	r7, #32
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b090      	sub	sp, #64	; 0x40
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	603b      	str	r3, [r7, #0]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e8e:	e050      	b.n	8005f32 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e96:	d04c      	beq.n	8005f32 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d007      	beq.n	8005eae <UART_WaitOnFlagUntilTimeout+0x30>
 8005e9e:	f7fc facd 	bl	800243c <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d241      	bcs.n	8005f32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	330c      	adds	r3, #12
 8005eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	330c      	adds	r3, #12
 8005ecc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ece:	637a      	str	r2, [r7, #52]	; 0x34
 8005ed0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ed4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1e5      	bne.n	8005eae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3314      	adds	r3, #20
 8005ee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3314      	adds	r3, #20
 8005f00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f02:	623a      	str	r2, [r7, #32]
 8005f04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	69f9      	ldr	r1, [r7, #28]
 8005f08:	6a3a      	ldr	r2, [r7, #32]
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1e5      	bne.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e00f      	b.n	8005f52 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	bf0c      	ite	eq
 8005f42:	2301      	moveq	r3, #1
 8005f44:	2300      	movne	r3, #0
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	461a      	mov	r2, r3
 8005f4a:	79fb      	ldrb	r3, [r7, #7]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d09f      	beq.n	8005e90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3740      	adds	r7, #64	; 0x40
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f60:	b0c0      	sub	sp, #256	; 0x100
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f78:	68d9      	ldr	r1, [r3, #12]
 8005f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	ea40 0301 	orr.w	r3, r0, r1
 8005f84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fb4:	f021 010c 	bic.w	r1, r1, #12
 8005fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fc2:	430b      	orrs	r3, r1
 8005fc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd6:	6999      	ldr	r1, [r3, #24]
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	ea40 0301 	orr.w	r3, r0, r1
 8005fe2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	4b8f      	ldr	r3, [pc, #572]	; (8006228 <UART_SetConfig+0x2cc>)
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d005      	beq.n	8005ffc <UART_SetConfig+0xa0>
 8005ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	4b8d      	ldr	r3, [pc, #564]	; (800622c <UART_SetConfig+0x2d0>)
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d104      	bne.n	8006006 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ffc:	f7ff fe4c 	bl	8005c98 <HAL_RCC_GetPCLK2Freq>
 8006000:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006004:	e003      	b.n	800600e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006006:	f7ff fe33 	bl	8005c70 <HAL_RCC_GetPCLK1Freq>
 800600a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800600e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006018:	f040 810c 	bne.w	8006234 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800601c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006020:	2200      	movs	r2, #0
 8006022:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006026:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800602a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800602e:	4622      	mov	r2, r4
 8006030:	462b      	mov	r3, r5
 8006032:	1891      	adds	r1, r2, r2
 8006034:	65b9      	str	r1, [r7, #88]	; 0x58
 8006036:	415b      	adcs	r3, r3
 8006038:	65fb      	str	r3, [r7, #92]	; 0x5c
 800603a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800603e:	4621      	mov	r1, r4
 8006040:	eb12 0801 	adds.w	r8, r2, r1
 8006044:	4629      	mov	r1, r5
 8006046:	eb43 0901 	adc.w	r9, r3, r1
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006056:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800605a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800605e:	4690      	mov	r8, r2
 8006060:	4699      	mov	r9, r3
 8006062:	4623      	mov	r3, r4
 8006064:	eb18 0303 	adds.w	r3, r8, r3
 8006068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800606c:	462b      	mov	r3, r5
 800606e:	eb49 0303 	adc.w	r3, r9, r3
 8006072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006082:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006086:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800608a:	460b      	mov	r3, r1
 800608c:	18db      	adds	r3, r3, r3
 800608e:	653b      	str	r3, [r7, #80]	; 0x50
 8006090:	4613      	mov	r3, r2
 8006092:	eb42 0303 	adc.w	r3, r2, r3
 8006096:	657b      	str	r3, [r7, #84]	; 0x54
 8006098:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800609c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060a0:	f7fa fdb2 	bl	8000c08 <__aeabi_uldivmod>
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4b61      	ldr	r3, [pc, #388]	; (8006230 <UART_SetConfig+0x2d4>)
 80060aa:	fba3 2302 	umull	r2, r3, r3, r2
 80060ae:	095b      	lsrs	r3, r3, #5
 80060b0:	011c      	lsls	r4, r3, #4
 80060b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060b6:	2200      	movs	r2, #0
 80060b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80060c4:	4642      	mov	r2, r8
 80060c6:	464b      	mov	r3, r9
 80060c8:	1891      	adds	r1, r2, r2
 80060ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80060cc:	415b      	adcs	r3, r3
 80060ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060d4:	4641      	mov	r1, r8
 80060d6:	eb12 0a01 	adds.w	sl, r2, r1
 80060da:	4649      	mov	r1, r9
 80060dc:	eb43 0b01 	adc.w	fp, r3, r1
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	f04f 0300 	mov.w	r3, #0
 80060e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060f4:	4692      	mov	sl, r2
 80060f6:	469b      	mov	fp, r3
 80060f8:	4643      	mov	r3, r8
 80060fa:	eb1a 0303 	adds.w	r3, sl, r3
 80060fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006102:	464b      	mov	r3, r9
 8006104:	eb4b 0303 	adc.w	r3, fp, r3
 8006108:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800610c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006118:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800611c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006120:	460b      	mov	r3, r1
 8006122:	18db      	adds	r3, r3, r3
 8006124:	643b      	str	r3, [r7, #64]	; 0x40
 8006126:	4613      	mov	r3, r2
 8006128:	eb42 0303 	adc.w	r3, r2, r3
 800612c:	647b      	str	r3, [r7, #68]	; 0x44
 800612e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006132:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006136:	f7fa fd67 	bl	8000c08 <__aeabi_uldivmod>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4611      	mov	r1, r2
 8006140:	4b3b      	ldr	r3, [pc, #236]	; (8006230 <UART_SetConfig+0x2d4>)
 8006142:	fba3 2301 	umull	r2, r3, r3, r1
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	2264      	movs	r2, #100	; 0x64
 800614a:	fb02 f303 	mul.w	r3, r2, r3
 800614e:	1acb      	subs	r3, r1, r3
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006156:	4b36      	ldr	r3, [pc, #216]	; (8006230 <UART_SetConfig+0x2d4>)
 8006158:	fba3 2302 	umull	r2, r3, r3, r2
 800615c:	095b      	lsrs	r3, r3, #5
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006164:	441c      	add	r4, r3
 8006166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800616a:	2200      	movs	r2, #0
 800616c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006170:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006174:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006178:	4642      	mov	r2, r8
 800617a:	464b      	mov	r3, r9
 800617c:	1891      	adds	r1, r2, r2
 800617e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006180:	415b      	adcs	r3, r3
 8006182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006184:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006188:	4641      	mov	r1, r8
 800618a:	1851      	adds	r1, r2, r1
 800618c:	6339      	str	r1, [r7, #48]	; 0x30
 800618e:	4649      	mov	r1, r9
 8006190:	414b      	adcs	r3, r1
 8006192:	637b      	str	r3, [r7, #52]	; 0x34
 8006194:	f04f 0200 	mov.w	r2, #0
 8006198:	f04f 0300 	mov.w	r3, #0
 800619c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061a0:	4659      	mov	r1, fp
 80061a2:	00cb      	lsls	r3, r1, #3
 80061a4:	4651      	mov	r1, sl
 80061a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061aa:	4651      	mov	r1, sl
 80061ac:	00ca      	lsls	r2, r1, #3
 80061ae:	4610      	mov	r0, r2
 80061b0:	4619      	mov	r1, r3
 80061b2:	4603      	mov	r3, r0
 80061b4:	4642      	mov	r2, r8
 80061b6:	189b      	adds	r3, r3, r2
 80061b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061bc:	464b      	mov	r3, r9
 80061be:	460a      	mov	r2, r1
 80061c0:	eb42 0303 	adc.w	r3, r2, r3
 80061c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80061d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80061dc:	460b      	mov	r3, r1
 80061de:	18db      	adds	r3, r3, r3
 80061e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061e2:	4613      	mov	r3, r2
 80061e4:	eb42 0303 	adc.w	r3, r2, r3
 80061e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80061f2:	f7fa fd09 	bl	8000c08 <__aeabi_uldivmod>
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	4b0d      	ldr	r3, [pc, #52]	; (8006230 <UART_SetConfig+0x2d4>)
 80061fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006200:	095b      	lsrs	r3, r3, #5
 8006202:	2164      	movs	r1, #100	; 0x64
 8006204:	fb01 f303 	mul.w	r3, r1, r3
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	00db      	lsls	r3, r3, #3
 800620c:	3332      	adds	r3, #50	; 0x32
 800620e:	4a08      	ldr	r2, [pc, #32]	; (8006230 <UART_SetConfig+0x2d4>)
 8006210:	fba2 2303 	umull	r2, r3, r2, r3
 8006214:	095b      	lsrs	r3, r3, #5
 8006216:	f003 0207 	and.w	r2, r3, #7
 800621a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4422      	add	r2, r4
 8006222:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006224:	e105      	b.n	8006432 <UART_SetConfig+0x4d6>
 8006226:	bf00      	nop
 8006228:	40011000 	.word	0x40011000
 800622c:	40011400 	.word	0x40011400
 8006230:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006234:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006238:	2200      	movs	r2, #0
 800623a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800623e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006242:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006246:	4642      	mov	r2, r8
 8006248:	464b      	mov	r3, r9
 800624a:	1891      	adds	r1, r2, r2
 800624c:	6239      	str	r1, [r7, #32]
 800624e:	415b      	adcs	r3, r3
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
 8006252:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006256:	4641      	mov	r1, r8
 8006258:	1854      	adds	r4, r2, r1
 800625a:	4649      	mov	r1, r9
 800625c:	eb43 0501 	adc.w	r5, r3, r1
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	f04f 0300 	mov.w	r3, #0
 8006268:	00eb      	lsls	r3, r5, #3
 800626a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800626e:	00e2      	lsls	r2, r4, #3
 8006270:	4614      	mov	r4, r2
 8006272:	461d      	mov	r5, r3
 8006274:	4643      	mov	r3, r8
 8006276:	18e3      	adds	r3, r4, r3
 8006278:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800627c:	464b      	mov	r3, r9
 800627e:	eb45 0303 	adc.w	r3, r5, r3
 8006282:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006292:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006296:	f04f 0200 	mov.w	r2, #0
 800629a:	f04f 0300 	mov.w	r3, #0
 800629e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062a2:	4629      	mov	r1, r5
 80062a4:	008b      	lsls	r3, r1, #2
 80062a6:	4621      	mov	r1, r4
 80062a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062ac:	4621      	mov	r1, r4
 80062ae:	008a      	lsls	r2, r1, #2
 80062b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062b4:	f7fa fca8 	bl	8000c08 <__aeabi_uldivmod>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4b60      	ldr	r3, [pc, #384]	; (8006440 <UART_SetConfig+0x4e4>)
 80062be:	fba3 2302 	umull	r2, r3, r3, r2
 80062c2:	095b      	lsrs	r3, r3, #5
 80062c4:	011c      	lsls	r4, r3, #4
 80062c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80062d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80062d8:	4642      	mov	r2, r8
 80062da:	464b      	mov	r3, r9
 80062dc:	1891      	adds	r1, r2, r2
 80062de:	61b9      	str	r1, [r7, #24]
 80062e0:	415b      	adcs	r3, r3
 80062e2:	61fb      	str	r3, [r7, #28]
 80062e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062e8:	4641      	mov	r1, r8
 80062ea:	1851      	adds	r1, r2, r1
 80062ec:	6139      	str	r1, [r7, #16]
 80062ee:	4649      	mov	r1, r9
 80062f0:	414b      	adcs	r3, r1
 80062f2:	617b      	str	r3, [r7, #20]
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006300:	4659      	mov	r1, fp
 8006302:	00cb      	lsls	r3, r1, #3
 8006304:	4651      	mov	r1, sl
 8006306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800630a:	4651      	mov	r1, sl
 800630c:	00ca      	lsls	r2, r1, #3
 800630e:	4610      	mov	r0, r2
 8006310:	4619      	mov	r1, r3
 8006312:	4603      	mov	r3, r0
 8006314:	4642      	mov	r2, r8
 8006316:	189b      	adds	r3, r3, r2
 8006318:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800631c:	464b      	mov	r3, r9
 800631e:	460a      	mov	r2, r1
 8006320:	eb42 0303 	adc.w	r3, r2, r3
 8006324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	67bb      	str	r3, [r7, #120]	; 0x78
 8006332:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006334:	f04f 0200 	mov.w	r2, #0
 8006338:	f04f 0300 	mov.w	r3, #0
 800633c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006340:	4649      	mov	r1, r9
 8006342:	008b      	lsls	r3, r1, #2
 8006344:	4641      	mov	r1, r8
 8006346:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800634a:	4641      	mov	r1, r8
 800634c:	008a      	lsls	r2, r1, #2
 800634e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006352:	f7fa fc59 	bl	8000c08 <__aeabi_uldivmod>
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	4b39      	ldr	r3, [pc, #228]	; (8006440 <UART_SetConfig+0x4e4>)
 800635c:	fba3 1302 	umull	r1, r3, r3, r2
 8006360:	095b      	lsrs	r3, r3, #5
 8006362:	2164      	movs	r1, #100	; 0x64
 8006364:	fb01 f303 	mul.w	r3, r1, r3
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	3332      	adds	r3, #50	; 0x32
 800636e:	4a34      	ldr	r2, [pc, #208]	; (8006440 <UART_SetConfig+0x4e4>)
 8006370:	fba2 2303 	umull	r2, r3, r2, r3
 8006374:	095b      	lsrs	r3, r3, #5
 8006376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800637a:	441c      	add	r4, r3
 800637c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006380:	2200      	movs	r2, #0
 8006382:	673b      	str	r3, [r7, #112]	; 0x70
 8006384:	677a      	str	r2, [r7, #116]	; 0x74
 8006386:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800638a:	4642      	mov	r2, r8
 800638c:	464b      	mov	r3, r9
 800638e:	1891      	adds	r1, r2, r2
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	415b      	adcs	r3, r3
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800639a:	4641      	mov	r1, r8
 800639c:	1851      	adds	r1, r2, r1
 800639e:	6039      	str	r1, [r7, #0]
 80063a0:	4649      	mov	r1, r9
 80063a2:	414b      	adcs	r3, r1
 80063a4:	607b      	str	r3, [r7, #4]
 80063a6:	f04f 0200 	mov.w	r2, #0
 80063aa:	f04f 0300 	mov.w	r3, #0
 80063ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063b2:	4659      	mov	r1, fp
 80063b4:	00cb      	lsls	r3, r1, #3
 80063b6:	4651      	mov	r1, sl
 80063b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063bc:	4651      	mov	r1, sl
 80063be:	00ca      	lsls	r2, r1, #3
 80063c0:	4610      	mov	r0, r2
 80063c2:	4619      	mov	r1, r3
 80063c4:	4603      	mov	r3, r0
 80063c6:	4642      	mov	r2, r8
 80063c8:	189b      	adds	r3, r3, r2
 80063ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80063cc:	464b      	mov	r3, r9
 80063ce:	460a      	mov	r2, r1
 80063d0:	eb42 0303 	adc.w	r3, r2, r3
 80063d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	663b      	str	r3, [r7, #96]	; 0x60
 80063e0:	667a      	str	r2, [r7, #100]	; 0x64
 80063e2:	f04f 0200 	mov.w	r2, #0
 80063e6:	f04f 0300 	mov.w	r3, #0
 80063ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80063ee:	4649      	mov	r1, r9
 80063f0:	008b      	lsls	r3, r1, #2
 80063f2:	4641      	mov	r1, r8
 80063f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063f8:	4641      	mov	r1, r8
 80063fa:	008a      	lsls	r2, r1, #2
 80063fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006400:	f7fa fc02 	bl	8000c08 <__aeabi_uldivmod>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	4b0d      	ldr	r3, [pc, #52]	; (8006440 <UART_SetConfig+0x4e4>)
 800640a:	fba3 1302 	umull	r1, r3, r3, r2
 800640e:	095b      	lsrs	r3, r3, #5
 8006410:	2164      	movs	r1, #100	; 0x64
 8006412:	fb01 f303 	mul.w	r3, r1, r3
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	011b      	lsls	r3, r3, #4
 800641a:	3332      	adds	r3, #50	; 0x32
 800641c:	4a08      	ldr	r2, [pc, #32]	; (8006440 <UART_SetConfig+0x4e4>)
 800641e:	fba2 2303 	umull	r2, r3, r2, r3
 8006422:	095b      	lsrs	r3, r3, #5
 8006424:	f003 020f 	and.w	r2, r3, #15
 8006428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4422      	add	r2, r4
 8006430:	609a      	str	r2, [r3, #8]
}
 8006432:	bf00      	nop
 8006434:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006438:	46bd      	mov	sp, r7
 800643a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800643e:	bf00      	nop
 8006440:	51eb851f 	.word	0x51eb851f

08006444 <__errno>:
 8006444:	4b01      	ldr	r3, [pc, #4]	; (800644c <__errno+0x8>)
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	2000000c 	.word	0x2000000c

08006450 <__libc_init_array>:
 8006450:	b570      	push	{r4, r5, r6, lr}
 8006452:	4d0d      	ldr	r5, [pc, #52]	; (8006488 <__libc_init_array+0x38>)
 8006454:	4c0d      	ldr	r4, [pc, #52]	; (800648c <__libc_init_array+0x3c>)
 8006456:	1b64      	subs	r4, r4, r5
 8006458:	10a4      	asrs	r4, r4, #2
 800645a:	2600      	movs	r6, #0
 800645c:	42a6      	cmp	r6, r4
 800645e:	d109      	bne.n	8006474 <__libc_init_array+0x24>
 8006460:	4d0b      	ldr	r5, [pc, #44]	; (8006490 <__libc_init_array+0x40>)
 8006462:	4c0c      	ldr	r4, [pc, #48]	; (8006494 <__libc_init_array+0x44>)
 8006464:	f001 fcde 	bl	8007e24 <_init>
 8006468:	1b64      	subs	r4, r4, r5
 800646a:	10a4      	asrs	r4, r4, #2
 800646c:	2600      	movs	r6, #0
 800646e:	42a6      	cmp	r6, r4
 8006470:	d105      	bne.n	800647e <__libc_init_array+0x2e>
 8006472:	bd70      	pop	{r4, r5, r6, pc}
 8006474:	f855 3b04 	ldr.w	r3, [r5], #4
 8006478:	4798      	blx	r3
 800647a:	3601      	adds	r6, #1
 800647c:	e7ee      	b.n	800645c <__libc_init_array+0xc>
 800647e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006482:	4798      	blx	r3
 8006484:	3601      	adds	r6, #1
 8006486:	e7f2      	b.n	800646e <__libc_init_array+0x1e>
 8006488:	08008098 	.word	0x08008098
 800648c:	08008098 	.word	0x08008098
 8006490:	08008098 	.word	0x08008098
 8006494:	0800809c 	.word	0x0800809c

08006498 <memset>:
 8006498:	4402      	add	r2, r0
 800649a:	4603      	mov	r3, r0
 800649c:	4293      	cmp	r3, r2
 800649e:	d100      	bne.n	80064a2 <memset+0xa>
 80064a0:	4770      	bx	lr
 80064a2:	f803 1b01 	strb.w	r1, [r3], #1
 80064a6:	e7f9      	b.n	800649c <memset+0x4>

080064a8 <iprintf>:
 80064a8:	b40f      	push	{r0, r1, r2, r3}
 80064aa:	4b0a      	ldr	r3, [pc, #40]	; (80064d4 <iprintf+0x2c>)
 80064ac:	b513      	push	{r0, r1, r4, lr}
 80064ae:	681c      	ldr	r4, [r3, #0]
 80064b0:	b124      	cbz	r4, 80064bc <iprintf+0x14>
 80064b2:	69a3      	ldr	r3, [r4, #24]
 80064b4:	b913      	cbnz	r3, 80064bc <iprintf+0x14>
 80064b6:	4620      	mov	r0, r4
 80064b8:	f000 f886 	bl	80065c8 <__sinit>
 80064bc:	ab05      	add	r3, sp, #20
 80064be:	9a04      	ldr	r2, [sp, #16]
 80064c0:	68a1      	ldr	r1, [r4, #8]
 80064c2:	9301      	str	r3, [sp, #4]
 80064c4:	4620      	mov	r0, r4
 80064c6:	f000 fb39 	bl	8006b3c <_vfiprintf_r>
 80064ca:	b002      	add	sp, #8
 80064cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064d0:	b004      	add	sp, #16
 80064d2:	4770      	bx	lr
 80064d4:	2000000c 	.word	0x2000000c

080064d8 <siprintf>:
 80064d8:	b40e      	push	{r1, r2, r3}
 80064da:	b500      	push	{lr}
 80064dc:	b09c      	sub	sp, #112	; 0x70
 80064de:	ab1d      	add	r3, sp, #116	; 0x74
 80064e0:	9002      	str	r0, [sp, #8]
 80064e2:	9006      	str	r0, [sp, #24]
 80064e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064e8:	4809      	ldr	r0, [pc, #36]	; (8006510 <siprintf+0x38>)
 80064ea:	9107      	str	r1, [sp, #28]
 80064ec:	9104      	str	r1, [sp, #16]
 80064ee:	4909      	ldr	r1, [pc, #36]	; (8006514 <siprintf+0x3c>)
 80064f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80064f4:	9105      	str	r1, [sp, #20]
 80064f6:	6800      	ldr	r0, [r0, #0]
 80064f8:	9301      	str	r3, [sp, #4]
 80064fa:	a902      	add	r1, sp, #8
 80064fc:	f000 f9f4 	bl	80068e8 <_svfiprintf_r>
 8006500:	9b02      	ldr	r3, [sp, #8]
 8006502:	2200      	movs	r2, #0
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	b01c      	add	sp, #112	; 0x70
 8006508:	f85d eb04 	ldr.w	lr, [sp], #4
 800650c:	b003      	add	sp, #12
 800650e:	4770      	bx	lr
 8006510:	2000000c 	.word	0x2000000c
 8006514:	ffff0208 	.word	0xffff0208

08006518 <std>:
 8006518:	2300      	movs	r3, #0
 800651a:	b510      	push	{r4, lr}
 800651c:	4604      	mov	r4, r0
 800651e:	e9c0 3300 	strd	r3, r3, [r0]
 8006522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006526:	6083      	str	r3, [r0, #8]
 8006528:	8181      	strh	r1, [r0, #12]
 800652a:	6643      	str	r3, [r0, #100]	; 0x64
 800652c:	81c2      	strh	r2, [r0, #14]
 800652e:	6183      	str	r3, [r0, #24]
 8006530:	4619      	mov	r1, r3
 8006532:	2208      	movs	r2, #8
 8006534:	305c      	adds	r0, #92	; 0x5c
 8006536:	f7ff ffaf 	bl	8006498 <memset>
 800653a:	4b05      	ldr	r3, [pc, #20]	; (8006550 <std+0x38>)
 800653c:	6263      	str	r3, [r4, #36]	; 0x24
 800653e:	4b05      	ldr	r3, [pc, #20]	; (8006554 <std+0x3c>)
 8006540:	62a3      	str	r3, [r4, #40]	; 0x28
 8006542:	4b05      	ldr	r3, [pc, #20]	; (8006558 <std+0x40>)
 8006544:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006546:	4b05      	ldr	r3, [pc, #20]	; (800655c <std+0x44>)
 8006548:	6224      	str	r4, [r4, #32]
 800654a:	6323      	str	r3, [r4, #48]	; 0x30
 800654c:	bd10      	pop	{r4, pc}
 800654e:	bf00      	nop
 8006550:	080070e5 	.word	0x080070e5
 8006554:	08007107 	.word	0x08007107
 8006558:	0800713f 	.word	0x0800713f
 800655c:	08007163 	.word	0x08007163

08006560 <_cleanup_r>:
 8006560:	4901      	ldr	r1, [pc, #4]	; (8006568 <_cleanup_r+0x8>)
 8006562:	f000 b8af 	b.w	80066c4 <_fwalk_reent>
 8006566:	bf00      	nop
 8006568:	0800743d 	.word	0x0800743d

0800656c <__sfmoreglue>:
 800656c:	b570      	push	{r4, r5, r6, lr}
 800656e:	2268      	movs	r2, #104	; 0x68
 8006570:	1e4d      	subs	r5, r1, #1
 8006572:	4355      	muls	r5, r2
 8006574:	460e      	mov	r6, r1
 8006576:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800657a:	f000 f8e5 	bl	8006748 <_malloc_r>
 800657e:	4604      	mov	r4, r0
 8006580:	b140      	cbz	r0, 8006594 <__sfmoreglue+0x28>
 8006582:	2100      	movs	r1, #0
 8006584:	e9c0 1600 	strd	r1, r6, [r0]
 8006588:	300c      	adds	r0, #12
 800658a:	60a0      	str	r0, [r4, #8]
 800658c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006590:	f7ff ff82 	bl	8006498 <memset>
 8006594:	4620      	mov	r0, r4
 8006596:	bd70      	pop	{r4, r5, r6, pc}

08006598 <__sfp_lock_acquire>:
 8006598:	4801      	ldr	r0, [pc, #4]	; (80065a0 <__sfp_lock_acquire+0x8>)
 800659a:	f000 b8b3 	b.w	8006704 <__retarget_lock_acquire_recursive>
 800659e:	bf00      	nop
 80065a0:	2000021d 	.word	0x2000021d

080065a4 <__sfp_lock_release>:
 80065a4:	4801      	ldr	r0, [pc, #4]	; (80065ac <__sfp_lock_release+0x8>)
 80065a6:	f000 b8ae 	b.w	8006706 <__retarget_lock_release_recursive>
 80065aa:	bf00      	nop
 80065ac:	2000021d 	.word	0x2000021d

080065b0 <__sinit_lock_acquire>:
 80065b0:	4801      	ldr	r0, [pc, #4]	; (80065b8 <__sinit_lock_acquire+0x8>)
 80065b2:	f000 b8a7 	b.w	8006704 <__retarget_lock_acquire_recursive>
 80065b6:	bf00      	nop
 80065b8:	2000021e 	.word	0x2000021e

080065bc <__sinit_lock_release>:
 80065bc:	4801      	ldr	r0, [pc, #4]	; (80065c4 <__sinit_lock_release+0x8>)
 80065be:	f000 b8a2 	b.w	8006706 <__retarget_lock_release_recursive>
 80065c2:	bf00      	nop
 80065c4:	2000021e 	.word	0x2000021e

080065c8 <__sinit>:
 80065c8:	b510      	push	{r4, lr}
 80065ca:	4604      	mov	r4, r0
 80065cc:	f7ff fff0 	bl	80065b0 <__sinit_lock_acquire>
 80065d0:	69a3      	ldr	r3, [r4, #24]
 80065d2:	b11b      	cbz	r3, 80065dc <__sinit+0x14>
 80065d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065d8:	f7ff bff0 	b.w	80065bc <__sinit_lock_release>
 80065dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80065e0:	6523      	str	r3, [r4, #80]	; 0x50
 80065e2:	4b13      	ldr	r3, [pc, #76]	; (8006630 <__sinit+0x68>)
 80065e4:	4a13      	ldr	r2, [pc, #76]	; (8006634 <__sinit+0x6c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80065ea:	42a3      	cmp	r3, r4
 80065ec:	bf04      	itt	eq
 80065ee:	2301      	moveq	r3, #1
 80065f0:	61a3      	streq	r3, [r4, #24]
 80065f2:	4620      	mov	r0, r4
 80065f4:	f000 f820 	bl	8006638 <__sfp>
 80065f8:	6060      	str	r0, [r4, #4]
 80065fa:	4620      	mov	r0, r4
 80065fc:	f000 f81c 	bl	8006638 <__sfp>
 8006600:	60a0      	str	r0, [r4, #8]
 8006602:	4620      	mov	r0, r4
 8006604:	f000 f818 	bl	8006638 <__sfp>
 8006608:	2200      	movs	r2, #0
 800660a:	60e0      	str	r0, [r4, #12]
 800660c:	2104      	movs	r1, #4
 800660e:	6860      	ldr	r0, [r4, #4]
 8006610:	f7ff ff82 	bl	8006518 <std>
 8006614:	68a0      	ldr	r0, [r4, #8]
 8006616:	2201      	movs	r2, #1
 8006618:	2109      	movs	r1, #9
 800661a:	f7ff ff7d 	bl	8006518 <std>
 800661e:	68e0      	ldr	r0, [r4, #12]
 8006620:	2202      	movs	r2, #2
 8006622:	2112      	movs	r1, #18
 8006624:	f7ff ff78 	bl	8006518 <std>
 8006628:	2301      	movs	r3, #1
 800662a:	61a3      	str	r3, [r4, #24]
 800662c:	e7d2      	b.n	80065d4 <__sinit+0xc>
 800662e:	bf00      	nop
 8006630:	08007f84 	.word	0x08007f84
 8006634:	08006561 	.word	0x08006561

08006638 <__sfp>:
 8006638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663a:	4607      	mov	r7, r0
 800663c:	f7ff ffac 	bl	8006598 <__sfp_lock_acquire>
 8006640:	4b1e      	ldr	r3, [pc, #120]	; (80066bc <__sfp+0x84>)
 8006642:	681e      	ldr	r6, [r3, #0]
 8006644:	69b3      	ldr	r3, [r6, #24]
 8006646:	b913      	cbnz	r3, 800664e <__sfp+0x16>
 8006648:	4630      	mov	r0, r6
 800664a:	f7ff ffbd 	bl	80065c8 <__sinit>
 800664e:	3648      	adds	r6, #72	; 0x48
 8006650:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006654:	3b01      	subs	r3, #1
 8006656:	d503      	bpl.n	8006660 <__sfp+0x28>
 8006658:	6833      	ldr	r3, [r6, #0]
 800665a:	b30b      	cbz	r3, 80066a0 <__sfp+0x68>
 800665c:	6836      	ldr	r6, [r6, #0]
 800665e:	e7f7      	b.n	8006650 <__sfp+0x18>
 8006660:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006664:	b9d5      	cbnz	r5, 800669c <__sfp+0x64>
 8006666:	4b16      	ldr	r3, [pc, #88]	; (80066c0 <__sfp+0x88>)
 8006668:	60e3      	str	r3, [r4, #12]
 800666a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800666e:	6665      	str	r5, [r4, #100]	; 0x64
 8006670:	f000 f847 	bl	8006702 <__retarget_lock_init_recursive>
 8006674:	f7ff ff96 	bl	80065a4 <__sfp_lock_release>
 8006678:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800667c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006680:	6025      	str	r5, [r4, #0]
 8006682:	61a5      	str	r5, [r4, #24]
 8006684:	2208      	movs	r2, #8
 8006686:	4629      	mov	r1, r5
 8006688:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800668c:	f7ff ff04 	bl	8006498 <memset>
 8006690:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006694:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006698:	4620      	mov	r0, r4
 800669a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800669c:	3468      	adds	r4, #104	; 0x68
 800669e:	e7d9      	b.n	8006654 <__sfp+0x1c>
 80066a0:	2104      	movs	r1, #4
 80066a2:	4638      	mov	r0, r7
 80066a4:	f7ff ff62 	bl	800656c <__sfmoreglue>
 80066a8:	4604      	mov	r4, r0
 80066aa:	6030      	str	r0, [r6, #0]
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d1d5      	bne.n	800665c <__sfp+0x24>
 80066b0:	f7ff ff78 	bl	80065a4 <__sfp_lock_release>
 80066b4:	230c      	movs	r3, #12
 80066b6:	603b      	str	r3, [r7, #0]
 80066b8:	e7ee      	b.n	8006698 <__sfp+0x60>
 80066ba:	bf00      	nop
 80066bc:	08007f84 	.word	0x08007f84
 80066c0:	ffff0001 	.word	0xffff0001

080066c4 <_fwalk_reent>:
 80066c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c8:	4606      	mov	r6, r0
 80066ca:	4688      	mov	r8, r1
 80066cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80066d0:	2700      	movs	r7, #0
 80066d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066d6:	f1b9 0901 	subs.w	r9, r9, #1
 80066da:	d505      	bpl.n	80066e8 <_fwalk_reent+0x24>
 80066dc:	6824      	ldr	r4, [r4, #0]
 80066de:	2c00      	cmp	r4, #0
 80066e0:	d1f7      	bne.n	80066d2 <_fwalk_reent+0xe>
 80066e2:	4638      	mov	r0, r7
 80066e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e8:	89ab      	ldrh	r3, [r5, #12]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d907      	bls.n	80066fe <_fwalk_reent+0x3a>
 80066ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066f2:	3301      	adds	r3, #1
 80066f4:	d003      	beq.n	80066fe <_fwalk_reent+0x3a>
 80066f6:	4629      	mov	r1, r5
 80066f8:	4630      	mov	r0, r6
 80066fa:	47c0      	blx	r8
 80066fc:	4307      	orrs	r7, r0
 80066fe:	3568      	adds	r5, #104	; 0x68
 8006700:	e7e9      	b.n	80066d6 <_fwalk_reent+0x12>

08006702 <__retarget_lock_init_recursive>:
 8006702:	4770      	bx	lr

08006704 <__retarget_lock_acquire_recursive>:
 8006704:	4770      	bx	lr

08006706 <__retarget_lock_release_recursive>:
 8006706:	4770      	bx	lr

08006708 <sbrk_aligned>:
 8006708:	b570      	push	{r4, r5, r6, lr}
 800670a:	4e0e      	ldr	r6, [pc, #56]	; (8006744 <sbrk_aligned+0x3c>)
 800670c:	460c      	mov	r4, r1
 800670e:	6831      	ldr	r1, [r6, #0]
 8006710:	4605      	mov	r5, r0
 8006712:	b911      	cbnz	r1, 800671a <sbrk_aligned+0x12>
 8006714:	f000 fcd6 	bl	80070c4 <_sbrk_r>
 8006718:	6030      	str	r0, [r6, #0]
 800671a:	4621      	mov	r1, r4
 800671c:	4628      	mov	r0, r5
 800671e:	f000 fcd1 	bl	80070c4 <_sbrk_r>
 8006722:	1c43      	adds	r3, r0, #1
 8006724:	d00a      	beq.n	800673c <sbrk_aligned+0x34>
 8006726:	1cc4      	adds	r4, r0, #3
 8006728:	f024 0403 	bic.w	r4, r4, #3
 800672c:	42a0      	cmp	r0, r4
 800672e:	d007      	beq.n	8006740 <sbrk_aligned+0x38>
 8006730:	1a21      	subs	r1, r4, r0
 8006732:	4628      	mov	r0, r5
 8006734:	f000 fcc6 	bl	80070c4 <_sbrk_r>
 8006738:	3001      	adds	r0, #1
 800673a:	d101      	bne.n	8006740 <sbrk_aligned+0x38>
 800673c:	f04f 34ff 	mov.w	r4, #4294967295
 8006740:	4620      	mov	r0, r4
 8006742:	bd70      	pop	{r4, r5, r6, pc}
 8006744:	20000224 	.word	0x20000224

08006748 <_malloc_r>:
 8006748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800674c:	1ccd      	adds	r5, r1, #3
 800674e:	f025 0503 	bic.w	r5, r5, #3
 8006752:	3508      	adds	r5, #8
 8006754:	2d0c      	cmp	r5, #12
 8006756:	bf38      	it	cc
 8006758:	250c      	movcc	r5, #12
 800675a:	2d00      	cmp	r5, #0
 800675c:	4607      	mov	r7, r0
 800675e:	db01      	blt.n	8006764 <_malloc_r+0x1c>
 8006760:	42a9      	cmp	r1, r5
 8006762:	d905      	bls.n	8006770 <_malloc_r+0x28>
 8006764:	230c      	movs	r3, #12
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	2600      	movs	r6, #0
 800676a:	4630      	mov	r0, r6
 800676c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006770:	4e2e      	ldr	r6, [pc, #184]	; (800682c <_malloc_r+0xe4>)
 8006772:	f000 ff3f 	bl	80075f4 <__malloc_lock>
 8006776:	6833      	ldr	r3, [r6, #0]
 8006778:	461c      	mov	r4, r3
 800677a:	bb34      	cbnz	r4, 80067ca <_malloc_r+0x82>
 800677c:	4629      	mov	r1, r5
 800677e:	4638      	mov	r0, r7
 8006780:	f7ff ffc2 	bl	8006708 <sbrk_aligned>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	4604      	mov	r4, r0
 8006788:	d14d      	bne.n	8006826 <_malloc_r+0xde>
 800678a:	6834      	ldr	r4, [r6, #0]
 800678c:	4626      	mov	r6, r4
 800678e:	2e00      	cmp	r6, #0
 8006790:	d140      	bne.n	8006814 <_malloc_r+0xcc>
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	4631      	mov	r1, r6
 8006796:	4638      	mov	r0, r7
 8006798:	eb04 0803 	add.w	r8, r4, r3
 800679c:	f000 fc92 	bl	80070c4 <_sbrk_r>
 80067a0:	4580      	cmp	r8, r0
 80067a2:	d13a      	bne.n	800681a <_malloc_r+0xd2>
 80067a4:	6821      	ldr	r1, [r4, #0]
 80067a6:	3503      	adds	r5, #3
 80067a8:	1a6d      	subs	r5, r5, r1
 80067aa:	f025 0503 	bic.w	r5, r5, #3
 80067ae:	3508      	adds	r5, #8
 80067b0:	2d0c      	cmp	r5, #12
 80067b2:	bf38      	it	cc
 80067b4:	250c      	movcc	r5, #12
 80067b6:	4629      	mov	r1, r5
 80067b8:	4638      	mov	r0, r7
 80067ba:	f7ff ffa5 	bl	8006708 <sbrk_aligned>
 80067be:	3001      	adds	r0, #1
 80067c0:	d02b      	beq.n	800681a <_malloc_r+0xd2>
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	442b      	add	r3, r5
 80067c6:	6023      	str	r3, [r4, #0]
 80067c8:	e00e      	b.n	80067e8 <_malloc_r+0xa0>
 80067ca:	6822      	ldr	r2, [r4, #0]
 80067cc:	1b52      	subs	r2, r2, r5
 80067ce:	d41e      	bmi.n	800680e <_malloc_r+0xc6>
 80067d0:	2a0b      	cmp	r2, #11
 80067d2:	d916      	bls.n	8006802 <_malloc_r+0xba>
 80067d4:	1961      	adds	r1, r4, r5
 80067d6:	42a3      	cmp	r3, r4
 80067d8:	6025      	str	r5, [r4, #0]
 80067da:	bf18      	it	ne
 80067dc:	6059      	strne	r1, [r3, #4]
 80067de:	6863      	ldr	r3, [r4, #4]
 80067e0:	bf08      	it	eq
 80067e2:	6031      	streq	r1, [r6, #0]
 80067e4:	5162      	str	r2, [r4, r5]
 80067e6:	604b      	str	r3, [r1, #4]
 80067e8:	4638      	mov	r0, r7
 80067ea:	f104 060b 	add.w	r6, r4, #11
 80067ee:	f000 ff07 	bl	8007600 <__malloc_unlock>
 80067f2:	f026 0607 	bic.w	r6, r6, #7
 80067f6:	1d23      	adds	r3, r4, #4
 80067f8:	1af2      	subs	r2, r6, r3
 80067fa:	d0b6      	beq.n	800676a <_malloc_r+0x22>
 80067fc:	1b9b      	subs	r3, r3, r6
 80067fe:	50a3      	str	r3, [r4, r2]
 8006800:	e7b3      	b.n	800676a <_malloc_r+0x22>
 8006802:	6862      	ldr	r2, [r4, #4]
 8006804:	42a3      	cmp	r3, r4
 8006806:	bf0c      	ite	eq
 8006808:	6032      	streq	r2, [r6, #0]
 800680a:	605a      	strne	r2, [r3, #4]
 800680c:	e7ec      	b.n	80067e8 <_malloc_r+0xa0>
 800680e:	4623      	mov	r3, r4
 8006810:	6864      	ldr	r4, [r4, #4]
 8006812:	e7b2      	b.n	800677a <_malloc_r+0x32>
 8006814:	4634      	mov	r4, r6
 8006816:	6876      	ldr	r6, [r6, #4]
 8006818:	e7b9      	b.n	800678e <_malloc_r+0x46>
 800681a:	230c      	movs	r3, #12
 800681c:	603b      	str	r3, [r7, #0]
 800681e:	4638      	mov	r0, r7
 8006820:	f000 feee 	bl	8007600 <__malloc_unlock>
 8006824:	e7a1      	b.n	800676a <_malloc_r+0x22>
 8006826:	6025      	str	r5, [r4, #0]
 8006828:	e7de      	b.n	80067e8 <_malloc_r+0xa0>
 800682a:	bf00      	nop
 800682c:	20000220 	.word	0x20000220

08006830 <__ssputs_r>:
 8006830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006834:	688e      	ldr	r6, [r1, #8]
 8006836:	429e      	cmp	r6, r3
 8006838:	4682      	mov	sl, r0
 800683a:	460c      	mov	r4, r1
 800683c:	4690      	mov	r8, r2
 800683e:	461f      	mov	r7, r3
 8006840:	d838      	bhi.n	80068b4 <__ssputs_r+0x84>
 8006842:	898a      	ldrh	r2, [r1, #12]
 8006844:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006848:	d032      	beq.n	80068b0 <__ssputs_r+0x80>
 800684a:	6825      	ldr	r5, [r4, #0]
 800684c:	6909      	ldr	r1, [r1, #16]
 800684e:	eba5 0901 	sub.w	r9, r5, r1
 8006852:	6965      	ldr	r5, [r4, #20]
 8006854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006858:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800685c:	3301      	adds	r3, #1
 800685e:	444b      	add	r3, r9
 8006860:	106d      	asrs	r5, r5, #1
 8006862:	429d      	cmp	r5, r3
 8006864:	bf38      	it	cc
 8006866:	461d      	movcc	r5, r3
 8006868:	0553      	lsls	r3, r2, #21
 800686a:	d531      	bpl.n	80068d0 <__ssputs_r+0xa0>
 800686c:	4629      	mov	r1, r5
 800686e:	f7ff ff6b 	bl	8006748 <_malloc_r>
 8006872:	4606      	mov	r6, r0
 8006874:	b950      	cbnz	r0, 800688c <__ssputs_r+0x5c>
 8006876:	230c      	movs	r3, #12
 8006878:	f8ca 3000 	str.w	r3, [sl]
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006882:	81a3      	strh	r3, [r4, #12]
 8006884:	f04f 30ff 	mov.w	r0, #4294967295
 8006888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800688c:	6921      	ldr	r1, [r4, #16]
 800688e:	464a      	mov	r2, r9
 8006890:	f000 fe88 	bl	80075a4 <memcpy>
 8006894:	89a3      	ldrh	r3, [r4, #12]
 8006896:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800689a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800689e:	81a3      	strh	r3, [r4, #12]
 80068a0:	6126      	str	r6, [r4, #16]
 80068a2:	6165      	str	r5, [r4, #20]
 80068a4:	444e      	add	r6, r9
 80068a6:	eba5 0509 	sub.w	r5, r5, r9
 80068aa:	6026      	str	r6, [r4, #0]
 80068ac:	60a5      	str	r5, [r4, #8]
 80068ae:	463e      	mov	r6, r7
 80068b0:	42be      	cmp	r6, r7
 80068b2:	d900      	bls.n	80068b6 <__ssputs_r+0x86>
 80068b4:	463e      	mov	r6, r7
 80068b6:	6820      	ldr	r0, [r4, #0]
 80068b8:	4632      	mov	r2, r6
 80068ba:	4641      	mov	r1, r8
 80068bc:	f000 fe80 	bl	80075c0 <memmove>
 80068c0:	68a3      	ldr	r3, [r4, #8]
 80068c2:	1b9b      	subs	r3, r3, r6
 80068c4:	60a3      	str	r3, [r4, #8]
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	4433      	add	r3, r6
 80068ca:	6023      	str	r3, [r4, #0]
 80068cc:	2000      	movs	r0, #0
 80068ce:	e7db      	b.n	8006888 <__ssputs_r+0x58>
 80068d0:	462a      	mov	r2, r5
 80068d2:	f000 fee7 	bl	80076a4 <_realloc_r>
 80068d6:	4606      	mov	r6, r0
 80068d8:	2800      	cmp	r0, #0
 80068da:	d1e1      	bne.n	80068a0 <__ssputs_r+0x70>
 80068dc:	6921      	ldr	r1, [r4, #16]
 80068de:	4650      	mov	r0, sl
 80068e0:	f000 fe94 	bl	800760c <_free_r>
 80068e4:	e7c7      	b.n	8006876 <__ssputs_r+0x46>
	...

080068e8 <_svfiprintf_r>:
 80068e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	4698      	mov	r8, r3
 80068ee:	898b      	ldrh	r3, [r1, #12]
 80068f0:	061b      	lsls	r3, r3, #24
 80068f2:	b09d      	sub	sp, #116	; 0x74
 80068f4:	4607      	mov	r7, r0
 80068f6:	460d      	mov	r5, r1
 80068f8:	4614      	mov	r4, r2
 80068fa:	d50e      	bpl.n	800691a <_svfiprintf_r+0x32>
 80068fc:	690b      	ldr	r3, [r1, #16]
 80068fe:	b963      	cbnz	r3, 800691a <_svfiprintf_r+0x32>
 8006900:	2140      	movs	r1, #64	; 0x40
 8006902:	f7ff ff21 	bl	8006748 <_malloc_r>
 8006906:	6028      	str	r0, [r5, #0]
 8006908:	6128      	str	r0, [r5, #16]
 800690a:	b920      	cbnz	r0, 8006916 <_svfiprintf_r+0x2e>
 800690c:	230c      	movs	r3, #12
 800690e:	603b      	str	r3, [r7, #0]
 8006910:	f04f 30ff 	mov.w	r0, #4294967295
 8006914:	e0d1      	b.n	8006aba <_svfiprintf_r+0x1d2>
 8006916:	2340      	movs	r3, #64	; 0x40
 8006918:	616b      	str	r3, [r5, #20]
 800691a:	2300      	movs	r3, #0
 800691c:	9309      	str	r3, [sp, #36]	; 0x24
 800691e:	2320      	movs	r3, #32
 8006920:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006924:	f8cd 800c 	str.w	r8, [sp, #12]
 8006928:	2330      	movs	r3, #48	; 0x30
 800692a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ad4 <_svfiprintf_r+0x1ec>
 800692e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006932:	f04f 0901 	mov.w	r9, #1
 8006936:	4623      	mov	r3, r4
 8006938:	469a      	mov	sl, r3
 800693a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800693e:	b10a      	cbz	r2, 8006944 <_svfiprintf_r+0x5c>
 8006940:	2a25      	cmp	r2, #37	; 0x25
 8006942:	d1f9      	bne.n	8006938 <_svfiprintf_r+0x50>
 8006944:	ebba 0b04 	subs.w	fp, sl, r4
 8006948:	d00b      	beq.n	8006962 <_svfiprintf_r+0x7a>
 800694a:	465b      	mov	r3, fp
 800694c:	4622      	mov	r2, r4
 800694e:	4629      	mov	r1, r5
 8006950:	4638      	mov	r0, r7
 8006952:	f7ff ff6d 	bl	8006830 <__ssputs_r>
 8006956:	3001      	adds	r0, #1
 8006958:	f000 80aa 	beq.w	8006ab0 <_svfiprintf_r+0x1c8>
 800695c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800695e:	445a      	add	r2, fp
 8006960:	9209      	str	r2, [sp, #36]	; 0x24
 8006962:	f89a 3000 	ldrb.w	r3, [sl]
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 80a2 	beq.w	8006ab0 <_svfiprintf_r+0x1c8>
 800696c:	2300      	movs	r3, #0
 800696e:	f04f 32ff 	mov.w	r2, #4294967295
 8006972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006976:	f10a 0a01 	add.w	sl, sl, #1
 800697a:	9304      	str	r3, [sp, #16]
 800697c:	9307      	str	r3, [sp, #28]
 800697e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006982:	931a      	str	r3, [sp, #104]	; 0x68
 8006984:	4654      	mov	r4, sl
 8006986:	2205      	movs	r2, #5
 8006988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800698c:	4851      	ldr	r0, [pc, #324]	; (8006ad4 <_svfiprintf_r+0x1ec>)
 800698e:	f7f9 fc2f 	bl	80001f0 <memchr>
 8006992:	9a04      	ldr	r2, [sp, #16]
 8006994:	b9d8      	cbnz	r0, 80069ce <_svfiprintf_r+0xe6>
 8006996:	06d0      	lsls	r0, r2, #27
 8006998:	bf44      	itt	mi
 800699a:	2320      	movmi	r3, #32
 800699c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069a0:	0711      	lsls	r1, r2, #28
 80069a2:	bf44      	itt	mi
 80069a4:	232b      	movmi	r3, #43	; 0x2b
 80069a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069aa:	f89a 3000 	ldrb.w	r3, [sl]
 80069ae:	2b2a      	cmp	r3, #42	; 0x2a
 80069b0:	d015      	beq.n	80069de <_svfiprintf_r+0xf6>
 80069b2:	9a07      	ldr	r2, [sp, #28]
 80069b4:	4654      	mov	r4, sl
 80069b6:	2000      	movs	r0, #0
 80069b8:	f04f 0c0a 	mov.w	ip, #10
 80069bc:	4621      	mov	r1, r4
 80069be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069c2:	3b30      	subs	r3, #48	; 0x30
 80069c4:	2b09      	cmp	r3, #9
 80069c6:	d94e      	bls.n	8006a66 <_svfiprintf_r+0x17e>
 80069c8:	b1b0      	cbz	r0, 80069f8 <_svfiprintf_r+0x110>
 80069ca:	9207      	str	r2, [sp, #28]
 80069cc:	e014      	b.n	80069f8 <_svfiprintf_r+0x110>
 80069ce:	eba0 0308 	sub.w	r3, r0, r8
 80069d2:	fa09 f303 	lsl.w	r3, r9, r3
 80069d6:	4313      	orrs	r3, r2
 80069d8:	9304      	str	r3, [sp, #16]
 80069da:	46a2      	mov	sl, r4
 80069dc:	e7d2      	b.n	8006984 <_svfiprintf_r+0x9c>
 80069de:	9b03      	ldr	r3, [sp, #12]
 80069e0:	1d19      	adds	r1, r3, #4
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	9103      	str	r1, [sp, #12]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	bfbb      	ittet	lt
 80069ea:	425b      	neglt	r3, r3
 80069ec:	f042 0202 	orrlt.w	r2, r2, #2
 80069f0:	9307      	strge	r3, [sp, #28]
 80069f2:	9307      	strlt	r3, [sp, #28]
 80069f4:	bfb8      	it	lt
 80069f6:	9204      	strlt	r2, [sp, #16]
 80069f8:	7823      	ldrb	r3, [r4, #0]
 80069fa:	2b2e      	cmp	r3, #46	; 0x2e
 80069fc:	d10c      	bne.n	8006a18 <_svfiprintf_r+0x130>
 80069fe:	7863      	ldrb	r3, [r4, #1]
 8006a00:	2b2a      	cmp	r3, #42	; 0x2a
 8006a02:	d135      	bne.n	8006a70 <_svfiprintf_r+0x188>
 8006a04:	9b03      	ldr	r3, [sp, #12]
 8006a06:	1d1a      	adds	r2, r3, #4
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	9203      	str	r2, [sp, #12]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	bfb8      	it	lt
 8006a10:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a14:	3402      	adds	r4, #2
 8006a16:	9305      	str	r3, [sp, #20]
 8006a18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ae4 <_svfiprintf_r+0x1fc>
 8006a1c:	7821      	ldrb	r1, [r4, #0]
 8006a1e:	2203      	movs	r2, #3
 8006a20:	4650      	mov	r0, sl
 8006a22:	f7f9 fbe5 	bl	80001f0 <memchr>
 8006a26:	b140      	cbz	r0, 8006a3a <_svfiprintf_r+0x152>
 8006a28:	2340      	movs	r3, #64	; 0x40
 8006a2a:	eba0 000a 	sub.w	r0, r0, sl
 8006a2e:	fa03 f000 	lsl.w	r0, r3, r0
 8006a32:	9b04      	ldr	r3, [sp, #16]
 8006a34:	4303      	orrs	r3, r0
 8006a36:	3401      	adds	r4, #1
 8006a38:	9304      	str	r3, [sp, #16]
 8006a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a3e:	4826      	ldr	r0, [pc, #152]	; (8006ad8 <_svfiprintf_r+0x1f0>)
 8006a40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a44:	2206      	movs	r2, #6
 8006a46:	f7f9 fbd3 	bl	80001f0 <memchr>
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	d038      	beq.n	8006ac0 <_svfiprintf_r+0x1d8>
 8006a4e:	4b23      	ldr	r3, [pc, #140]	; (8006adc <_svfiprintf_r+0x1f4>)
 8006a50:	bb1b      	cbnz	r3, 8006a9a <_svfiprintf_r+0x1b2>
 8006a52:	9b03      	ldr	r3, [sp, #12]
 8006a54:	3307      	adds	r3, #7
 8006a56:	f023 0307 	bic.w	r3, r3, #7
 8006a5a:	3308      	adds	r3, #8
 8006a5c:	9303      	str	r3, [sp, #12]
 8006a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a60:	4433      	add	r3, r6
 8006a62:	9309      	str	r3, [sp, #36]	; 0x24
 8006a64:	e767      	b.n	8006936 <_svfiprintf_r+0x4e>
 8006a66:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	2001      	movs	r0, #1
 8006a6e:	e7a5      	b.n	80069bc <_svfiprintf_r+0xd4>
 8006a70:	2300      	movs	r3, #0
 8006a72:	3401      	adds	r4, #1
 8006a74:	9305      	str	r3, [sp, #20]
 8006a76:	4619      	mov	r1, r3
 8006a78:	f04f 0c0a 	mov.w	ip, #10
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a82:	3a30      	subs	r2, #48	; 0x30
 8006a84:	2a09      	cmp	r2, #9
 8006a86:	d903      	bls.n	8006a90 <_svfiprintf_r+0x1a8>
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0c5      	beq.n	8006a18 <_svfiprintf_r+0x130>
 8006a8c:	9105      	str	r1, [sp, #20]
 8006a8e:	e7c3      	b.n	8006a18 <_svfiprintf_r+0x130>
 8006a90:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a94:	4604      	mov	r4, r0
 8006a96:	2301      	movs	r3, #1
 8006a98:	e7f0      	b.n	8006a7c <_svfiprintf_r+0x194>
 8006a9a:	ab03      	add	r3, sp, #12
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	462a      	mov	r2, r5
 8006aa0:	4b0f      	ldr	r3, [pc, #60]	; (8006ae0 <_svfiprintf_r+0x1f8>)
 8006aa2:	a904      	add	r1, sp, #16
 8006aa4:	4638      	mov	r0, r7
 8006aa6:	f3af 8000 	nop.w
 8006aaa:	1c42      	adds	r2, r0, #1
 8006aac:	4606      	mov	r6, r0
 8006aae:	d1d6      	bne.n	8006a5e <_svfiprintf_r+0x176>
 8006ab0:	89ab      	ldrh	r3, [r5, #12]
 8006ab2:	065b      	lsls	r3, r3, #25
 8006ab4:	f53f af2c 	bmi.w	8006910 <_svfiprintf_r+0x28>
 8006ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006aba:	b01d      	add	sp, #116	; 0x74
 8006abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac0:	ab03      	add	r3, sp, #12
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	462a      	mov	r2, r5
 8006ac6:	4b06      	ldr	r3, [pc, #24]	; (8006ae0 <_svfiprintf_r+0x1f8>)
 8006ac8:	a904      	add	r1, sp, #16
 8006aca:	4638      	mov	r0, r7
 8006acc:	f000 f9d4 	bl	8006e78 <_printf_i>
 8006ad0:	e7eb      	b.n	8006aaa <_svfiprintf_r+0x1c2>
 8006ad2:	bf00      	nop
 8006ad4:	08007fe8 	.word	0x08007fe8
 8006ad8:	08007ff2 	.word	0x08007ff2
 8006adc:	00000000 	.word	0x00000000
 8006ae0:	08006831 	.word	0x08006831
 8006ae4:	08007fee 	.word	0x08007fee

08006ae8 <__sfputc_r>:
 8006ae8:	6893      	ldr	r3, [r2, #8]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	b410      	push	{r4}
 8006af0:	6093      	str	r3, [r2, #8]
 8006af2:	da08      	bge.n	8006b06 <__sfputc_r+0x1e>
 8006af4:	6994      	ldr	r4, [r2, #24]
 8006af6:	42a3      	cmp	r3, r4
 8006af8:	db01      	blt.n	8006afe <__sfputc_r+0x16>
 8006afa:	290a      	cmp	r1, #10
 8006afc:	d103      	bne.n	8006b06 <__sfputc_r+0x1e>
 8006afe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b02:	f000 bb33 	b.w	800716c <__swbuf_r>
 8006b06:	6813      	ldr	r3, [r2, #0]
 8006b08:	1c58      	adds	r0, r3, #1
 8006b0a:	6010      	str	r0, [r2, #0]
 8006b0c:	7019      	strb	r1, [r3, #0]
 8006b0e:	4608      	mov	r0, r1
 8006b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <__sfputs_r>:
 8006b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b18:	4606      	mov	r6, r0
 8006b1a:	460f      	mov	r7, r1
 8006b1c:	4614      	mov	r4, r2
 8006b1e:	18d5      	adds	r5, r2, r3
 8006b20:	42ac      	cmp	r4, r5
 8006b22:	d101      	bne.n	8006b28 <__sfputs_r+0x12>
 8006b24:	2000      	movs	r0, #0
 8006b26:	e007      	b.n	8006b38 <__sfputs_r+0x22>
 8006b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b2c:	463a      	mov	r2, r7
 8006b2e:	4630      	mov	r0, r6
 8006b30:	f7ff ffda 	bl	8006ae8 <__sfputc_r>
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d1f3      	bne.n	8006b20 <__sfputs_r+0xa>
 8006b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b3c <_vfiprintf_r>:
 8006b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b40:	460d      	mov	r5, r1
 8006b42:	b09d      	sub	sp, #116	; 0x74
 8006b44:	4614      	mov	r4, r2
 8006b46:	4698      	mov	r8, r3
 8006b48:	4606      	mov	r6, r0
 8006b4a:	b118      	cbz	r0, 8006b54 <_vfiprintf_r+0x18>
 8006b4c:	6983      	ldr	r3, [r0, #24]
 8006b4e:	b90b      	cbnz	r3, 8006b54 <_vfiprintf_r+0x18>
 8006b50:	f7ff fd3a 	bl	80065c8 <__sinit>
 8006b54:	4b89      	ldr	r3, [pc, #548]	; (8006d7c <_vfiprintf_r+0x240>)
 8006b56:	429d      	cmp	r5, r3
 8006b58:	d11b      	bne.n	8006b92 <_vfiprintf_r+0x56>
 8006b5a:	6875      	ldr	r5, [r6, #4]
 8006b5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b5e:	07d9      	lsls	r1, r3, #31
 8006b60:	d405      	bmi.n	8006b6e <_vfiprintf_r+0x32>
 8006b62:	89ab      	ldrh	r3, [r5, #12]
 8006b64:	059a      	lsls	r2, r3, #22
 8006b66:	d402      	bmi.n	8006b6e <_vfiprintf_r+0x32>
 8006b68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b6a:	f7ff fdcb 	bl	8006704 <__retarget_lock_acquire_recursive>
 8006b6e:	89ab      	ldrh	r3, [r5, #12]
 8006b70:	071b      	lsls	r3, r3, #28
 8006b72:	d501      	bpl.n	8006b78 <_vfiprintf_r+0x3c>
 8006b74:	692b      	ldr	r3, [r5, #16]
 8006b76:	b9eb      	cbnz	r3, 8006bb4 <_vfiprintf_r+0x78>
 8006b78:	4629      	mov	r1, r5
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	f000 fb5a 	bl	8007234 <__swsetup_r>
 8006b80:	b1c0      	cbz	r0, 8006bb4 <_vfiprintf_r+0x78>
 8006b82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b84:	07dc      	lsls	r4, r3, #31
 8006b86:	d50e      	bpl.n	8006ba6 <_vfiprintf_r+0x6a>
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8c:	b01d      	add	sp, #116	; 0x74
 8006b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b92:	4b7b      	ldr	r3, [pc, #492]	; (8006d80 <_vfiprintf_r+0x244>)
 8006b94:	429d      	cmp	r5, r3
 8006b96:	d101      	bne.n	8006b9c <_vfiprintf_r+0x60>
 8006b98:	68b5      	ldr	r5, [r6, #8]
 8006b9a:	e7df      	b.n	8006b5c <_vfiprintf_r+0x20>
 8006b9c:	4b79      	ldr	r3, [pc, #484]	; (8006d84 <_vfiprintf_r+0x248>)
 8006b9e:	429d      	cmp	r5, r3
 8006ba0:	bf08      	it	eq
 8006ba2:	68f5      	ldreq	r5, [r6, #12]
 8006ba4:	e7da      	b.n	8006b5c <_vfiprintf_r+0x20>
 8006ba6:	89ab      	ldrh	r3, [r5, #12]
 8006ba8:	0598      	lsls	r0, r3, #22
 8006baa:	d4ed      	bmi.n	8006b88 <_vfiprintf_r+0x4c>
 8006bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bae:	f7ff fdaa 	bl	8006706 <__retarget_lock_release_recursive>
 8006bb2:	e7e9      	b.n	8006b88 <_vfiprintf_r+0x4c>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb8:	2320      	movs	r3, #32
 8006bba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bc2:	2330      	movs	r3, #48	; 0x30
 8006bc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006d88 <_vfiprintf_r+0x24c>
 8006bc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bcc:	f04f 0901 	mov.w	r9, #1
 8006bd0:	4623      	mov	r3, r4
 8006bd2:	469a      	mov	sl, r3
 8006bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bd8:	b10a      	cbz	r2, 8006bde <_vfiprintf_r+0xa2>
 8006bda:	2a25      	cmp	r2, #37	; 0x25
 8006bdc:	d1f9      	bne.n	8006bd2 <_vfiprintf_r+0x96>
 8006bde:	ebba 0b04 	subs.w	fp, sl, r4
 8006be2:	d00b      	beq.n	8006bfc <_vfiprintf_r+0xc0>
 8006be4:	465b      	mov	r3, fp
 8006be6:	4622      	mov	r2, r4
 8006be8:	4629      	mov	r1, r5
 8006bea:	4630      	mov	r0, r6
 8006bec:	f7ff ff93 	bl	8006b16 <__sfputs_r>
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	f000 80aa 	beq.w	8006d4a <_vfiprintf_r+0x20e>
 8006bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bf8:	445a      	add	r2, fp
 8006bfa:	9209      	str	r2, [sp, #36]	; 0x24
 8006bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 80a2 	beq.w	8006d4a <_vfiprintf_r+0x20e>
 8006c06:	2300      	movs	r3, #0
 8006c08:	f04f 32ff 	mov.w	r2, #4294967295
 8006c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c10:	f10a 0a01 	add.w	sl, sl, #1
 8006c14:	9304      	str	r3, [sp, #16]
 8006c16:	9307      	str	r3, [sp, #28]
 8006c18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c1c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c1e:	4654      	mov	r4, sl
 8006c20:	2205      	movs	r2, #5
 8006c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c26:	4858      	ldr	r0, [pc, #352]	; (8006d88 <_vfiprintf_r+0x24c>)
 8006c28:	f7f9 fae2 	bl	80001f0 <memchr>
 8006c2c:	9a04      	ldr	r2, [sp, #16]
 8006c2e:	b9d8      	cbnz	r0, 8006c68 <_vfiprintf_r+0x12c>
 8006c30:	06d1      	lsls	r1, r2, #27
 8006c32:	bf44      	itt	mi
 8006c34:	2320      	movmi	r3, #32
 8006c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c3a:	0713      	lsls	r3, r2, #28
 8006c3c:	bf44      	itt	mi
 8006c3e:	232b      	movmi	r3, #43	; 0x2b
 8006c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c44:	f89a 3000 	ldrb.w	r3, [sl]
 8006c48:	2b2a      	cmp	r3, #42	; 0x2a
 8006c4a:	d015      	beq.n	8006c78 <_vfiprintf_r+0x13c>
 8006c4c:	9a07      	ldr	r2, [sp, #28]
 8006c4e:	4654      	mov	r4, sl
 8006c50:	2000      	movs	r0, #0
 8006c52:	f04f 0c0a 	mov.w	ip, #10
 8006c56:	4621      	mov	r1, r4
 8006c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c5c:	3b30      	subs	r3, #48	; 0x30
 8006c5e:	2b09      	cmp	r3, #9
 8006c60:	d94e      	bls.n	8006d00 <_vfiprintf_r+0x1c4>
 8006c62:	b1b0      	cbz	r0, 8006c92 <_vfiprintf_r+0x156>
 8006c64:	9207      	str	r2, [sp, #28]
 8006c66:	e014      	b.n	8006c92 <_vfiprintf_r+0x156>
 8006c68:	eba0 0308 	sub.w	r3, r0, r8
 8006c6c:	fa09 f303 	lsl.w	r3, r9, r3
 8006c70:	4313      	orrs	r3, r2
 8006c72:	9304      	str	r3, [sp, #16]
 8006c74:	46a2      	mov	sl, r4
 8006c76:	e7d2      	b.n	8006c1e <_vfiprintf_r+0xe2>
 8006c78:	9b03      	ldr	r3, [sp, #12]
 8006c7a:	1d19      	adds	r1, r3, #4
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	9103      	str	r1, [sp, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	bfbb      	ittet	lt
 8006c84:	425b      	neglt	r3, r3
 8006c86:	f042 0202 	orrlt.w	r2, r2, #2
 8006c8a:	9307      	strge	r3, [sp, #28]
 8006c8c:	9307      	strlt	r3, [sp, #28]
 8006c8e:	bfb8      	it	lt
 8006c90:	9204      	strlt	r2, [sp, #16]
 8006c92:	7823      	ldrb	r3, [r4, #0]
 8006c94:	2b2e      	cmp	r3, #46	; 0x2e
 8006c96:	d10c      	bne.n	8006cb2 <_vfiprintf_r+0x176>
 8006c98:	7863      	ldrb	r3, [r4, #1]
 8006c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c9c:	d135      	bne.n	8006d0a <_vfiprintf_r+0x1ce>
 8006c9e:	9b03      	ldr	r3, [sp, #12]
 8006ca0:	1d1a      	adds	r2, r3, #4
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	9203      	str	r2, [sp, #12]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	bfb8      	it	lt
 8006caa:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cae:	3402      	adds	r4, #2
 8006cb0:	9305      	str	r3, [sp, #20]
 8006cb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006d98 <_vfiprintf_r+0x25c>
 8006cb6:	7821      	ldrb	r1, [r4, #0]
 8006cb8:	2203      	movs	r2, #3
 8006cba:	4650      	mov	r0, sl
 8006cbc:	f7f9 fa98 	bl	80001f0 <memchr>
 8006cc0:	b140      	cbz	r0, 8006cd4 <_vfiprintf_r+0x198>
 8006cc2:	2340      	movs	r3, #64	; 0x40
 8006cc4:	eba0 000a 	sub.w	r0, r0, sl
 8006cc8:	fa03 f000 	lsl.w	r0, r3, r0
 8006ccc:	9b04      	ldr	r3, [sp, #16]
 8006cce:	4303      	orrs	r3, r0
 8006cd0:	3401      	adds	r4, #1
 8006cd2:	9304      	str	r3, [sp, #16]
 8006cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cd8:	482c      	ldr	r0, [pc, #176]	; (8006d8c <_vfiprintf_r+0x250>)
 8006cda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cde:	2206      	movs	r2, #6
 8006ce0:	f7f9 fa86 	bl	80001f0 <memchr>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	d03f      	beq.n	8006d68 <_vfiprintf_r+0x22c>
 8006ce8:	4b29      	ldr	r3, [pc, #164]	; (8006d90 <_vfiprintf_r+0x254>)
 8006cea:	bb1b      	cbnz	r3, 8006d34 <_vfiprintf_r+0x1f8>
 8006cec:	9b03      	ldr	r3, [sp, #12]
 8006cee:	3307      	adds	r3, #7
 8006cf0:	f023 0307 	bic.w	r3, r3, #7
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	9303      	str	r3, [sp, #12]
 8006cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cfa:	443b      	add	r3, r7
 8006cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8006cfe:	e767      	b.n	8006bd0 <_vfiprintf_r+0x94>
 8006d00:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d04:	460c      	mov	r4, r1
 8006d06:	2001      	movs	r0, #1
 8006d08:	e7a5      	b.n	8006c56 <_vfiprintf_r+0x11a>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	3401      	adds	r4, #1
 8006d0e:	9305      	str	r3, [sp, #20]
 8006d10:	4619      	mov	r1, r3
 8006d12:	f04f 0c0a 	mov.w	ip, #10
 8006d16:	4620      	mov	r0, r4
 8006d18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d1c:	3a30      	subs	r2, #48	; 0x30
 8006d1e:	2a09      	cmp	r2, #9
 8006d20:	d903      	bls.n	8006d2a <_vfiprintf_r+0x1ee>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0c5      	beq.n	8006cb2 <_vfiprintf_r+0x176>
 8006d26:	9105      	str	r1, [sp, #20]
 8006d28:	e7c3      	b.n	8006cb2 <_vfiprintf_r+0x176>
 8006d2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d2e:	4604      	mov	r4, r0
 8006d30:	2301      	movs	r3, #1
 8006d32:	e7f0      	b.n	8006d16 <_vfiprintf_r+0x1da>
 8006d34:	ab03      	add	r3, sp, #12
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	462a      	mov	r2, r5
 8006d3a:	4b16      	ldr	r3, [pc, #88]	; (8006d94 <_vfiprintf_r+0x258>)
 8006d3c:	a904      	add	r1, sp, #16
 8006d3e:	4630      	mov	r0, r6
 8006d40:	f3af 8000 	nop.w
 8006d44:	4607      	mov	r7, r0
 8006d46:	1c78      	adds	r0, r7, #1
 8006d48:	d1d6      	bne.n	8006cf8 <_vfiprintf_r+0x1bc>
 8006d4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d4c:	07d9      	lsls	r1, r3, #31
 8006d4e:	d405      	bmi.n	8006d5c <_vfiprintf_r+0x220>
 8006d50:	89ab      	ldrh	r3, [r5, #12]
 8006d52:	059a      	lsls	r2, r3, #22
 8006d54:	d402      	bmi.n	8006d5c <_vfiprintf_r+0x220>
 8006d56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d58:	f7ff fcd5 	bl	8006706 <__retarget_lock_release_recursive>
 8006d5c:	89ab      	ldrh	r3, [r5, #12]
 8006d5e:	065b      	lsls	r3, r3, #25
 8006d60:	f53f af12 	bmi.w	8006b88 <_vfiprintf_r+0x4c>
 8006d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d66:	e711      	b.n	8006b8c <_vfiprintf_r+0x50>
 8006d68:	ab03      	add	r3, sp, #12
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	462a      	mov	r2, r5
 8006d6e:	4b09      	ldr	r3, [pc, #36]	; (8006d94 <_vfiprintf_r+0x258>)
 8006d70:	a904      	add	r1, sp, #16
 8006d72:	4630      	mov	r0, r6
 8006d74:	f000 f880 	bl	8006e78 <_printf_i>
 8006d78:	e7e4      	b.n	8006d44 <_vfiprintf_r+0x208>
 8006d7a:	bf00      	nop
 8006d7c:	08007fa8 	.word	0x08007fa8
 8006d80:	08007fc8 	.word	0x08007fc8
 8006d84:	08007f88 	.word	0x08007f88
 8006d88:	08007fe8 	.word	0x08007fe8
 8006d8c:	08007ff2 	.word	0x08007ff2
 8006d90:	00000000 	.word	0x00000000
 8006d94:	08006b17 	.word	0x08006b17
 8006d98:	08007fee 	.word	0x08007fee

08006d9c <_printf_common>:
 8006d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da0:	4616      	mov	r6, r2
 8006da2:	4699      	mov	r9, r3
 8006da4:	688a      	ldr	r2, [r1, #8]
 8006da6:	690b      	ldr	r3, [r1, #16]
 8006da8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006dac:	4293      	cmp	r3, r2
 8006dae:	bfb8      	it	lt
 8006db0:	4613      	movlt	r3, r2
 8006db2:	6033      	str	r3, [r6, #0]
 8006db4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006db8:	4607      	mov	r7, r0
 8006dba:	460c      	mov	r4, r1
 8006dbc:	b10a      	cbz	r2, 8006dc2 <_printf_common+0x26>
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	6033      	str	r3, [r6, #0]
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	0699      	lsls	r1, r3, #26
 8006dc6:	bf42      	ittt	mi
 8006dc8:	6833      	ldrmi	r3, [r6, #0]
 8006dca:	3302      	addmi	r3, #2
 8006dcc:	6033      	strmi	r3, [r6, #0]
 8006dce:	6825      	ldr	r5, [r4, #0]
 8006dd0:	f015 0506 	ands.w	r5, r5, #6
 8006dd4:	d106      	bne.n	8006de4 <_printf_common+0x48>
 8006dd6:	f104 0a19 	add.w	sl, r4, #25
 8006dda:	68e3      	ldr	r3, [r4, #12]
 8006ddc:	6832      	ldr	r2, [r6, #0]
 8006dde:	1a9b      	subs	r3, r3, r2
 8006de0:	42ab      	cmp	r3, r5
 8006de2:	dc26      	bgt.n	8006e32 <_printf_common+0x96>
 8006de4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006de8:	1e13      	subs	r3, r2, #0
 8006dea:	6822      	ldr	r2, [r4, #0]
 8006dec:	bf18      	it	ne
 8006dee:	2301      	movne	r3, #1
 8006df0:	0692      	lsls	r2, r2, #26
 8006df2:	d42b      	bmi.n	8006e4c <_printf_common+0xb0>
 8006df4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006df8:	4649      	mov	r1, r9
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	47c0      	blx	r8
 8006dfe:	3001      	adds	r0, #1
 8006e00:	d01e      	beq.n	8006e40 <_printf_common+0xa4>
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	68e5      	ldr	r5, [r4, #12]
 8006e06:	6832      	ldr	r2, [r6, #0]
 8006e08:	f003 0306 	and.w	r3, r3, #6
 8006e0c:	2b04      	cmp	r3, #4
 8006e0e:	bf08      	it	eq
 8006e10:	1aad      	subeq	r5, r5, r2
 8006e12:	68a3      	ldr	r3, [r4, #8]
 8006e14:	6922      	ldr	r2, [r4, #16]
 8006e16:	bf0c      	ite	eq
 8006e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e1c:	2500      	movne	r5, #0
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	bfc4      	itt	gt
 8006e22:	1a9b      	subgt	r3, r3, r2
 8006e24:	18ed      	addgt	r5, r5, r3
 8006e26:	2600      	movs	r6, #0
 8006e28:	341a      	adds	r4, #26
 8006e2a:	42b5      	cmp	r5, r6
 8006e2c:	d11a      	bne.n	8006e64 <_printf_common+0xc8>
 8006e2e:	2000      	movs	r0, #0
 8006e30:	e008      	b.n	8006e44 <_printf_common+0xa8>
 8006e32:	2301      	movs	r3, #1
 8006e34:	4652      	mov	r2, sl
 8006e36:	4649      	mov	r1, r9
 8006e38:	4638      	mov	r0, r7
 8006e3a:	47c0      	blx	r8
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d103      	bne.n	8006e48 <_printf_common+0xac>
 8006e40:	f04f 30ff 	mov.w	r0, #4294967295
 8006e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e48:	3501      	adds	r5, #1
 8006e4a:	e7c6      	b.n	8006dda <_printf_common+0x3e>
 8006e4c:	18e1      	adds	r1, r4, r3
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	2030      	movs	r0, #48	; 0x30
 8006e52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e56:	4422      	add	r2, r4
 8006e58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e60:	3302      	adds	r3, #2
 8006e62:	e7c7      	b.n	8006df4 <_printf_common+0x58>
 8006e64:	2301      	movs	r3, #1
 8006e66:	4622      	mov	r2, r4
 8006e68:	4649      	mov	r1, r9
 8006e6a:	4638      	mov	r0, r7
 8006e6c:	47c0      	blx	r8
 8006e6e:	3001      	adds	r0, #1
 8006e70:	d0e6      	beq.n	8006e40 <_printf_common+0xa4>
 8006e72:	3601      	adds	r6, #1
 8006e74:	e7d9      	b.n	8006e2a <_printf_common+0x8e>
	...

08006e78 <_printf_i>:
 8006e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e7c:	7e0f      	ldrb	r7, [r1, #24]
 8006e7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e80:	2f78      	cmp	r7, #120	; 0x78
 8006e82:	4691      	mov	r9, r2
 8006e84:	4680      	mov	r8, r0
 8006e86:	460c      	mov	r4, r1
 8006e88:	469a      	mov	sl, r3
 8006e8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e8e:	d807      	bhi.n	8006ea0 <_printf_i+0x28>
 8006e90:	2f62      	cmp	r7, #98	; 0x62
 8006e92:	d80a      	bhi.n	8006eaa <_printf_i+0x32>
 8006e94:	2f00      	cmp	r7, #0
 8006e96:	f000 80d8 	beq.w	800704a <_printf_i+0x1d2>
 8006e9a:	2f58      	cmp	r7, #88	; 0x58
 8006e9c:	f000 80a3 	beq.w	8006fe6 <_printf_i+0x16e>
 8006ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ea4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ea8:	e03a      	b.n	8006f20 <_printf_i+0xa8>
 8006eaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006eae:	2b15      	cmp	r3, #21
 8006eb0:	d8f6      	bhi.n	8006ea0 <_printf_i+0x28>
 8006eb2:	a101      	add	r1, pc, #4	; (adr r1, 8006eb8 <_printf_i+0x40>)
 8006eb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006eb8:	08006f11 	.word	0x08006f11
 8006ebc:	08006f25 	.word	0x08006f25
 8006ec0:	08006ea1 	.word	0x08006ea1
 8006ec4:	08006ea1 	.word	0x08006ea1
 8006ec8:	08006ea1 	.word	0x08006ea1
 8006ecc:	08006ea1 	.word	0x08006ea1
 8006ed0:	08006f25 	.word	0x08006f25
 8006ed4:	08006ea1 	.word	0x08006ea1
 8006ed8:	08006ea1 	.word	0x08006ea1
 8006edc:	08006ea1 	.word	0x08006ea1
 8006ee0:	08006ea1 	.word	0x08006ea1
 8006ee4:	08007031 	.word	0x08007031
 8006ee8:	08006f55 	.word	0x08006f55
 8006eec:	08007013 	.word	0x08007013
 8006ef0:	08006ea1 	.word	0x08006ea1
 8006ef4:	08006ea1 	.word	0x08006ea1
 8006ef8:	08007053 	.word	0x08007053
 8006efc:	08006ea1 	.word	0x08006ea1
 8006f00:	08006f55 	.word	0x08006f55
 8006f04:	08006ea1 	.word	0x08006ea1
 8006f08:	08006ea1 	.word	0x08006ea1
 8006f0c:	0800701b 	.word	0x0800701b
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	1d1a      	adds	r2, r3, #4
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	602a      	str	r2, [r5, #0]
 8006f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f20:	2301      	movs	r3, #1
 8006f22:	e0a3      	b.n	800706c <_printf_i+0x1f4>
 8006f24:	6820      	ldr	r0, [r4, #0]
 8006f26:	6829      	ldr	r1, [r5, #0]
 8006f28:	0606      	lsls	r6, r0, #24
 8006f2a:	f101 0304 	add.w	r3, r1, #4
 8006f2e:	d50a      	bpl.n	8006f46 <_printf_i+0xce>
 8006f30:	680e      	ldr	r6, [r1, #0]
 8006f32:	602b      	str	r3, [r5, #0]
 8006f34:	2e00      	cmp	r6, #0
 8006f36:	da03      	bge.n	8006f40 <_printf_i+0xc8>
 8006f38:	232d      	movs	r3, #45	; 0x2d
 8006f3a:	4276      	negs	r6, r6
 8006f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f40:	485e      	ldr	r0, [pc, #376]	; (80070bc <_printf_i+0x244>)
 8006f42:	230a      	movs	r3, #10
 8006f44:	e019      	b.n	8006f7a <_printf_i+0x102>
 8006f46:	680e      	ldr	r6, [r1, #0]
 8006f48:	602b      	str	r3, [r5, #0]
 8006f4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f4e:	bf18      	it	ne
 8006f50:	b236      	sxthne	r6, r6
 8006f52:	e7ef      	b.n	8006f34 <_printf_i+0xbc>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	6820      	ldr	r0, [r4, #0]
 8006f58:	1d19      	adds	r1, r3, #4
 8006f5a:	6029      	str	r1, [r5, #0]
 8006f5c:	0601      	lsls	r1, r0, #24
 8006f5e:	d501      	bpl.n	8006f64 <_printf_i+0xec>
 8006f60:	681e      	ldr	r6, [r3, #0]
 8006f62:	e002      	b.n	8006f6a <_printf_i+0xf2>
 8006f64:	0646      	lsls	r6, r0, #25
 8006f66:	d5fb      	bpl.n	8006f60 <_printf_i+0xe8>
 8006f68:	881e      	ldrh	r6, [r3, #0]
 8006f6a:	4854      	ldr	r0, [pc, #336]	; (80070bc <_printf_i+0x244>)
 8006f6c:	2f6f      	cmp	r7, #111	; 0x6f
 8006f6e:	bf0c      	ite	eq
 8006f70:	2308      	moveq	r3, #8
 8006f72:	230a      	movne	r3, #10
 8006f74:	2100      	movs	r1, #0
 8006f76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f7a:	6865      	ldr	r5, [r4, #4]
 8006f7c:	60a5      	str	r5, [r4, #8]
 8006f7e:	2d00      	cmp	r5, #0
 8006f80:	bfa2      	ittt	ge
 8006f82:	6821      	ldrge	r1, [r4, #0]
 8006f84:	f021 0104 	bicge.w	r1, r1, #4
 8006f88:	6021      	strge	r1, [r4, #0]
 8006f8a:	b90e      	cbnz	r6, 8006f90 <_printf_i+0x118>
 8006f8c:	2d00      	cmp	r5, #0
 8006f8e:	d04d      	beq.n	800702c <_printf_i+0x1b4>
 8006f90:	4615      	mov	r5, r2
 8006f92:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f96:	fb03 6711 	mls	r7, r3, r1, r6
 8006f9a:	5dc7      	ldrb	r7, [r0, r7]
 8006f9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006fa0:	4637      	mov	r7, r6
 8006fa2:	42bb      	cmp	r3, r7
 8006fa4:	460e      	mov	r6, r1
 8006fa6:	d9f4      	bls.n	8006f92 <_printf_i+0x11a>
 8006fa8:	2b08      	cmp	r3, #8
 8006faa:	d10b      	bne.n	8006fc4 <_printf_i+0x14c>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	07de      	lsls	r6, r3, #31
 8006fb0:	d508      	bpl.n	8006fc4 <_printf_i+0x14c>
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	6861      	ldr	r1, [r4, #4]
 8006fb6:	4299      	cmp	r1, r3
 8006fb8:	bfde      	ittt	le
 8006fba:	2330      	movle	r3, #48	; 0x30
 8006fbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006fc4:	1b52      	subs	r2, r2, r5
 8006fc6:	6122      	str	r2, [r4, #16]
 8006fc8:	f8cd a000 	str.w	sl, [sp]
 8006fcc:	464b      	mov	r3, r9
 8006fce:	aa03      	add	r2, sp, #12
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	f7ff fee2 	bl	8006d9c <_printf_common>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d14c      	bne.n	8007076 <_printf_i+0x1fe>
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe0:	b004      	add	sp, #16
 8006fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe6:	4835      	ldr	r0, [pc, #212]	; (80070bc <_printf_i+0x244>)
 8006fe8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006fec:	6829      	ldr	r1, [r5, #0]
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ff4:	6029      	str	r1, [r5, #0]
 8006ff6:	061d      	lsls	r5, r3, #24
 8006ff8:	d514      	bpl.n	8007024 <_printf_i+0x1ac>
 8006ffa:	07df      	lsls	r7, r3, #31
 8006ffc:	bf44      	itt	mi
 8006ffe:	f043 0320 	orrmi.w	r3, r3, #32
 8007002:	6023      	strmi	r3, [r4, #0]
 8007004:	b91e      	cbnz	r6, 800700e <_printf_i+0x196>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	f023 0320 	bic.w	r3, r3, #32
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	2310      	movs	r3, #16
 8007010:	e7b0      	b.n	8006f74 <_printf_i+0xfc>
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	f043 0320 	orr.w	r3, r3, #32
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	2378      	movs	r3, #120	; 0x78
 800701c:	4828      	ldr	r0, [pc, #160]	; (80070c0 <_printf_i+0x248>)
 800701e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007022:	e7e3      	b.n	8006fec <_printf_i+0x174>
 8007024:	0659      	lsls	r1, r3, #25
 8007026:	bf48      	it	mi
 8007028:	b2b6      	uxthmi	r6, r6
 800702a:	e7e6      	b.n	8006ffa <_printf_i+0x182>
 800702c:	4615      	mov	r5, r2
 800702e:	e7bb      	b.n	8006fa8 <_printf_i+0x130>
 8007030:	682b      	ldr	r3, [r5, #0]
 8007032:	6826      	ldr	r6, [r4, #0]
 8007034:	6961      	ldr	r1, [r4, #20]
 8007036:	1d18      	adds	r0, r3, #4
 8007038:	6028      	str	r0, [r5, #0]
 800703a:	0635      	lsls	r5, r6, #24
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	d501      	bpl.n	8007044 <_printf_i+0x1cc>
 8007040:	6019      	str	r1, [r3, #0]
 8007042:	e002      	b.n	800704a <_printf_i+0x1d2>
 8007044:	0670      	lsls	r0, r6, #25
 8007046:	d5fb      	bpl.n	8007040 <_printf_i+0x1c8>
 8007048:	8019      	strh	r1, [r3, #0]
 800704a:	2300      	movs	r3, #0
 800704c:	6123      	str	r3, [r4, #16]
 800704e:	4615      	mov	r5, r2
 8007050:	e7ba      	b.n	8006fc8 <_printf_i+0x150>
 8007052:	682b      	ldr	r3, [r5, #0]
 8007054:	1d1a      	adds	r2, r3, #4
 8007056:	602a      	str	r2, [r5, #0]
 8007058:	681d      	ldr	r5, [r3, #0]
 800705a:	6862      	ldr	r2, [r4, #4]
 800705c:	2100      	movs	r1, #0
 800705e:	4628      	mov	r0, r5
 8007060:	f7f9 f8c6 	bl	80001f0 <memchr>
 8007064:	b108      	cbz	r0, 800706a <_printf_i+0x1f2>
 8007066:	1b40      	subs	r0, r0, r5
 8007068:	6060      	str	r0, [r4, #4]
 800706a:	6863      	ldr	r3, [r4, #4]
 800706c:	6123      	str	r3, [r4, #16]
 800706e:	2300      	movs	r3, #0
 8007070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007074:	e7a8      	b.n	8006fc8 <_printf_i+0x150>
 8007076:	6923      	ldr	r3, [r4, #16]
 8007078:	462a      	mov	r2, r5
 800707a:	4649      	mov	r1, r9
 800707c:	4640      	mov	r0, r8
 800707e:	47d0      	blx	sl
 8007080:	3001      	adds	r0, #1
 8007082:	d0ab      	beq.n	8006fdc <_printf_i+0x164>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	079b      	lsls	r3, r3, #30
 8007088:	d413      	bmi.n	80070b2 <_printf_i+0x23a>
 800708a:	68e0      	ldr	r0, [r4, #12]
 800708c:	9b03      	ldr	r3, [sp, #12]
 800708e:	4298      	cmp	r0, r3
 8007090:	bfb8      	it	lt
 8007092:	4618      	movlt	r0, r3
 8007094:	e7a4      	b.n	8006fe0 <_printf_i+0x168>
 8007096:	2301      	movs	r3, #1
 8007098:	4632      	mov	r2, r6
 800709a:	4649      	mov	r1, r9
 800709c:	4640      	mov	r0, r8
 800709e:	47d0      	blx	sl
 80070a0:	3001      	adds	r0, #1
 80070a2:	d09b      	beq.n	8006fdc <_printf_i+0x164>
 80070a4:	3501      	adds	r5, #1
 80070a6:	68e3      	ldr	r3, [r4, #12]
 80070a8:	9903      	ldr	r1, [sp, #12]
 80070aa:	1a5b      	subs	r3, r3, r1
 80070ac:	42ab      	cmp	r3, r5
 80070ae:	dcf2      	bgt.n	8007096 <_printf_i+0x21e>
 80070b0:	e7eb      	b.n	800708a <_printf_i+0x212>
 80070b2:	2500      	movs	r5, #0
 80070b4:	f104 0619 	add.w	r6, r4, #25
 80070b8:	e7f5      	b.n	80070a6 <_printf_i+0x22e>
 80070ba:	bf00      	nop
 80070bc:	08007ff9 	.word	0x08007ff9
 80070c0:	0800800a 	.word	0x0800800a

080070c4 <_sbrk_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	4d06      	ldr	r5, [pc, #24]	; (80070e0 <_sbrk_r+0x1c>)
 80070c8:	2300      	movs	r3, #0
 80070ca:	4604      	mov	r4, r0
 80070cc:	4608      	mov	r0, r1
 80070ce:	602b      	str	r3, [r5, #0]
 80070d0:	f7fb f8dc 	bl	800228c <_sbrk>
 80070d4:	1c43      	adds	r3, r0, #1
 80070d6:	d102      	bne.n	80070de <_sbrk_r+0x1a>
 80070d8:	682b      	ldr	r3, [r5, #0]
 80070da:	b103      	cbz	r3, 80070de <_sbrk_r+0x1a>
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	bd38      	pop	{r3, r4, r5, pc}
 80070e0:	20000228 	.word	0x20000228

080070e4 <__sread>:
 80070e4:	b510      	push	{r4, lr}
 80070e6:	460c      	mov	r4, r1
 80070e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ec:	f000 fb0a 	bl	8007704 <_read_r>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	bfab      	itete	ge
 80070f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070f6:	89a3      	ldrhlt	r3, [r4, #12]
 80070f8:	181b      	addge	r3, r3, r0
 80070fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070fe:	bfac      	ite	ge
 8007100:	6563      	strge	r3, [r4, #84]	; 0x54
 8007102:	81a3      	strhlt	r3, [r4, #12]
 8007104:	bd10      	pop	{r4, pc}

08007106 <__swrite>:
 8007106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800710a:	461f      	mov	r7, r3
 800710c:	898b      	ldrh	r3, [r1, #12]
 800710e:	05db      	lsls	r3, r3, #23
 8007110:	4605      	mov	r5, r0
 8007112:	460c      	mov	r4, r1
 8007114:	4616      	mov	r6, r2
 8007116:	d505      	bpl.n	8007124 <__swrite+0x1e>
 8007118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800711c:	2302      	movs	r3, #2
 800711e:	2200      	movs	r2, #0
 8007120:	f000 f9c8 	bl	80074b4 <_lseek_r>
 8007124:	89a3      	ldrh	r3, [r4, #12]
 8007126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800712a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800712e:	81a3      	strh	r3, [r4, #12]
 8007130:	4632      	mov	r2, r6
 8007132:	463b      	mov	r3, r7
 8007134:	4628      	mov	r0, r5
 8007136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800713a:	f000 b869 	b.w	8007210 <_write_r>

0800713e <__sseek>:
 800713e:	b510      	push	{r4, lr}
 8007140:	460c      	mov	r4, r1
 8007142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007146:	f000 f9b5 	bl	80074b4 <_lseek_r>
 800714a:	1c43      	adds	r3, r0, #1
 800714c:	89a3      	ldrh	r3, [r4, #12]
 800714e:	bf15      	itete	ne
 8007150:	6560      	strne	r0, [r4, #84]	; 0x54
 8007152:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007156:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800715a:	81a3      	strheq	r3, [r4, #12]
 800715c:	bf18      	it	ne
 800715e:	81a3      	strhne	r3, [r4, #12]
 8007160:	bd10      	pop	{r4, pc}

08007162 <__sclose>:
 8007162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007166:	f000 b8d3 	b.w	8007310 <_close_r>
	...

0800716c <__swbuf_r>:
 800716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716e:	460e      	mov	r6, r1
 8007170:	4614      	mov	r4, r2
 8007172:	4605      	mov	r5, r0
 8007174:	b118      	cbz	r0, 800717e <__swbuf_r+0x12>
 8007176:	6983      	ldr	r3, [r0, #24]
 8007178:	b90b      	cbnz	r3, 800717e <__swbuf_r+0x12>
 800717a:	f7ff fa25 	bl	80065c8 <__sinit>
 800717e:	4b21      	ldr	r3, [pc, #132]	; (8007204 <__swbuf_r+0x98>)
 8007180:	429c      	cmp	r4, r3
 8007182:	d12b      	bne.n	80071dc <__swbuf_r+0x70>
 8007184:	686c      	ldr	r4, [r5, #4]
 8007186:	69a3      	ldr	r3, [r4, #24]
 8007188:	60a3      	str	r3, [r4, #8]
 800718a:	89a3      	ldrh	r3, [r4, #12]
 800718c:	071a      	lsls	r2, r3, #28
 800718e:	d52f      	bpl.n	80071f0 <__swbuf_r+0x84>
 8007190:	6923      	ldr	r3, [r4, #16]
 8007192:	b36b      	cbz	r3, 80071f0 <__swbuf_r+0x84>
 8007194:	6923      	ldr	r3, [r4, #16]
 8007196:	6820      	ldr	r0, [r4, #0]
 8007198:	1ac0      	subs	r0, r0, r3
 800719a:	6963      	ldr	r3, [r4, #20]
 800719c:	b2f6      	uxtb	r6, r6
 800719e:	4283      	cmp	r3, r0
 80071a0:	4637      	mov	r7, r6
 80071a2:	dc04      	bgt.n	80071ae <__swbuf_r+0x42>
 80071a4:	4621      	mov	r1, r4
 80071a6:	4628      	mov	r0, r5
 80071a8:	f000 f948 	bl	800743c <_fflush_r>
 80071ac:	bb30      	cbnz	r0, 80071fc <__swbuf_r+0x90>
 80071ae:	68a3      	ldr	r3, [r4, #8]
 80071b0:	3b01      	subs	r3, #1
 80071b2:	60a3      	str	r3, [r4, #8]
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	1c5a      	adds	r2, r3, #1
 80071b8:	6022      	str	r2, [r4, #0]
 80071ba:	701e      	strb	r6, [r3, #0]
 80071bc:	6963      	ldr	r3, [r4, #20]
 80071be:	3001      	adds	r0, #1
 80071c0:	4283      	cmp	r3, r0
 80071c2:	d004      	beq.n	80071ce <__swbuf_r+0x62>
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	07db      	lsls	r3, r3, #31
 80071c8:	d506      	bpl.n	80071d8 <__swbuf_r+0x6c>
 80071ca:	2e0a      	cmp	r6, #10
 80071cc:	d104      	bne.n	80071d8 <__swbuf_r+0x6c>
 80071ce:	4621      	mov	r1, r4
 80071d0:	4628      	mov	r0, r5
 80071d2:	f000 f933 	bl	800743c <_fflush_r>
 80071d6:	b988      	cbnz	r0, 80071fc <__swbuf_r+0x90>
 80071d8:	4638      	mov	r0, r7
 80071da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071dc:	4b0a      	ldr	r3, [pc, #40]	; (8007208 <__swbuf_r+0x9c>)
 80071de:	429c      	cmp	r4, r3
 80071e0:	d101      	bne.n	80071e6 <__swbuf_r+0x7a>
 80071e2:	68ac      	ldr	r4, [r5, #8]
 80071e4:	e7cf      	b.n	8007186 <__swbuf_r+0x1a>
 80071e6:	4b09      	ldr	r3, [pc, #36]	; (800720c <__swbuf_r+0xa0>)
 80071e8:	429c      	cmp	r4, r3
 80071ea:	bf08      	it	eq
 80071ec:	68ec      	ldreq	r4, [r5, #12]
 80071ee:	e7ca      	b.n	8007186 <__swbuf_r+0x1a>
 80071f0:	4621      	mov	r1, r4
 80071f2:	4628      	mov	r0, r5
 80071f4:	f000 f81e 	bl	8007234 <__swsetup_r>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	d0cb      	beq.n	8007194 <__swbuf_r+0x28>
 80071fc:	f04f 37ff 	mov.w	r7, #4294967295
 8007200:	e7ea      	b.n	80071d8 <__swbuf_r+0x6c>
 8007202:	bf00      	nop
 8007204:	08007fa8 	.word	0x08007fa8
 8007208:	08007fc8 	.word	0x08007fc8
 800720c:	08007f88 	.word	0x08007f88

08007210 <_write_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	4d07      	ldr	r5, [pc, #28]	; (8007230 <_write_r+0x20>)
 8007214:	4604      	mov	r4, r0
 8007216:	4608      	mov	r0, r1
 8007218:	4611      	mov	r1, r2
 800721a:	2200      	movs	r2, #0
 800721c:	602a      	str	r2, [r5, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	f7fa ffe3 	bl	80021ea <_write>
 8007224:	1c43      	adds	r3, r0, #1
 8007226:	d102      	bne.n	800722e <_write_r+0x1e>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	b103      	cbz	r3, 800722e <_write_r+0x1e>
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	bd38      	pop	{r3, r4, r5, pc}
 8007230:	20000228 	.word	0x20000228

08007234 <__swsetup_r>:
 8007234:	4b32      	ldr	r3, [pc, #200]	; (8007300 <__swsetup_r+0xcc>)
 8007236:	b570      	push	{r4, r5, r6, lr}
 8007238:	681d      	ldr	r5, [r3, #0]
 800723a:	4606      	mov	r6, r0
 800723c:	460c      	mov	r4, r1
 800723e:	b125      	cbz	r5, 800724a <__swsetup_r+0x16>
 8007240:	69ab      	ldr	r3, [r5, #24]
 8007242:	b913      	cbnz	r3, 800724a <__swsetup_r+0x16>
 8007244:	4628      	mov	r0, r5
 8007246:	f7ff f9bf 	bl	80065c8 <__sinit>
 800724a:	4b2e      	ldr	r3, [pc, #184]	; (8007304 <__swsetup_r+0xd0>)
 800724c:	429c      	cmp	r4, r3
 800724e:	d10f      	bne.n	8007270 <__swsetup_r+0x3c>
 8007250:	686c      	ldr	r4, [r5, #4]
 8007252:	89a3      	ldrh	r3, [r4, #12]
 8007254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007258:	0719      	lsls	r1, r3, #28
 800725a:	d42c      	bmi.n	80072b6 <__swsetup_r+0x82>
 800725c:	06dd      	lsls	r5, r3, #27
 800725e:	d411      	bmi.n	8007284 <__swsetup_r+0x50>
 8007260:	2309      	movs	r3, #9
 8007262:	6033      	str	r3, [r6, #0]
 8007264:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007268:	81a3      	strh	r3, [r4, #12]
 800726a:	f04f 30ff 	mov.w	r0, #4294967295
 800726e:	e03e      	b.n	80072ee <__swsetup_r+0xba>
 8007270:	4b25      	ldr	r3, [pc, #148]	; (8007308 <__swsetup_r+0xd4>)
 8007272:	429c      	cmp	r4, r3
 8007274:	d101      	bne.n	800727a <__swsetup_r+0x46>
 8007276:	68ac      	ldr	r4, [r5, #8]
 8007278:	e7eb      	b.n	8007252 <__swsetup_r+0x1e>
 800727a:	4b24      	ldr	r3, [pc, #144]	; (800730c <__swsetup_r+0xd8>)
 800727c:	429c      	cmp	r4, r3
 800727e:	bf08      	it	eq
 8007280:	68ec      	ldreq	r4, [r5, #12]
 8007282:	e7e6      	b.n	8007252 <__swsetup_r+0x1e>
 8007284:	0758      	lsls	r0, r3, #29
 8007286:	d512      	bpl.n	80072ae <__swsetup_r+0x7a>
 8007288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800728a:	b141      	cbz	r1, 800729e <__swsetup_r+0x6a>
 800728c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007290:	4299      	cmp	r1, r3
 8007292:	d002      	beq.n	800729a <__swsetup_r+0x66>
 8007294:	4630      	mov	r0, r6
 8007296:	f000 f9b9 	bl	800760c <_free_r>
 800729a:	2300      	movs	r3, #0
 800729c:	6363      	str	r3, [r4, #52]	; 0x34
 800729e:	89a3      	ldrh	r3, [r4, #12]
 80072a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80072a4:	81a3      	strh	r3, [r4, #12]
 80072a6:	2300      	movs	r3, #0
 80072a8:	6063      	str	r3, [r4, #4]
 80072aa:	6923      	ldr	r3, [r4, #16]
 80072ac:	6023      	str	r3, [r4, #0]
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	f043 0308 	orr.w	r3, r3, #8
 80072b4:	81a3      	strh	r3, [r4, #12]
 80072b6:	6923      	ldr	r3, [r4, #16]
 80072b8:	b94b      	cbnz	r3, 80072ce <__swsetup_r+0x9a>
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80072c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072c4:	d003      	beq.n	80072ce <__swsetup_r+0x9a>
 80072c6:	4621      	mov	r1, r4
 80072c8:	4630      	mov	r0, r6
 80072ca:	f000 f92b 	bl	8007524 <__smakebuf_r>
 80072ce:	89a0      	ldrh	r0, [r4, #12]
 80072d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072d4:	f010 0301 	ands.w	r3, r0, #1
 80072d8:	d00a      	beq.n	80072f0 <__swsetup_r+0xbc>
 80072da:	2300      	movs	r3, #0
 80072dc:	60a3      	str	r3, [r4, #8]
 80072de:	6963      	ldr	r3, [r4, #20]
 80072e0:	425b      	negs	r3, r3
 80072e2:	61a3      	str	r3, [r4, #24]
 80072e4:	6923      	ldr	r3, [r4, #16]
 80072e6:	b943      	cbnz	r3, 80072fa <__swsetup_r+0xc6>
 80072e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80072ec:	d1ba      	bne.n	8007264 <__swsetup_r+0x30>
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
 80072f0:	0781      	lsls	r1, r0, #30
 80072f2:	bf58      	it	pl
 80072f4:	6963      	ldrpl	r3, [r4, #20]
 80072f6:	60a3      	str	r3, [r4, #8]
 80072f8:	e7f4      	b.n	80072e4 <__swsetup_r+0xb0>
 80072fa:	2000      	movs	r0, #0
 80072fc:	e7f7      	b.n	80072ee <__swsetup_r+0xba>
 80072fe:	bf00      	nop
 8007300:	2000000c 	.word	0x2000000c
 8007304:	08007fa8 	.word	0x08007fa8
 8007308:	08007fc8 	.word	0x08007fc8
 800730c:	08007f88 	.word	0x08007f88

08007310 <_close_r>:
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	4d06      	ldr	r5, [pc, #24]	; (800732c <_close_r+0x1c>)
 8007314:	2300      	movs	r3, #0
 8007316:	4604      	mov	r4, r0
 8007318:	4608      	mov	r0, r1
 800731a:	602b      	str	r3, [r5, #0]
 800731c:	f7fa ff81 	bl	8002222 <_close>
 8007320:	1c43      	adds	r3, r0, #1
 8007322:	d102      	bne.n	800732a <_close_r+0x1a>
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	b103      	cbz	r3, 800732a <_close_r+0x1a>
 8007328:	6023      	str	r3, [r4, #0]
 800732a:	bd38      	pop	{r3, r4, r5, pc}
 800732c:	20000228 	.word	0x20000228

08007330 <__sflush_r>:
 8007330:	898a      	ldrh	r2, [r1, #12]
 8007332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007336:	4605      	mov	r5, r0
 8007338:	0710      	lsls	r0, r2, #28
 800733a:	460c      	mov	r4, r1
 800733c:	d458      	bmi.n	80073f0 <__sflush_r+0xc0>
 800733e:	684b      	ldr	r3, [r1, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	dc05      	bgt.n	8007350 <__sflush_r+0x20>
 8007344:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007346:	2b00      	cmp	r3, #0
 8007348:	dc02      	bgt.n	8007350 <__sflush_r+0x20>
 800734a:	2000      	movs	r0, #0
 800734c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007352:	2e00      	cmp	r6, #0
 8007354:	d0f9      	beq.n	800734a <__sflush_r+0x1a>
 8007356:	2300      	movs	r3, #0
 8007358:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800735c:	682f      	ldr	r7, [r5, #0]
 800735e:	602b      	str	r3, [r5, #0]
 8007360:	d032      	beq.n	80073c8 <__sflush_r+0x98>
 8007362:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	075a      	lsls	r2, r3, #29
 8007368:	d505      	bpl.n	8007376 <__sflush_r+0x46>
 800736a:	6863      	ldr	r3, [r4, #4]
 800736c:	1ac0      	subs	r0, r0, r3
 800736e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007370:	b10b      	cbz	r3, 8007376 <__sflush_r+0x46>
 8007372:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007374:	1ac0      	subs	r0, r0, r3
 8007376:	2300      	movs	r3, #0
 8007378:	4602      	mov	r2, r0
 800737a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800737c:	6a21      	ldr	r1, [r4, #32]
 800737e:	4628      	mov	r0, r5
 8007380:	47b0      	blx	r6
 8007382:	1c43      	adds	r3, r0, #1
 8007384:	89a3      	ldrh	r3, [r4, #12]
 8007386:	d106      	bne.n	8007396 <__sflush_r+0x66>
 8007388:	6829      	ldr	r1, [r5, #0]
 800738a:	291d      	cmp	r1, #29
 800738c:	d82c      	bhi.n	80073e8 <__sflush_r+0xb8>
 800738e:	4a2a      	ldr	r2, [pc, #168]	; (8007438 <__sflush_r+0x108>)
 8007390:	40ca      	lsrs	r2, r1
 8007392:	07d6      	lsls	r6, r2, #31
 8007394:	d528      	bpl.n	80073e8 <__sflush_r+0xb8>
 8007396:	2200      	movs	r2, #0
 8007398:	6062      	str	r2, [r4, #4]
 800739a:	04d9      	lsls	r1, r3, #19
 800739c:	6922      	ldr	r2, [r4, #16]
 800739e:	6022      	str	r2, [r4, #0]
 80073a0:	d504      	bpl.n	80073ac <__sflush_r+0x7c>
 80073a2:	1c42      	adds	r2, r0, #1
 80073a4:	d101      	bne.n	80073aa <__sflush_r+0x7a>
 80073a6:	682b      	ldr	r3, [r5, #0]
 80073a8:	b903      	cbnz	r3, 80073ac <__sflush_r+0x7c>
 80073aa:	6560      	str	r0, [r4, #84]	; 0x54
 80073ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073ae:	602f      	str	r7, [r5, #0]
 80073b0:	2900      	cmp	r1, #0
 80073b2:	d0ca      	beq.n	800734a <__sflush_r+0x1a>
 80073b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073b8:	4299      	cmp	r1, r3
 80073ba:	d002      	beq.n	80073c2 <__sflush_r+0x92>
 80073bc:	4628      	mov	r0, r5
 80073be:	f000 f925 	bl	800760c <_free_r>
 80073c2:	2000      	movs	r0, #0
 80073c4:	6360      	str	r0, [r4, #52]	; 0x34
 80073c6:	e7c1      	b.n	800734c <__sflush_r+0x1c>
 80073c8:	6a21      	ldr	r1, [r4, #32]
 80073ca:	2301      	movs	r3, #1
 80073cc:	4628      	mov	r0, r5
 80073ce:	47b0      	blx	r6
 80073d0:	1c41      	adds	r1, r0, #1
 80073d2:	d1c7      	bne.n	8007364 <__sflush_r+0x34>
 80073d4:	682b      	ldr	r3, [r5, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d0c4      	beq.n	8007364 <__sflush_r+0x34>
 80073da:	2b1d      	cmp	r3, #29
 80073dc:	d001      	beq.n	80073e2 <__sflush_r+0xb2>
 80073de:	2b16      	cmp	r3, #22
 80073e0:	d101      	bne.n	80073e6 <__sflush_r+0xb6>
 80073e2:	602f      	str	r7, [r5, #0]
 80073e4:	e7b1      	b.n	800734a <__sflush_r+0x1a>
 80073e6:	89a3      	ldrh	r3, [r4, #12]
 80073e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073ec:	81a3      	strh	r3, [r4, #12]
 80073ee:	e7ad      	b.n	800734c <__sflush_r+0x1c>
 80073f0:	690f      	ldr	r7, [r1, #16]
 80073f2:	2f00      	cmp	r7, #0
 80073f4:	d0a9      	beq.n	800734a <__sflush_r+0x1a>
 80073f6:	0793      	lsls	r3, r2, #30
 80073f8:	680e      	ldr	r6, [r1, #0]
 80073fa:	bf08      	it	eq
 80073fc:	694b      	ldreq	r3, [r1, #20]
 80073fe:	600f      	str	r7, [r1, #0]
 8007400:	bf18      	it	ne
 8007402:	2300      	movne	r3, #0
 8007404:	eba6 0807 	sub.w	r8, r6, r7
 8007408:	608b      	str	r3, [r1, #8]
 800740a:	f1b8 0f00 	cmp.w	r8, #0
 800740e:	dd9c      	ble.n	800734a <__sflush_r+0x1a>
 8007410:	6a21      	ldr	r1, [r4, #32]
 8007412:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007414:	4643      	mov	r3, r8
 8007416:	463a      	mov	r2, r7
 8007418:	4628      	mov	r0, r5
 800741a:	47b0      	blx	r6
 800741c:	2800      	cmp	r0, #0
 800741e:	dc06      	bgt.n	800742e <__sflush_r+0xfe>
 8007420:	89a3      	ldrh	r3, [r4, #12]
 8007422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007426:	81a3      	strh	r3, [r4, #12]
 8007428:	f04f 30ff 	mov.w	r0, #4294967295
 800742c:	e78e      	b.n	800734c <__sflush_r+0x1c>
 800742e:	4407      	add	r7, r0
 8007430:	eba8 0800 	sub.w	r8, r8, r0
 8007434:	e7e9      	b.n	800740a <__sflush_r+0xda>
 8007436:	bf00      	nop
 8007438:	20400001 	.word	0x20400001

0800743c <_fflush_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	690b      	ldr	r3, [r1, #16]
 8007440:	4605      	mov	r5, r0
 8007442:	460c      	mov	r4, r1
 8007444:	b913      	cbnz	r3, 800744c <_fflush_r+0x10>
 8007446:	2500      	movs	r5, #0
 8007448:	4628      	mov	r0, r5
 800744a:	bd38      	pop	{r3, r4, r5, pc}
 800744c:	b118      	cbz	r0, 8007456 <_fflush_r+0x1a>
 800744e:	6983      	ldr	r3, [r0, #24]
 8007450:	b90b      	cbnz	r3, 8007456 <_fflush_r+0x1a>
 8007452:	f7ff f8b9 	bl	80065c8 <__sinit>
 8007456:	4b14      	ldr	r3, [pc, #80]	; (80074a8 <_fflush_r+0x6c>)
 8007458:	429c      	cmp	r4, r3
 800745a:	d11b      	bne.n	8007494 <_fflush_r+0x58>
 800745c:	686c      	ldr	r4, [r5, #4]
 800745e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d0ef      	beq.n	8007446 <_fflush_r+0xa>
 8007466:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007468:	07d0      	lsls	r0, r2, #31
 800746a:	d404      	bmi.n	8007476 <_fflush_r+0x3a>
 800746c:	0599      	lsls	r1, r3, #22
 800746e:	d402      	bmi.n	8007476 <_fflush_r+0x3a>
 8007470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007472:	f7ff f947 	bl	8006704 <__retarget_lock_acquire_recursive>
 8007476:	4628      	mov	r0, r5
 8007478:	4621      	mov	r1, r4
 800747a:	f7ff ff59 	bl	8007330 <__sflush_r>
 800747e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007480:	07da      	lsls	r2, r3, #31
 8007482:	4605      	mov	r5, r0
 8007484:	d4e0      	bmi.n	8007448 <_fflush_r+0xc>
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	059b      	lsls	r3, r3, #22
 800748a:	d4dd      	bmi.n	8007448 <_fflush_r+0xc>
 800748c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800748e:	f7ff f93a 	bl	8006706 <__retarget_lock_release_recursive>
 8007492:	e7d9      	b.n	8007448 <_fflush_r+0xc>
 8007494:	4b05      	ldr	r3, [pc, #20]	; (80074ac <_fflush_r+0x70>)
 8007496:	429c      	cmp	r4, r3
 8007498:	d101      	bne.n	800749e <_fflush_r+0x62>
 800749a:	68ac      	ldr	r4, [r5, #8]
 800749c:	e7df      	b.n	800745e <_fflush_r+0x22>
 800749e:	4b04      	ldr	r3, [pc, #16]	; (80074b0 <_fflush_r+0x74>)
 80074a0:	429c      	cmp	r4, r3
 80074a2:	bf08      	it	eq
 80074a4:	68ec      	ldreq	r4, [r5, #12]
 80074a6:	e7da      	b.n	800745e <_fflush_r+0x22>
 80074a8:	08007fa8 	.word	0x08007fa8
 80074ac:	08007fc8 	.word	0x08007fc8
 80074b0:	08007f88 	.word	0x08007f88

080074b4 <_lseek_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4d07      	ldr	r5, [pc, #28]	; (80074d4 <_lseek_r+0x20>)
 80074b8:	4604      	mov	r4, r0
 80074ba:	4608      	mov	r0, r1
 80074bc:	4611      	mov	r1, r2
 80074be:	2200      	movs	r2, #0
 80074c0:	602a      	str	r2, [r5, #0]
 80074c2:	461a      	mov	r2, r3
 80074c4:	f7fa fed4 	bl	8002270 <_lseek>
 80074c8:	1c43      	adds	r3, r0, #1
 80074ca:	d102      	bne.n	80074d2 <_lseek_r+0x1e>
 80074cc:	682b      	ldr	r3, [r5, #0]
 80074ce:	b103      	cbz	r3, 80074d2 <_lseek_r+0x1e>
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	bd38      	pop	{r3, r4, r5, pc}
 80074d4:	20000228 	.word	0x20000228

080074d8 <__swhatbuf_r>:
 80074d8:	b570      	push	{r4, r5, r6, lr}
 80074da:	460e      	mov	r6, r1
 80074dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e0:	2900      	cmp	r1, #0
 80074e2:	b096      	sub	sp, #88	; 0x58
 80074e4:	4614      	mov	r4, r2
 80074e6:	461d      	mov	r5, r3
 80074e8:	da08      	bge.n	80074fc <__swhatbuf_r+0x24>
 80074ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	602a      	str	r2, [r5, #0]
 80074f2:	061a      	lsls	r2, r3, #24
 80074f4:	d410      	bmi.n	8007518 <__swhatbuf_r+0x40>
 80074f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074fa:	e00e      	b.n	800751a <__swhatbuf_r+0x42>
 80074fc:	466a      	mov	r2, sp
 80074fe:	f000 f913 	bl	8007728 <_fstat_r>
 8007502:	2800      	cmp	r0, #0
 8007504:	dbf1      	blt.n	80074ea <__swhatbuf_r+0x12>
 8007506:	9a01      	ldr	r2, [sp, #4]
 8007508:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800750c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007510:	425a      	negs	r2, r3
 8007512:	415a      	adcs	r2, r3
 8007514:	602a      	str	r2, [r5, #0]
 8007516:	e7ee      	b.n	80074f6 <__swhatbuf_r+0x1e>
 8007518:	2340      	movs	r3, #64	; 0x40
 800751a:	2000      	movs	r0, #0
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	b016      	add	sp, #88	; 0x58
 8007520:	bd70      	pop	{r4, r5, r6, pc}
	...

08007524 <__smakebuf_r>:
 8007524:	898b      	ldrh	r3, [r1, #12]
 8007526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007528:	079d      	lsls	r5, r3, #30
 800752a:	4606      	mov	r6, r0
 800752c:	460c      	mov	r4, r1
 800752e:	d507      	bpl.n	8007540 <__smakebuf_r+0x1c>
 8007530:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	6123      	str	r3, [r4, #16]
 8007538:	2301      	movs	r3, #1
 800753a:	6163      	str	r3, [r4, #20]
 800753c:	b002      	add	sp, #8
 800753e:	bd70      	pop	{r4, r5, r6, pc}
 8007540:	ab01      	add	r3, sp, #4
 8007542:	466a      	mov	r2, sp
 8007544:	f7ff ffc8 	bl	80074d8 <__swhatbuf_r>
 8007548:	9900      	ldr	r1, [sp, #0]
 800754a:	4605      	mov	r5, r0
 800754c:	4630      	mov	r0, r6
 800754e:	f7ff f8fb 	bl	8006748 <_malloc_r>
 8007552:	b948      	cbnz	r0, 8007568 <__smakebuf_r+0x44>
 8007554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007558:	059a      	lsls	r2, r3, #22
 800755a:	d4ef      	bmi.n	800753c <__smakebuf_r+0x18>
 800755c:	f023 0303 	bic.w	r3, r3, #3
 8007560:	f043 0302 	orr.w	r3, r3, #2
 8007564:	81a3      	strh	r3, [r4, #12]
 8007566:	e7e3      	b.n	8007530 <__smakebuf_r+0xc>
 8007568:	4b0d      	ldr	r3, [pc, #52]	; (80075a0 <__smakebuf_r+0x7c>)
 800756a:	62b3      	str	r3, [r6, #40]	; 0x28
 800756c:	89a3      	ldrh	r3, [r4, #12]
 800756e:	6020      	str	r0, [r4, #0]
 8007570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007574:	81a3      	strh	r3, [r4, #12]
 8007576:	9b00      	ldr	r3, [sp, #0]
 8007578:	6163      	str	r3, [r4, #20]
 800757a:	9b01      	ldr	r3, [sp, #4]
 800757c:	6120      	str	r0, [r4, #16]
 800757e:	b15b      	cbz	r3, 8007598 <__smakebuf_r+0x74>
 8007580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007584:	4630      	mov	r0, r6
 8007586:	f000 f8e1 	bl	800774c <_isatty_r>
 800758a:	b128      	cbz	r0, 8007598 <__smakebuf_r+0x74>
 800758c:	89a3      	ldrh	r3, [r4, #12]
 800758e:	f023 0303 	bic.w	r3, r3, #3
 8007592:	f043 0301 	orr.w	r3, r3, #1
 8007596:	81a3      	strh	r3, [r4, #12]
 8007598:	89a0      	ldrh	r0, [r4, #12]
 800759a:	4305      	orrs	r5, r0
 800759c:	81a5      	strh	r5, [r4, #12]
 800759e:	e7cd      	b.n	800753c <__smakebuf_r+0x18>
 80075a0:	08006561 	.word	0x08006561

080075a4 <memcpy>:
 80075a4:	440a      	add	r2, r1
 80075a6:	4291      	cmp	r1, r2
 80075a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80075ac:	d100      	bne.n	80075b0 <memcpy+0xc>
 80075ae:	4770      	bx	lr
 80075b0:	b510      	push	{r4, lr}
 80075b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ba:	4291      	cmp	r1, r2
 80075bc:	d1f9      	bne.n	80075b2 <memcpy+0xe>
 80075be:	bd10      	pop	{r4, pc}

080075c0 <memmove>:
 80075c0:	4288      	cmp	r0, r1
 80075c2:	b510      	push	{r4, lr}
 80075c4:	eb01 0402 	add.w	r4, r1, r2
 80075c8:	d902      	bls.n	80075d0 <memmove+0x10>
 80075ca:	4284      	cmp	r4, r0
 80075cc:	4623      	mov	r3, r4
 80075ce:	d807      	bhi.n	80075e0 <memmove+0x20>
 80075d0:	1e43      	subs	r3, r0, #1
 80075d2:	42a1      	cmp	r1, r4
 80075d4:	d008      	beq.n	80075e8 <memmove+0x28>
 80075d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075de:	e7f8      	b.n	80075d2 <memmove+0x12>
 80075e0:	4402      	add	r2, r0
 80075e2:	4601      	mov	r1, r0
 80075e4:	428a      	cmp	r2, r1
 80075e6:	d100      	bne.n	80075ea <memmove+0x2a>
 80075e8:	bd10      	pop	{r4, pc}
 80075ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075f2:	e7f7      	b.n	80075e4 <memmove+0x24>

080075f4 <__malloc_lock>:
 80075f4:	4801      	ldr	r0, [pc, #4]	; (80075fc <__malloc_lock+0x8>)
 80075f6:	f7ff b885 	b.w	8006704 <__retarget_lock_acquire_recursive>
 80075fa:	bf00      	nop
 80075fc:	2000021c 	.word	0x2000021c

08007600 <__malloc_unlock>:
 8007600:	4801      	ldr	r0, [pc, #4]	; (8007608 <__malloc_unlock+0x8>)
 8007602:	f7ff b880 	b.w	8006706 <__retarget_lock_release_recursive>
 8007606:	bf00      	nop
 8007608:	2000021c 	.word	0x2000021c

0800760c <_free_r>:
 800760c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800760e:	2900      	cmp	r1, #0
 8007610:	d044      	beq.n	800769c <_free_r+0x90>
 8007612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007616:	9001      	str	r0, [sp, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	f1a1 0404 	sub.w	r4, r1, #4
 800761e:	bfb8      	it	lt
 8007620:	18e4      	addlt	r4, r4, r3
 8007622:	f7ff ffe7 	bl	80075f4 <__malloc_lock>
 8007626:	4a1e      	ldr	r2, [pc, #120]	; (80076a0 <_free_r+0x94>)
 8007628:	9801      	ldr	r0, [sp, #4]
 800762a:	6813      	ldr	r3, [r2, #0]
 800762c:	b933      	cbnz	r3, 800763c <_free_r+0x30>
 800762e:	6063      	str	r3, [r4, #4]
 8007630:	6014      	str	r4, [r2, #0]
 8007632:	b003      	add	sp, #12
 8007634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007638:	f7ff bfe2 	b.w	8007600 <__malloc_unlock>
 800763c:	42a3      	cmp	r3, r4
 800763e:	d908      	bls.n	8007652 <_free_r+0x46>
 8007640:	6825      	ldr	r5, [r4, #0]
 8007642:	1961      	adds	r1, r4, r5
 8007644:	428b      	cmp	r3, r1
 8007646:	bf01      	itttt	eq
 8007648:	6819      	ldreq	r1, [r3, #0]
 800764a:	685b      	ldreq	r3, [r3, #4]
 800764c:	1949      	addeq	r1, r1, r5
 800764e:	6021      	streq	r1, [r4, #0]
 8007650:	e7ed      	b.n	800762e <_free_r+0x22>
 8007652:	461a      	mov	r2, r3
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	b10b      	cbz	r3, 800765c <_free_r+0x50>
 8007658:	42a3      	cmp	r3, r4
 800765a:	d9fa      	bls.n	8007652 <_free_r+0x46>
 800765c:	6811      	ldr	r1, [r2, #0]
 800765e:	1855      	adds	r5, r2, r1
 8007660:	42a5      	cmp	r5, r4
 8007662:	d10b      	bne.n	800767c <_free_r+0x70>
 8007664:	6824      	ldr	r4, [r4, #0]
 8007666:	4421      	add	r1, r4
 8007668:	1854      	adds	r4, r2, r1
 800766a:	42a3      	cmp	r3, r4
 800766c:	6011      	str	r1, [r2, #0]
 800766e:	d1e0      	bne.n	8007632 <_free_r+0x26>
 8007670:	681c      	ldr	r4, [r3, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	6053      	str	r3, [r2, #4]
 8007676:	4421      	add	r1, r4
 8007678:	6011      	str	r1, [r2, #0]
 800767a:	e7da      	b.n	8007632 <_free_r+0x26>
 800767c:	d902      	bls.n	8007684 <_free_r+0x78>
 800767e:	230c      	movs	r3, #12
 8007680:	6003      	str	r3, [r0, #0]
 8007682:	e7d6      	b.n	8007632 <_free_r+0x26>
 8007684:	6825      	ldr	r5, [r4, #0]
 8007686:	1961      	adds	r1, r4, r5
 8007688:	428b      	cmp	r3, r1
 800768a:	bf04      	itt	eq
 800768c:	6819      	ldreq	r1, [r3, #0]
 800768e:	685b      	ldreq	r3, [r3, #4]
 8007690:	6063      	str	r3, [r4, #4]
 8007692:	bf04      	itt	eq
 8007694:	1949      	addeq	r1, r1, r5
 8007696:	6021      	streq	r1, [r4, #0]
 8007698:	6054      	str	r4, [r2, #4]
 800769a:	e7ca      	b.n	8007632 <_free_r+0x26>
 800769c:	b003      	add	sp, #12
 800769e:	bd30      	pop	{r4, r5, pc}
 80076a0:	20000220 	.word	0x20000220

080076a4 <_realloc_r>:
 80076a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a8:	4680      	mov	r8, r0
 80076aa:	4614      	mov	r4, r2
 80076ac:	460e      	mov	r6, r1
 80076ae:	b921      	cbnz	r1, 80076ba <_realloc_r+0x16>
 80076b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076b4:	4611      	mov	r1, r2
 80076b6:	f7ff b847 	b.w	8006748 <_malloc_r>
 80076ba:	b92a      	cbnz	r2, 80076c8 <_realloc_r+0x24>
 80076bc:	f7ff ffa6 	bl	800760c <_free_r>
 80076c0:	4625      	mov	r5, r4
 80076c2:	4628      	mov	r0, r5
 80076c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c8:	f000 f850 	bl	800776c <_malloc_usable_size_r>
 80076cc:	4284      	cmp	r4, r0
 80076ce:	4607      	mov	r7, r0
 80076d0:	d802      	bhi.n	80076d8 <_realloc_r+0x34>
 80076d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076d6:	d812      	bhi.n	80076fe <_realloc_r+0x5a>
 80076d8:	4621      	mov	r1, r4
 80076da:	4640      	mov	r0, r8
 80076dc:	f7ff f834 	bl	8006748 <_malloc_r>
 80076e0:	4605      	mov	r5, r0
 80076e2:	2800      	cmp	r0, #0
 80076e4:	d0ed      	beq.n	80076c2 <_realloc_r+0x1e>
 80076e6:	42bc      	cmp	r4, r7
 80076e8:	4622      	mov	r2, r4
 80076ea:	4631      	mov	r1, r6
 80076ec:	bf28      	it	cs
 80076ee:	463a      	movcs	r2, r7
 80076f0:	f7ff ff58 	bl	80075a4 <memcpy>
 80076f4:	4631      	mov	r1, r6
 80076f6:	4640      	mov	r0, r8
 80076f8:	f7ff ff88 	bl	800760c <_free_r>
 80076fc:	e7e1      	b.n	80076c2 <_realloc_r+0x1e>
 80076fe:	4635      	mov	r5, r6
 8007700:	e7df      	b.n	80076c2 <_realloc_r+0x1e>
	...

08007704 <_read_r>:
 8007704:	b538      	push	{r3, r4, r5, lr}
 8007706:	4d07      	ldr	r5, [pc, #28]	; (8007724 <_read_r+0x20>)
 8007708:	4604      	mov	r4, r0
 800770a:	4608      	mov	r0, r1
 800770c:	4611      	mov	r1, r2
 800770e:	2200      	movs	r2, #0
 8007710:	602a      	str	r2, [r5, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	f7fa fd4c 	bl	80021b0 <_read>
 8007718:	1c43      	adds	r3, r0, #1
 800771a:	d102      	bne.n	8007722 <_read_r+0x1e>
 800771c:	682b      	ldr	r3, [r5, #0]
 800771e:	b103      	cbz	r3, 8007722 <_read_r+0x1e>
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	bd38      	pop	{r3, r4, r5, pc}
 8007724:	20000228 	.word	0x20000228

08007728 <_fstat_r>:
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	4d07      	ldr	r5, [pc, #28]	; (8007748 <_fstat_r+0x20>)
 800772c:	2300      	movs	r3, #0
 800772e:	4604      	mov	r4, r0
 8007730:	4608      	mov	r0, r1
 8007732:	4611      	mov	r1, r2
 8007734:	602b      	str	r3, [r5, #0]
 8007736:	f7fa fd80 	bl	800223a <_fstat>
 800773a:	1c43      	adds	r3, r0, #1
 800773c:	d102      	bne.n	8007744 <_fstat_r+0x1c>
 800773e:	682b      	ldr	r3, [r5, #0]
 8007740:	b103      	cbz	r3, 8007744 <_fstat_r+0x1c>
 8007742:	6023      	str	r3, [r4, #0]
 8007744:	bd38      	pop	{r3, r4, r5, pc}
 8007746:	bf00      	nop
 8007748:	20000228 	.word	0x20000228

0800774c <_isatty_r>:
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	4d06      	ldr	r5, [pc, #24]	; (8007768 <_isatty_r+0x1c>)
 8007750:	2300      	movs	r3, #0
 8007752:	4604      	mov	r4, r0
 8007754:	4608      	mov	r0, r1
 8007756:	602b      	str	r3, [r5, #0]
 8007758:	f7fa fd7f 	bl	800225a <_isatty>
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	d102      	bne.n	8007766 <_isatty_r+0x1a>
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	b103      	cbz	r3, 8007766 <_isatty_r+0x1a>
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	bd38      	pop	{r3, r4, r5, pc}
 8007768:	20000228 	.word	0x20000228

0800776c <_malloc_usable_size_r>:
 800776c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007770:	1f18      	subs	r0, r3, #4
 8007772:	2b00      	cmp	r3, #0
 8007774:	bfbc      	itt	lt
 8007776:	580b      	ldrlt	r3, [r1, r0]
 8007778:	18c0      	addlt	r0, r0, r3
 800777a:	4770      	bx	lr

0800777c <atan2>:
 800777c:	f000 b82c 	b.w	80077d8 <__ieee754_atan2>

08007780 <sqrt>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	ed2d 8b02 	vpush	{d8}
 8007786:	ec55 4b10 	vmov	r4, r5, d0
 800778a:	f000 f8ef 	bl	800796c <__ieee754_sqrt>
 800778e:	4622      	mov	r2, r4
 8007790:	462b      	mov	r3, r5
 8007792:	4620      	mov	r0, r4
 8007794:	4629      	mov	r1, r5
 8007796:	eeb0 8a40 	vmov.f32	s16, s0
 800779a:	eef0 8a60 	vmov.f32	s17, s1
 800779e:	f7f9 f9cd 	bl	8000b3c <__aeabi_dcmpun>
 80077a2:	b990      	cbnz	r0, 80077ca <sqrt+0x4a>
 80077a4:	2200      	movs	r2, #0
 80077a6:	2300      	movs	r3, #0
 80077a8:	4620      	mov	r0, r4
 80077aa:	4629      	mov	r1, r5
 80077ac:	f7f9 f99e 	bl	8000aec <__aeabi_dcmplt>
 80077b0:	b158      	cbz	r0, 80077ca <sqrt+0x4a>
 80077b2:	f7fe fe47 	bl	8006444 <__errno>
 80077b6:	2321      	movs	r3, #33	; 0x21
 80077b8:	6003      	str	r3, [r0, #0]
 80077ba:	2200      	movs	r2, #0
 80077bc:	2300      	movs	r3, #0
 80077be:	4610      	mov	r0, r2
 80077c0:	4619      	mov	r1, r3
 80077c2:	f7f9 f84b 	bl	800085c <__aeabi_ddiv>
 80077c6:	ec41 0b18 	vmov	d8, r0, r1
 80077ca:	eeb0 0a48 	vmov.f32	s0, s16
 80077ce:	eef0 0a68 	vmov.f32	s1, s17
 80077d2:	ecbd 8b02 	vpop	{d8}
 80077d6:	bd38      	pop	{r3, r4, r5, pc}

080077d8 <__ieee754_atan2>:
 80077d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077dc:	ec57 6b11 	vmov	r6, r7, d1
 80077e0:	4273      	negs	r3, r6
 80077e2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007968 <__ieee754_atan2+0x190>
 80077e6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80077ea:	4333      	orrs	r3, r6
 80077ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80077f0:	4573      	cmp	r3, lr
 80077f2:	ec51 0b10 	vmov	r0, r1, d0
 80077f6:	ee11 8a10 	vmov	r8, s2
 80077fa:	d80a      	bhi.n	8007812 <__ieee754_atan2+0x3a>
 80077fc:	4244      	negs	r4, r0
 80077fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007802:	4304      	orrs	r4, r0
 8007804:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007808:	4574      	cmp	r4, lr
 800780a:	ee10 9a10 	vmov	r9, s0
 800780e:	468c      	mov	ip, r1
 8007810:	d907      	bls.n	8007822 <__ieee754_atan2+0x4a>
 8007812:	4632      	mov	r2, r6
 8007814:	463b      	mov	r3, r7
 8007816:	f7f8 fd41 	bl	800029c <__adddf3>
 800781a:	ec41 0b10 	vmov	d0, r0, r1
 800781e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007822:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007826:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800782a:	4334      	orrs	r4, r6
 800782c:	d103      	bne.n	8007836 <__ieee754_atan2+0x5e>
 800782e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007832:	f000 b94d 	b.w	8007ad0 <atan>
 8007836:	17bc      	asrs	r4, r7, #30
 8007838:	f004 0402 	and.w	r4, r4, #2
 800783c:	ea53 0909 	orrs.w	r9, r3, r9
 8007840:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007844:	d107      	bne.n	8007856 <__ieee754_atan2+0x7e>
 8007846:	2c02      	cmp	r4, #2
 8007848:	d060      	beq.n	800790c <__ieee754_atan2+0x134>
 800784a:	2c03      	cmp	r4, #3
 800784c:	d1e5      	bne.n	800781a <__ieee754_atan2+0x42>
 800784e:	a142      	add	r1, pc, #264	; (adr r1, 8007958 <__ieee754_atan2+0x180>)
 8007850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007854:	e7e1      	b.n	800781a <__ieee754_atan2+0x42>
 8007856:	ea52 0808 	orrs.w	r8, r2, r8
 800785a:	d106      	bne.n	800786a <__ieee754_atan2+0x92>
 800785c:	f1bc 0f00 	cmp.w	ip, #0
 8007860:	da5f      	bge.n	8007922 <__ieee754_atan2+0x14a>
 8007862:	a13f      	add	r1, pc, #252	; (adr r1, 8007960 <__ieee754_atan2+0x188>)
 8007864:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007868:	e7d7      	b.n	800781a <__ieee754_atan2+0x42>
 800786a:	4572      	cmp	r2, lr
 800786c:	d10f      	bne.n	800788e <__ieee754_atan2+0xb6>
 800786e:	4293      	cmp	r3, r2
 8007870:	f104 34ff 	add.w	r4, r4, #4294967295
 8007874:	d107      	bne.n	8007886 <__ieee754_atan2+0xae>
 8007876:	2c02      	cmp	r4, #2
 8007878:	d84c      	bhi.n	8007914 <__ieee754_atan2+0x13c>
 800787a:	4b35      	ldr	r3, [pc, #212]	; (8007950 <__ieee754_atan2+0x178>)
 800787c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007880:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007884:	e7c9      	b.n	800781a <__ieee754_atan2+0x42>
 8007886:	2c02      	cmp	r4, #2
 8007888:	d848      	bhi.n	800791c <__ieee754_atan2+0x144>
 800788a:	4b32      	ldr	r3, [pc, #200]	; (8007954 <__ieee754_atan2+0x17c>)
 800788c:	e7f6      	b.n	800787c <__ieee754_atan2+0xa4>
 800788e:	4573      	cmp	r3, lr
 8007890:	d0e4      	beq.n	800785c <__ieee754_atan2+0x84>
 8007892:	1a9b      	subs	r3, r3, r2
 8007894:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007898:	ea4f 5223 	mov.w	r2, r3, asr #20
 800789c:	da1e      	bge.n	80078dc <__ieee754_atan2+0x104>
 800789e:	2f00      	cmp	r7, #0
 80078a0:	da01      	bge.n	80078a6 <__ieee754_atan2+0xce>
 80078a2:	323c      	adds	r2, #60	; 0x3c
 80078a4:	db1e      	blt.n	80078e4 <__ieee754_atan2+0x10c>
 80078a6:	4632      	mov	r2, r6
 80078a8:	463b      	mov	r3, r7
 80078aa:	f7f8 ffd7 	bl	800085c <__aeabi_ddiv>
 80078ae:	ec41 0b10 	vmov	d0, r0, r1
 80078b2:	f000 faad 	bl	8007e10 <fabs>
 80078b6:	f000 f90b 	bl	8007ad0 <atan>
 80078ba:	ec51 0b10 	vmov	r0, r1, d0
 80078be:	2c01      	cmp	r4, #1
 80078c0:	d013      	beq.n	80078ea <__ieee754_atan2+0x112>
 80078c2:	2c02      	cmp	r4, #2
 80078c4:	d015      	beq.n	80078f2 <__ieee754_atan2+0x11a>
 80078c6:	2c00      	cmp	r4, #0
 80078c8:	d0a7      	beq.n	800781a <__ieee754_atan2+0x42>
 80078ca:	a319      	add	r3, pc, #100	; (adr r3, 8007930 <__ieee754_atan2+0x158>)
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	f7f8 fce2 	bl	8000298 <__aeabi_dsub>
 80078d4:	a318      	add	r3, pc, #96	; (adr r3, 8007938 <__ieee754_atan2+0x160>)
 80078d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078da:	e014      	b.n	8007906 <__ieee754_atan2+0x12e>
 80078dc:	a118      	add	r1, pc, #96	; (adr r1, 8007940 <__ieee754_atan2+0x168>)
 80078de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078e2:	e7ec      	b.n	80078be <__ieee754_atan2+0xe6>
 80078e4:	2000      	movs	r0, #0
 80078e6:	2100      	movs	r1, #0
 80078e8:	e7e9      	b.n	80078be <__ieee754_atan2+0xe6>
 80078ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078ee:	4619      	mov	r1, r3
 80078f0:	e793      	b.n	800781a <__ieee754_atan2+0x42>
 80078f2:	a30f      	add	r3, pc, #60	; (adr r3, 8007930 <__ieee754_atan2+0x158>)
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	f7f8 fcce 	bl	8000298 <__aeabi_dsub>
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	a10d      	add	r1, pc, #52	; (adr r1, 8007938 <__ieee754_atan2+0x160>)
 8007902:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007906:	f7f8 fcc7 	bl	8000298 <__aeabi_dsub>
 800790a:	e786      	b.n	800781a <__ieee754_atan2+0x42>
 800790c:	a10a      	add	r1, pc, #40	; (adr r1, 8007938 <__ieee754_atan2+0x160>)
 800790e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007912:	e782      	b.n	800781a <__ieee754_atan2+0x42>
 8007914:	a10c      	add	r1, pc, #48	; (adr r1, 8007948 <__ieee754_atan2+0x170>)
 8007916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800791a:	e77e      	b.n	800781a <__ieee754_atan2+0x42>
 800791c:	2000      	movs	r0, #0
 800791e:	2100      	movs	r1, #0
 8007920:	e77b      	b.n	800781a <__ieee754_atan2+0x42>
 8007922:	a107      	add	r1, pc, #28	; (adr r1, 8007940 <__ieee754_atan2+0x168>)
 8007924:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007928:	e777      	b.n	800781a <__ieee754_atan2+0x42>
 800792a:	bf00      	nop
 800792c:	f3af 8000 	nop.w
 8007930:	33145c07 	.word	0x33145c07
 8007934:	3ca1a626 	.word	0x3ca1a626
 8007938:	54442d18 	.word	0x54442d18
 800793c:	400921fb 	.word	0x400921fb
 8007940:	54442d18 	.word	0x54442d18
 8007944:	3ff921fb 	.word	0x3ff921fb
 8007948:	54442d18 	.word	0x54442d18
 800794c:	3fe921fb 	.word	0x3fe921fb
 8007950:	08008020 	.word	0x08008020
 8007954:	08008038 	.word	0x08008038
 8007958:	54442d18 	.word	0x54442d18
 800795c:	c00921fb 	.word	0xc00921fb
 8007960:	54442d18 	.word	0x54442d18
 8007964:	bff921fb 	.word	0xbff921fb
 8007968:	7ff00000 	.word	0x7ff00000

0800796c <__ieee754_sqrt>:
 800796c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007970:	ec55 4b10 	vmov	r4, r5, d0
 8007974:	4e55      	ldr	r6, [pc, #340]	; (8007acc <__ieee754_sqrt+0x160>)
 8007976:	43ae      	bics	r6, r5
 8007978:	ee10 0a10 	vmov	r0, s0
 800797c:	ee10 3a10 	vmov	r3, s0
 8007980:	462a      	mov	r2, r5
 8007982:	4629      	mov	r1, r5
 8007984:	d110      	bne.n	80079a8 <__ieee754_sqrt+0x3c>
 8007986:	ee10 2a10 	vmov	r2, s0
 800798a:	462b      	mov	r3, r5
 800798c:	f7f8 fe3c 	bl	8000608 <__aeabi_dmul>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	4620      	mov	r0, r4
 8007996:	4629      	mov	r1, r5
 8007998:	f7f8 fc80 	bl	800029c <__adddf3>
 800799c:	4604      	mov	r4, r0
 800799e:	460d      	mov	r5, r1
 80079a0:	ec45 4b10 	vmov	d0, r4, r5
 80079a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079a8:	2d00      	cmp	r5, #0
 80079aa:	dc10      	bgt.n	80079ce <__ieee754_sqrt+0x62>
 80079ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80079b0:	4330      	orrs	r0, r6
 80079b2:	d0f5      	beq.n	80079a0 <__ieee754_sqrt+0x34>
 80079b4:	b15d      	cbz	r5, 80079ce <__ieee754_sqrt+0x62>
 80079b6:	ee10 2a10 	vmov	r2, s0
 80079ba:	462b      	mov	r3, r5
 80079bc:	ee10 0a10 	vmov	r0, s0
 80079c0:	f7f8 fc6a 	bl	8000298 <__aeabi_dsub>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	f7f8 ff48 	bl	800085c <__aeabi_ddiv>
 80079cc:	e7e6      	b.n	800799c <__ieee754_sqrt+0x30>
 80079ce:	1512      	asrs	r2, r2, #20
 80079d0:	d074      	beq.n	8007abc <__ieee754_sqrt+0x150>
 80079d2:	07d4      	lsls	r4, r2, #31
 80079d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80079d8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80079dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80079e0:	bf5e      	ittt	pl
 80079e2:	0fda      	lsrpl	r2, r3, #31
 80079e4:	005b      	lslpl	r3, r3, #1
 80079e6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80079ea:	2400      	movs	r4, #0
 80079ec:	0fda      	lsrs	r2, r3, #31
 80079ee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80079f2:	107f      	asrs	r7, r7, #1
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	2516      	movs	r5, #22
 80079f8:	4620      	mov	r0, r4
 80079fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80079fe:	1886      	adds	r6, r0, r2
 8007a00:	428e      	cmp	r6, r1
 8007a02:	bfde      	ittt	le
 8007a04:	1b89      	suble	r1, r1, r6
 8007a06:	18b0      	addle	r0, r6, r2
 8007a08:	18a4      	addle	r4, r4, r2
 8007a0a:	0049      	lsls	r1, r1, #1
 8007a0c:	3d01      	subs	r5, #1
 8007a0e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007a12:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007a16:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007a1a:	d1f0      	bne.n	80079fe <__ieee754_sqrt+0x92>
 8007a1c:	462a      	mov	r2, r5
 8007a1e:	f04f 0e20 	mov.w	lr, #32
 8007a22:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007a26:	4281      	cmp	r1, r0
 8007a28:	eb06 0c05 	add.w	ip, r6, r5
 8007a2c:	dc02      	bgt.n	8007a34 <__ieee754_sqrt+0xc8>
 8007a2e:	d113      	bne.n	8007a58 <__ieee754_sqrt+0xec>
 8007a30:	459c      	cmp	ip, r3
 8007a32:	d811      	bhi.n	8007a58 <__ieee754_sqrt+0xec>
 8007a34:	f1bc 0f00 	cmp.w	ip, #0
 8007a38:	eb0c 0506 	add.w	r5, ip, r6
 8007a3c:	da43      	bge.n	8007ac6 <__ieee754_sqrt+0x15a>
 8007a3e:	2d00      	cmp	r5, #0
 8007a40:	db41      	blt.n	8007ac6 <__ieee754_sqrt+0x15a>
 8007a42:	f100 0801 	add.w	r8, r0, #1
 8007a46:	1a09      	subs	r1, r1, r0
 8007a48:	459c      	cmp	ip, r3
 8007a4a:	bf88      	it	hi
 8007a4c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007a50:	eba3 030c 	sub.w	r3, r3, ip
 8007a54:	4432      	add	r2, r6
 8007a56:	4640      	mov	r0, r8
 8007a58:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007a5c:	f1be 0e01 	subs.w	lr, lr, #1
 8007a60:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007a64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007a68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007a6c:	d1db      	bne.n	8007a26 <__ieee754_sqrt+0xba>
 8007a6e:	430b      	orrs	r3, r1
 8007a70:	d006      	beq.n	8007a80 <__ieee754_sqrt+0x114>
 8007a72:	1c50      	adds	r0, r2, #1
 8007a74:	bf13      	iteet	ne
 8007a76:	3201      	addne	r2, #1
 8007a78:	3401      	addeq	r4, #1
 8007a7a:	4672      	moveq	r2, lr
 8007a7c:	f022 0201 	bicne.w	r2, r2, #1
 8007a80:	1063      	asrs	r3, r4, #1
 8007a82:	0852      	lsrs	r2, r2, #1
 8007a84:	07e1      	lsls	r1, r4, #31
 8007a86:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007a8a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007a8e:	bf48      	it	mi
 8007a90:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007a94:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007a98:	4614      	mov	r4, r2
 8007a9a:	e781      	b.n	80079a0 <__ieee754_sqrt+0x34>
 8007a9c:	0ad9      	lsrs	r1, r3, #11
 8007a9e:	3815      	subs	r0, #21
 8007aa0:	055b      	lsls	r3, r3, #21
 8007aa2:	2900      	cmp	r1, #0
 8007aa4:	d0fa      	beq.n	8007a9c <__ieee754_sqrt+0x130>
 8007aa6:	02cd      	lsls	r5, r1, #11
 8007aa8:	d50a      	bpl.n	8007ac0 <__ieee754_sqrt+0x154>
 8007aaa:	f1c2 0420 	rsb	r4, r2, #32
 8007aae:	fa23 f404 	lsr.w	r4, r3, r4
 8007ab2:	1e55      	subs	r5, r2, #1
 8007ab4:	4093      	lsls	r3, r2
 8007ab6:	4321      	orrs	r1, r4
 8007ab8:	1b42      	subs	r2, r0, r5
 8007aba:	e78a      	b.n	80079d2 <__ieee754_sqrt+0x66>
 8007abc:	4610      	mov	r0, r2
 8007abe:	e7f0      	b.n	8007aa2 <__ieee754_sqrt+0x136>
 8007ac0:	0049      	lsls	r1, r1, #1
 8007ac2:	3201      	adds	r2, #1
 8007ac4:	e7ef      	b.n	8007aa6 <__ieee754_sqrt+0x13a>
 8007ac6:	4680      	mov	r8, r0
 8007ac8:	e7bd      	b.n	8007a46 <__ieee754_sqrt+0xda>
 8007aca:	bf00      	nop
 8007acc:	7ff00000 	.word	0x7ff00000

08007ad0 <atan>:
 8007ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad4:	ec55 4b10 	vmov	r4, r5, d0
 8007ad8:	4bc3      	ldr	r3, [pc, #780]	; (8007de8 <atan+0x318>)
 8007ada:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007ade:	429e      	cmp	r6, r3
 8007ae0:	46ab      	mov	fp, r5
 8007ae2:	dd18      	ble.n	8007b16 <atan+0x46>
 8007ae4:	4bc1      	ldr	r3, [pc, #772]	; (8007dec <atan+0x31c>)
 8007ae6:	429e      	cmp	r6, r3
 8007ae8:	dc01      	bgt.n	8007aee <atan+0x1e>
 8007aea:	d109      	bne.n	8007b00 <atan+0x30>
 8007aec:	b144      	cbz	r4, 8007b00 <atan+0x30>
 8007aee:	4622      	mov	r2, r4
 8007af0:	462b      	mov	r3, r5
 8007af2:	4620      	mov	r0, r4
 8007af4:	4629      	mov	r1, r5
 8007af6:	f7f8 fbd1 	bl	800029c <__adddf3>
 8007afa:	4604      	mov	r4, r0
 8007afc:	460d      	mov	r5, r1
 8007afe:	e006      	b.n	8007b0e <atan+0x3e>
 8007b00:	f1bb 0f00 	cmp.w	fp, #0
 8007b04:	f300 8131 	bgt.w	8007d6a <atan+0x29a>
 8007b08:	a59b      	add	r5, pc, #620	; (adr r5, 8007d78 <atan+0x2a8>)
 8007b0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007b0e:	ec45 4b10 	vmov	d0, r4, r5
 8007b12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b16:	4bb6      	ldr	r3, [pc, #728]	; (8007df0 <atan+0x320>)
 8007b18:	429e      	cmp	r6, r3
 8007b1a:	dc14      	bgt.n	8007b46 <atan+0x76>
 8007b1c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007b20:	429e      	cmp	r6, r3
 8007b22:	dc0d      	bgt.n	8007b40 <atan+0x70>
 8007b24:	a396      	add	r3, pc, #600	; (adr r3, 8007d80 <atan+0x2b0>)
 8007b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2a:	ee10 0a10 	vmov	r0, s0
 8007b2e:	4629      	mov	r1, r5
 8007b30:	f7f8 fbb4 	bl	800029c <__adddf3>
 8007b34:	4baf      	ldr	r3, [pc, #700]	; (8007df4 <atan+0x324>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	f7f8 fff6 	bl	8000b28 <__aeabi_dcmpgt>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d1e6      	bne.n	8007b0e <atan+0x3e>
 8007b40:	f04f 3aff 	mov.w	sl, #4294967295
 8007b44:	e02b      	b.n	8007b9e <atan+0xce>
 8007b46:	f000 f963 	bl	8007e10 <fabs>
 8007b4a:	4bab      	ldr	r3, [pc, #684]	; (8007df8 <atan+0x328>)
 8007b4c:	429e      	cmp	r6, r3
 8007b4e:	ec55 4b10 	vmov	r4, r5, d0
 8007b52:	f300 80bf 	bgt.w	8007cd4 <atan+0x204>
 8007b56:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007b5a:	429e      	cmp	r6, r3
 8007b5c:	f300 80a0 	bgt.w	8007ca0 <atan+0x1d0>
 8007b60:	ee10 2a10 	vmov	r2, s0
 8007b64:	ee10 0a10 	vmov	r0, s0
 8007b68:	462b      	mov	r3, r5
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	f7f8 fb96 	bl	800029c <__adddf3>
 8007b70:	4ba0      	ldr	r3, [pc, #640]	; (8007df4 <atan+0x324>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	f7f8 fb90 	bl	8000298 <__aeabi_dsub>
 8007b78:	2200      	movs	r2, #0
 8007b7a:	4606      	mov	r6, r0
 8007b7c:	460f      	mov	r7, r1
 8007b7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b82:	4620      	mov	r0, r4
 8007b84:	4629      	mov	r1, r5
 8007b86:	f7f8 fb89 	bl	800029c <__adddf3>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	4630      	mov	r0, r6
 8007b90:	4639      	mov	r1, r7
 8007b92:	f7f8 fe63 	bl	800085c <__aeabi_ddiv>
 8007b96:	f04f 0a00 	mov.w	sl, #0
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	460d      	mov	r5, r1
 8007b9e:	4622      	mov	r2, r4
 8007ba0:	462b      	mov	r3, r5
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	4629      	mov	r1, r5
 8007ba6:	f7f8 fd2f 	bl	8000608 <__aeabi_dmul>
 8007baa:	4602      	mov	r2, r0
 8007bac:	460b      	mov	r3, r1
 8007bae:	4680      	mov	r8, r0
 8007bb0:	4689      	mov	r9, r1
 8007bb2:	f7f8 fd29 	bl	8000608 <__aeabi_dmul>
 8007bb6:	a374      	add	r3, pc, #464	; (adr r3, 8007d88 <atan+0x2b8>)
 8007bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	460f      	mov	r7, r1
 8007bc0:	f7f8 fd22 	bl	8000608 <__aeabi_dmul>
 8007bc4:	a372      	add	r3, pc, #456	; (adr r3, 8007d90 <atan+0x2c0>)
 8007bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bca:	f7f8 fb67 	bl	800029c <__adddf3>
 8007bce:	4632      	mov	r2, r6
 8007bd0:	463b      	mov	r3, r7
 8007bd2:	f7f8 fd19 	bl	8000608 <__aeabi_dmul>
 8007bd6:	a370      	add	r3, pc, #448	; (adr r3, 8007d98 <atan+0x2c8>)
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	f7f8 fb5e 	bl	800029c <__adddf3>
 8007be0:	4632      	mov	r2, r6
 8007be2:	463b      	mov	r3, r7
 8007be4:	f7f8 fd10 	bl	8000608 <__aeabi_dmul>
 8007be8:	a36d      	add	r3, pc, #436	; (adr r3, 8007da0 <atan+0x2d0>)
 8007bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bee:	f7f8 fb55 	bl	800029c <__adddf3>
 8007bf2:	4632      	mov	r2, r6
 8007bf4:	463b      	mov	r3, r7
 8007bf6:	f7f8 fd07 	bl	8000608 <__aeabi_dmul>
 8007bfa:	a36b      	add	r3, pc, #428	; (adr r3, 8007da8 <atan+0x2d8>)
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	f7f8 fb4c 	bl	800029c <__adddf3>
 8007c04:	4632      	mov	r2, r6
 8007c06:	463b      	mov	r3, r7
 8007c08:	f7f8 fcfe 	bl	8000608 <__aeabi_dmul>
 8007c0c:	a368      	add	r3, pc, #416	; (adr r3, 8007db0 <atan+0x2e0>)
 8007c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c12:	f7f8 fb43 	bl	800029c <__adddf3>
 8007c16:	4642      	mov	r2, r8
 8007c18:	464b      	mov	r3, r9
 8007c1a:	f7f8 fcf5 	bl	8000608 <__aeabi_dmul>
 8007c1e:	a366      	add	r3, pc, #408	; (adr r3, 8007db8 <atan+0x2e8>)
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	4680      	mov	r8, r0
 8007c26:	4689      	mov	r9, r1
 8007c28:	4630      	mov	r0, r6
 8007c2a:	4639      	mov	r1, r7
 8007c2c:	f7f8 fcec 	bl	8000608 <__aeabi_dmul>
 8007c30:	a363      	add	r3, pc, #396	; (adr r3, 8007dc0 <atan+0x2f0>)
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	f7f8 fb2f 	bl	8000298 <__aeabi_dsub>
 8007c3a:	4632      	mov	r2, r6
 8007c3c:	463b      	mov	r3, r7
 8007c3e:	f7f8 fce3 	bl	8000608 <__aeabi_dmul>
 8007c42:	a361      	add	r3, pc, #388	; (adr r3, 8007dc8 <atan+0x2f8>)
 8007c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c48:	f7f8 fb26 	bl	8000298 <__aeabi_dsub>
 8007c4c:	4632      	mov	r2, r6
 8007c4e:	463b      	mov	r3, r7
 8007c50:	f7f8 fcda 	bl	8000608 <__aeabi_dmul>
 8007c54:	a35e      	add	r3, pc, #376	; (adr r3, 8007dd0 <atan+0x300>)
 8007c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5a:	f7f8 fb1d 	bl	8000298 <__aeabi_dsub>
 8007c5e:	4632      	mov	r2, r6
 8007c60:	463b      	mov	r3, r7
 8007c62:	f7f8 fcd1 	bl	8000608 <__aeabi_dmul>
 8007c66:	a35c      	add	r3, pc, #368	; (adr r3, 8007dd8 <atan+0x308>)
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	f7f8 fb14 	bl	8000298 <__aeabi_dsub>
 8007c70:	4632      	mov	r2, r6
 8007c72:	463b      	mov	r3, r7
 8007c74:	f7f8 fcc8 	bl	8000608 <__aeabi_dmul>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	4649      	mov	r1, r9
 8007c80:	f7f8 fb0c 	bl	800029c <__adddf3>
 8007c84:	4622      	mov	r2, r4
 8007c86:	462b      	mov	r3, r5
 8007c88:	f7f8 fcbe 	bl	8000608 <__aeabi_dmul>
 8007c8c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	d14b      	bne.n	8007d2e <atan+0x25e>
 8007c96:	4620      	mov	r0, r4
 8007c98:	4629      	mov	r1, r5
 8007c9a:	f7f8 fafd 	bl	8000298 <__aeabi_dsub>
 8007c9e:	e72c      	b.n	8007afa <atan+0x2a>
 8007ca0:	ee10 0a10 	vmov	r0, s0
 8007ca4:	4b53      	ldr	r3, [pc, #332]	; (8007df4 <atan+0x324>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	4629      	mov	r1, r5
 8007caa:	f7f8 faf5 	bl	8000298 <__aeabi_dsub>
 8007cae:	4b51      	ldr	r3, [pc, #324]	; (8007df4 <atan+0x324>)
 8007cb0:	4606      	mov	r6, r0
 8007cb2:	460f      	mov	r7, r1
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	4629      	mov	r1, r5
 8007cba:	f7f8 faef 	bl	800029c <__adddf3>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	4639      	mov	r1, r7
 8007cc6:	f7f8 fdc9 	bl	800085c <__aeabi_ddiv>
 8007cca:	f04f 0a01 	mov.w	sl, #1
 8007cce:	4604      	mov	r4, r0
 8007cd0:	460d      	mov	r5, r1
 8007cd2:	e764      	b.n	8007b9e <atan+0xce>
 8007cd4:	4b49      	ldr	r3, [pc, #292]	; (8007dfc <atan+0x32c>)
 8007cd6:	429e      	cmp	r6, r3
 8007cd8:	da1d      	bge.n	8007d16 <atan+0x246>
 8007cda:	ee10 0a10 	vmov	r0, s0
 8007cde:	4b48      	ldr	r3, [pc, #288]	; (8007e00 <atan+0x330>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	4629      	mov	r1, r5
 8007ce4:	f7f8 fad8 	bl	8000298 <__aeabi_dsub>
 8007ce8:	4b45      	ldr	r3, [pc, #276]	; (8007e00 <atan+0x330>)
 8007cea:	4606      	mov	r6, r0
 8007cec:	460f      	mov	r7, r1
 8007cee:	2200      	movs	r2, #0
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	f7f8 fc88 	bl	8000608 <__aeabi_dmul>
 8007cf8:	4b3e      	ldr	r3, [pc, #248]	; (8007df4 <atan+0x324>)
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f7f8 face 	bl	800029c <__adddf3>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	4630      	mov	r0, r6
 8007d06:	4639      	mov	r1, r7
 8007d08:	f7f8 fda8 	bl	800085c <__aeabi_ddiv>
 8007d0c:	f04f 0a02 	mov.w	sl, #2
 8007d10:	4604      	mov	r4, r0
 8007d12:	460d      	mov	r5, r1
 8007d14:	e743      	b.n	8007b9e <atan+0xce>
 8007d16:	462b      	mov	r3, r5
 8007d18:	ee10 2a10 	vmov	r2, s0
 8007d1c:	4939      	ldr	r1, [pc, #228]	; (8007e04 <atan+0x334>)
 8007d1e:	2000      	movs	r0, #0
 8007d20:	f7f8 fd9c 	bl	800085c <__aeabi_ddiv>
 8007d24:	f04f 0a03 	mov.w	sl, #3
 8007d28:	4604      	mov	r4, r0
 8007d2a:	460d      	mov	r5, r1
 8007d2c:	e737      	b.n	8007b9e <atan+0xce>
 8007d2e:	4b36      	ldr	r3, [pc, #216]	; (8007e08 <atan+0x338>)
 8007d30:	4e36      	ldr	r6, [pc, #216]	; (8007e0c <atan+0x33c>)
 8007d32:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007d36:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007d3a:	e9da 2300 	ldrd	r2, r3, [sl]
 8007d3e:	f7f8 faab 	bl	8000298 <__aeabi_dsub>
 8007d42:	4622      	mov	r2, r4
 8007d44:	462b      	mov	r3, r5
 8007d46:	f7f8 faa7 	bl	8000298 <__aeabi_dsub>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007d52:	f7f8 faa1 	bl	8000298 <__aeabi_dsub>
 8007d56:	f1bb 0f00 	cmp.w	fp, #0
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	460d      	mov	r5, r1
 8007d5e:	f6bf aed6 	bge.w	8007b0e <atan+0x3e>
 8007d62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d66:	461d      	mov	r5, r3
 8007d68:	e6d1      	b.n	8007b0e <atan+0x3e>
 8007d6a:	a51d      	add	r5, pc, #116	; (adr r5, 8007de0 <atan+0x310>)
 8007d6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007d70:	e6cd      	b.n	8007b0e <atan+0x3e>
 8007d72:	bf00      	nop
 8007d74:	f3af 8000 	nop.w
 8007d78:	54442d18 	.word	0x54442d18
 8007d7c:	bff921fb 	.word	0xbff921fb
 8007d80:	8800759c 	.word	0x8800759c
 8007d84:	7e37e43c 	.word	0x7e37e43c
 8007d88:	e322da11 	.word	0xe322da11
 8007d8c:	3f90ad3a 	.word	0x3f90ad3a
 8007d90:	24760deb 	.word	0x24760deb
 8007d94:	3fa97b4b 	.word	0x3fa97b4b
 8007d98:	a0d03d51 	.word	0xa0d03d51
 8007d9c:	3fb10d66 	.word	0x3fb10d66
 8007da0:	c54c206e 	.word	0xc54c206e
 8007da4:	3fb745cd 	.word	0x3fb745cd
 8007da8:	920083ff 	.word	0x920083ff
 8007dac:	3fc24924 	.word	0x3fc24924
 8007db0:	5555550d 	.word	0x5555550d
 8007db4:	3fd55555 	.word	0x3fd55555
 8007db8:	2c6a6c2f 	.word	0x2c6a6c2f
 8007dbc:	bfa2b444 	.word	0xbfa2b444
 8007dc0:	52defd9a 	.word	0x52defd9a
 8007dc4:	3fadde2d 	.word	0x3fadde2d
 8007dc8:	af749a6d 	.word	0xaf749a6d
 8007dcc:	3fb3b0f2 	.word	0x3fb3b0f2
 8007dd0:	fe231671 	.word	0xfe231671
 8007dd4:	3fbc71c6 	.word	0x3fbc71c6
 8007dd8:	9998ebc4 	.word	0x9998ebc4
 8007ddc:	3fc99999 	.word	0x3fc99999
 8007de0:	54442d18 	.word	0x54442d18
 8007de4:	3ff921fb 	.word	0x3ff921fb
 8007de8:	440fffff 	.word	0x440fffff
 8007dec:	7ff00000 	.word	0x7ff00000
 8007df0:	3fdbffff 	.word	0x3fdbffff
 8007df4:	3ff00000 	.word	0x3ff00000
 8007df8:	3ff2ffff 	.word	0x3ff2ffff
 8007dfc:	40038000 	.word	0x40038000
 8007e00:	3ff80000 	.word	0x3ff80000
 8007e04:	bff00000 	.word	0xbff00000
 8007e08:	08008070 	.word	0x08008070
 8007e0c:	08008050 	.word	0x08008050

08007e10 <fabs>:
 8007e10:	ec51 0b10 	vmov	r0, r1, d0
 8007e14:	ee10 2a10 	vmov	r2, s0
 8007e18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007e1c:	ec43 2b10 	vmov	d0, r2, r3
 8007e20:	4770      	bx	lr
	...

08007e24 <_init>:
 8007e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e26:	bf00      	nop
 8007e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e2a:	bc08      	pop	{r3}
 8007e2c:	469e      	mov	lr, r3
 8007e2e:	4770      	bx	lr

08007e30 <_fini>:
 8007e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e32:	bf00      	nop
 8007e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e36:	bc08      	pop	{r3}
 8007e38:	469e      	mov	lr, r3
 8007e3a:	4770      	bx	lr
